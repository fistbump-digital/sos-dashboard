{"version":3,"sources":["assets/icons/add.svg","assets/icons/candidate.svg","assets/icons/dashboard.svg","assets/icons/job.svg","assets/icons/role.svg","assets/icons/user.svg","assets/icons/dual-ball-loader.svg","assets/icons/search.svg","assets/icons/auth.svg","assets/icons/company.svg","assets/icons/arrow.svg","components/Loader.js","styles/index.js","components/Table/index.js","components/TableSkeletonLoader.js","utils/helperFunctions.js","recoil/atoms.js","components/Sidebar.js","components/PieChart.js","api/index.js","components/Toast.js","components/ChartSkeleton.js","pages/Dashboard/index.js","components/Search.js","components/Controls.js","styles/StyledMaterialUI.js","components/Modals/DeleteModal.js","recoil/selectors.js","pages/Job/components/NewTable.js","pages/Job/JobPage.js","components/SearchBar.js","pages/Candidate/components/NewCandidateTable.js","pages/Candidate/index.js","pages/Role/index.js","pages/User/index.js","pages/Job/components/JobInput.js","pages/Candidate/components/BulkUpload.js","pages/Job/components/NewJobInput.js","pages/Job/AddJob.js","components/PageTab.js","utils/sharedVariables.js","pages/Job/components/JobInfo.js","pages/Job/components/NewJobInfo.js","pages/Job/components/AppliedCandidatesTable.js","pages/Job/components/Logs.js","pages/Job/JobDetails.js","pages/Candidate/components/CandidateInput.js","pages/Candidate/components/NewCandidateInput.js","pages/Candidate/AddCandidate.js","pages/Candidate/components/AppliedJobsTable.js","pages/Candidate/components/CandidateInfo.js","pages/Candidate/components/NewCandidateInfo.js","pages/Candidate/components/Logs.js","pages/Candidate/NewCandidateDetails.js","pages/Job/ApplyJobList.js","pages/Profile/index.js","pages/Company/index.js","pages/Company/components/CompanyInput.js","pages/Company/AddCompany.js","pages/Signin/components/SigninForm.js","pages/Signin/index.js","components/Navbar.js","pages/Role/components/RoleInput.js","pages/Role/AddRole.js","pages/User/components/UserInput.js","pages/User/AddUser.js","pages/Job/EditJob.js","pages/Candidate/AppliedCandidate.js","pages/Candidate/EditCandidate.js","components/Logs.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Loader","LoaderContainer","LoaderIconContainer","src","LoaderIcon","styled","div","img","RemoveSpaces","css","themeBorder","Card","form","CardTitle","h5","StyledNavlink","NavLink","TableRow","tr","TableData","td","TableHead","th","ContentContainer","h3","label","TextField","ul","li","p","ControlButton","Button","StyledCheckbox","input","ModalBody","ModalTitle","h4","ModalWarning","ModalText","ModalButtonContainer","PipelineContainer","PipelineCard","PipelineTitle","PipelineStat","Category","CategoryGrid","DataContainer","CategoryMainTitle","h1","Title","Content","Table","headings","children","TableContainer","TableHeadContainer","TableHeadingRow","TableBody","table","tbody","thead","TableSkeletonLoader","renderTableHeading","renderTableBody","limit","i","push","key","uuid","loopHead","loopBody","trueKeysToArr","obj","Object","keys","filter","id","titleGenerator","arr","title","count","length","renderWithLoader","val","component","encryptObj","objStr","JSON","stringify","cryptojs","AES","encrypt","process","toString","formatDate","date","dateArr","Date","toDateString","split","shift","join","pickerDateFormat","dateStr","toISOString","jobAtom","atom","default","singlejobAtom","candidateAtom","companyAtom","roleAtom","userAtom","statsAtom","jobCheckedAtom","candidateCheckedAtom","companyCheckedAtom","roleCheckedAtom","userCheckedAtom","jobTab","candidateTab","appliedCandidateTabAtom","isAuthAtom","email","password","currentUserAtom","statusAtom","Sidebar","permissions","useRecoilValue","roleId","activeLinkStyle","color","backgroundColor","fontWeight","boxShadow","SidebarContainer","MenuItem","uniqueID","activeStyle","to","NavIcon","DashboardIcon","get","JobIcon","CandidateIcon","RoleIcon","UserIcon","PieChart","labels","chartData","datasets","data","ChartContainer","API_URI","deleteJobs","createBulkCandidate","getCandidates","applyJob","jobEndpoint","createBulkJob","jobsEndpoint","candidateEndpoint","companyEndpoint","companiesEndpoint","roleEndpoint","rolesEndpoint","userEndpoint","usersEndpoint","loginEndpoint","logoutEndpoint","verifyEndpoint","statusEndpoint","statsEndpoint","logsApi","toast","configure","position","POSITION","BOTTOM_RIGHT","autoClose","pauseOnFocusLoss","toastId","draggablePercent","ChartSkeleton","ChartCard","TitleContainer","width","circle","height","DashboardPage","useRecoilState","stats","setStats","useEffect","axios","withCredentials","then","catch","e","error","message","console","log","PieContainer","job","assigned","unassigned","ChartTitle","total","candidate","applied","unapplied","Search","onChange","SearchDiv","InputBase","placeholder","inputProps","Controls","onSearchChange","search","ControlContainer","ControlTitle","ControlSearch","ControlButtonContainer","SMUIButton","SMUITextField","SMUISelect","Select","SMUIFormControl","Autocomplete","FormControl","SMUIIconButton","IconButton","SMUIModal","Modal","DeleteModal","open","onClose","deleteHandler","onClick","variant","filterTrueJobChecked","selector","checkedJob","filterTrueCandidateChecked","checkedCandidate","selectedCompanies","companyChecked","selectedRoles","roleChecked","selectedUsers","userChecked","descendingComparator","a","b","orderBy","headCells","numeric","disablePadding","EnhancedTableHead","props","classes","onSelectAllClick","order","numSelected","rowCount","onRequestSort","TableCell","padding","Checkbox","indeterminate","checked","map","headCell","align","sortDirection","TableSortLabel","active","direction","property","event","toUpperCase","className","visuallyHidden","useToolbarStyles","makeStyles","theme","root","paddingLeft","spacing","paddingRight","highlight","palette","type","secondary","main","lighten","light","text","primary","dark","flex","EnhancedTableToolbar","jobData","setFilterData","rows","handleDeleteClick","toApply","candidateApplyHandler","currentUser","history","useHistory","location","useLocation","pathname","Toolbar","clsx","Typography","style","textAlign","margin","inputVal","target","value","filterData","jobCode","toLowerCase","includes","jobTitle","state","district","zone","company","vertical","division","industry","Tooltip","aria-label","headers","filename","useStyles","paper","marginBottom","minWidth","border","clip","overflow","top","EnhancedTable","React","useState","setOrder","setOrderBy","selected","setSelected","page","setPage","rowsPerPage","setRowsPerPage","currentCandidate","status","noOfOpening","startDate","closeDate","ctcMin","ctcMax","CVShared","sharedToHRDate","JDAttachmentLink","code","JDAttactmentLink","createData","emptyRows","Math","min","Paper","patch","alert","err","applyJobRequest","post","jobIds","logRequest","all","spread","success","goBack","aria-labelledby","size","newSelecteds","n","array","comparator","stabilizedThis","el","index","sort","stableSort","getComparator","slice","row","isItemSelected","indexOf","labelId","hover","selectedIndex","newSelected","concat","handleClick","role","aria-checked","tabIndex","scope","href","colSpan","TablePagination","rowsPerPageOptions","onChangePage","newPage","onChangeRowsPerPage","parseInt","JobPage","setJobData","setChecked","ids","isModalOpen","setIsModalOpen","toggleModal","jobHeading","heading","_id","newData","onCheckHandler","candidateName","contactNumber","annualSalary","currentLocation","currentEmployer","designation","CandidatePage","candidateData","setCandidateData","RolePage","roles","setRoles","renderHeading","renderRoleData","name","vendor","users","createdAt","checkHandler","AddCircle","UserPage","setUsers","renderUserHeading","showUsers","user","renderUserData","firstName","lastName","userName","contact","JobInput","BulkUpload","setBulkUpload","createBulk","selectedFile","setSelectedFile","source","setSource","paddingBottom","right","Close","Grid","container","item","xs","md","files","accept","InputLabel","formData","FormData","append","method","url","lastModifiedDate","fileData","NewJobInput","edit","setLoading","bulkUpload","singleJobData","setSingleJobData","formValidation","yup","required","formik","useFormik","initialValues","validationSchema","onSubmit","values","resetForm","setTimeout","handleSubmit","handleChange","touched","Boolean","errors","helperText","defaultValue","verticals","AddJob","PageTab","setValue","renderLabels","Tab","TabBG","Tabs","_event","newValue","indicatorColor","textColor","stages","JobInfo","NewJobInfo","AppliedCandidatesTable","match","params","rowKey","loading","isEdit","setIsEdit","newCandidateStatusValue","setNewCandidateStatusValue","setData","editSave","shortlistedCandidates","candidates","shortlisted","assessmentCandidates","assessment","hiringManagerReviewCandidates","hiringManagerReview","interviewCandidates","interview","salaryFitmentCandidates","salaryFitment","offerCandidates","offer","documentationCandidates","documentation","joiningCandidates","joining","jobId","applicants","candidateStatus","contactNo","jobs","cStatus","ctc","currentCompany","elevation","square","head","tableHeadStyle","editChange","editHandler","textTransform","Logs","logs","setLogs","response","changesByFullname","changesBy","jobName","jobStatus","changedBy","JobDetails","jobTabIndex","setJob","jobFullData","selectedJob","find","stageDataCount","countObj","counter","statusId","currentStage","stageName","stage","candidateId","delete","candidateCode","basic","fullName","primaryEmail","mobile","address","professional","functionalArea","renderTabBody","CandidateInput","NewCandidateInput","matches","max","AddCandidate","AppliedJobsTable","shortlistedJobs","assessmentJobs","hiringManagerReviewJobs","interviewJobs","salaryFitmentJobs","offerJobs","documentationJobs","joiningJobs","applicantsNumber","statusRequest","CandidateInfo","secondaryEmail","pan","dateOfBirth","experience","education","skillSet","currentSalary","expected","streetName","country","pincode","renderExperience","summary","fromDate","tillDate","renderSkill","skill","renderEducation","qualificationName","instituteName","studiedFromDate","studiedTillDate","DOB","postalAddress","resumeTitle","resumeID","workExp","preferredLocation","PGCourse","UGCourse","postPGCourse","lastActiveDate","commentOne","commentTwo","commentThree","commentFour","commentFive","CandidateDetails","setCandidate","jobDetails","jobOpeningInfo","noOfOpenings","PlaylistAdd","NewCandidateInfo","ApplyJobList","ApplyJobListContainer","ProfilePage","CompanyPage","companies","setCompanies","selectedCompany","renderCompanyHeading","deleteManyHandler","renderCompanyData","companyName","companyAddress","CompanyInput","setCompanyName","setCompanyAddress","AddCompanyHandler","companyData","CompanyTextField","multiline","rowsMax","AddCompany","SigninForm","setUser","setPassword","setIsAuth","setCurrentUser","isLoading","setIsLoading","submitHandler","preventDefault","resData","userData","SigninFormContainer","SiginFormTitle","SiginFormDesc","SigninInput","SignInButton","CircularProgress","Signin","SigninContainer","AuthImage","AuthIcon","Navbar","anchorEl","setAnchorEl","handleClose","logoutHandler","NavbarContainer","Logo","LogoHighlight","startIcon","currentTarget","Menu","keepMounted","span","RoleInput","setName","setVendor","create","update","read","setPermissions","roleData","permissionsTemp","selectAllHandler","PermissionTable","PermissionTableRow","PermissionTableHead","PermissionTableData","AddRole","UserInput","setRoleId","setFirstName","setLastName","setUserName","setEmail","setContact","isAutoGenerated","setIsAutoGenerated","saveUserHandler","disabled","AutoGeneratorPassContainer","passwordGenerator","generate","numbers","symbols","excludeSimilarCharacters","AutoGeneratorLabel","AddUser","EditJob","AppliedCandidate","setStatus","newStageGenerator","selectedStage","setSelectedStage","changeStageHangler","userId","renderTimelineData","currentStatus","renderStageOption","EditCandidate","App","isAuth","setAuth","routes","path","exact","AppContainer","Layout","ComponentContainer","isLocalhost","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","origin","addEventListener","fetch","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.90d23097.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.15cf12ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/candidate.5138f324.svg\";","module.exports = __webpack_public_path__ + \"static/media/dashboard.3949fa5b.svg\";","module.exports = __webpack_public_path__ + \"static/media/job.df887e14.svg\";","module.exports = __webpack_public_path__ + \"static/media/role.9f9a7329.svg\";","module.exports = __webpack_public_path__ + \"static/media/user.a0b238c9.svg\";","module.exports = __webpack_public_path__ + \"static/media/dual-ball-loader.d6d67d34.svg\";","module.exports = __webpack_public_path__ + \"static/media/search.19142cc5.svg\";","module.exports = __webpack_public_path__ + \"static/media/auth.910669c3.svg\";","module.exports = __webpack_public_path__ + \"static/media/company.5c37dd19.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.dc486541.svg\";","import React from 'react'\nimport styled from 'styled-components'\nimport LoaderIcon from '../assets/icons/dual-ball-loader.svg'\n\nfunction Loader() {\n\treturn (\n\t\t<LoaderContainer>\n\t\t\t<LoaderIconContainer src={LoaderIcon} />\n\t\t</LoaderContainer>\n\t)\n}\n\nexport default Loader\n\nconst LoaderContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\theight: 100vh;\n`\n\nconst LoaderIconContainer = styled.img`\n\twidth: 100px;\n`\n","import styled, { css } from 'styled-components'\nimport { NavLink } from 'react-router-dom'\nimport {\n\tButton,\n\tInputLabel,\n\tMenuItem,\n\tSelect,\n\tTextField,\n\tModal\n} from '@material-ui/core'\n\nexport const RemoveSpaces = css`\n\tmargin: 0px;\n\tpadding: 0px;\n`\n\nexport const themeBorder = css`\n\tborder: 1px solid #0000003b;\n\tborder-radius: 6px;\n`\n\nexport const MultipleItemInputContainer = styled.form`\n\tdisplay: flex;\n\talign-items: center;\n\twidth: 100%;\n`\n\nexport const Card = styled.div`\n\tpadding: 10px 20px;\n\t/* border-radius: 3px; */\n\t/* border: 1px solid #0000003b; */\n\tbackground-color: white;\n\tmargin-bottom: 10px;\n\tbox-shadow: 3px 3px 5px 0px #00000017;\n`\n\nexport const CardTitle = styled.h5`\n\ttext-align: left;\n\tcolor: #333;\n\t${RemoveSpaces};\n\tpadding: 5px 0px;\n`\n\nexport const StyledNavlink = styled(NavLink)`\n\twidth: 150px;\n\tpadding: 6px 10px;\n\tborder-radius: 0.25rem;\n\tdisplay: flex;\n\talign-items: center;\n\tcolor: black;\n\ttext-decoration: none;\n\tfont-weight: 400;\n\t&:focus {\n\t\tcolor: black;\n\t}\n\t&:hover {\n\t\tcolor: black;\n\t}\n`\n\nexport const TableRow = styled.tr`\n\t/* cursor: pointer; */\n\ttransition: all 0.5s;\n\t&:hover {\n\t\tbackground-color: #eef0f7;\n\t}\n`\n\nexport const TableData = styled.td`\n\tborder: 0;\n\tfont-size: 0.9em;\n\n\ttext-align: left;\n\tpadding: 4px;\n\n\tborder-bottom: 1px solid #00000021;\n`\n\nexport const TableHead = styled.th`\n\tborder: 0;\n\tfont-size: 0.9em;\n\n\ttext-align: left;\n\tpadding: 4px;\n\n\tborder-bottom: 1px solid #00000021;\n\tcolor: #000000c2;\n`\nexport const PageLayout = styled.div`\n\t/* width: 100%; */\n\tpadding: 10px;\n`\n\nexport const InputContainer = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\twidth: 100%;\n\talign-items: flex-start;\n`\n\nexport const CategoryContainer = styled.div``\n\nexport const CategoryTitle = styled.h3`\n\t${RemoveSpaces};\n`\n\nexport const Label = styled.label``\n\nexport const StyledTextField = styled(TextField)`\n\twidth: 100%;\n\tmargin: 10px;\n`\n\nexport const ItemListContainer = styled.ul`\n\tlist-style: none;\n\tpadding: 0;\n\tmargin: 0;\n\tdisplay: flex;\n\tpadding: 10px;\n\tborder: 1px dashed #0000003b;\n\tbackground-color: #0000000d;\n\tborder-radius: 6px;\n\tmargin: 20px 0px;\n\tflex-flow: wrap;\n`\n\nexport const ItemList = styled.li`\n\tmargin: 5px;\n\tpadding: 5px 10px;\n\tborder-radius: 6px;\n\tbackground-color: white;\n\tborder: 1px solid #0000003b;\n`\nexport const DataTitle = styled.h5`\n\ttext-align: left;\n\t${RemoveSpaces};\n`\n\nexport const DataContent = styled.p`\n\t${RemoveSpaces};\n\ttext-align: left;\n`\n\nexport const ContentContainer = styled.div`\n\tpadding: 10px;\n`\n\nexport const IconButton = styled.img`\n\twidth: 28px;\n\tcursor: pointer;\n`\n\nexport const ControlButton = styled(Button)`\n\t&& {\n\t\tmargin: 5px;\n\t\tpadding: 2px 10px;\n\t}\n`\n\nexport const StyledCheckbox = styled.input`\n\twidth: 18px;\n\theight: 18px;\n`\n\n// Modal\n\nexport const ModalBody = styled.div`\n\tbackground-color: white;\n\tmargin-top: 50px;\n\tpadding: 20px;\n\tborder-radius: 5px;\n`\nexport const ModalTitle = styled.h4`\n\t${RemoveSpaces};\n\tpadding-bottom: 10px;\n`\n\nexport const ModalWarning = styled.p`\n\t${RemoveSpaces}\n\tpadding: 10px;\n\tfont-weight: bold;\n\tborder: 2px solid red;\n\tborder-radius: 5px;\n\tborder-left: 10px solid red;\n`\n\nexport const ModalText = styled.p`\n\t${RemoveSpaces};\n\tpadding-top: 10px;\n`\n\nexport const ModalButtonContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-end;\n\tmargin-top: 20px;\n`\n\n//Pipeline\nexport const PipelineContainer = styled(Card)`\n\tdisplay: grid;\n\tgrid-template-columns: repeat(3, 1fr);\n\trow-gap: 1em;\n\tpadding: 50px;\n`\nexport const PipelineCard = styled.div`\n\tdisplay: flex;\n\tpadding: 20px;\n\talign-items: center;\n\tjustify-content: center;\n\tbackground-color: #4caf5029;\n\tmargin: 0px;\n\theight: 50px;\n\ttransition: all 0.3s;\n\tclip-path: polygon(90% 0, 100% 50%, 90% 100%, 0% 100%, 10% 50%, 0% 0%);\n\n\t&:hover {\n\t\tbackground-color: #ffc10726;\n\t\ttransform: translateX(10px);\n\t}\n`\nexport const PipelineTitle = styled.p`\n\t${RemoveSpaces};\n\tcolor: #333;\n\tfont-weight: lighter;\n\tfont-size: 1.25em;\n`\n\nexport const PipelineStat = styled.p`\n\t${RemoveSpaces};\n\tpadding-right: 10px;\n\n\tfont-size: 2em;\n\tfont-weight: bold;\n\tcolor: #333;\n`\n\n//\nexport const Category = styled.div`\n\tpadding: 20px;\n`\n\nexport const CategoryGrid = styled.div`\n\tdisplay: grid;\n\tgap: 1em;\n\tgrid-template-columns: repeat(2, 1fr);\n\tpadding-bottom: 20px;\n`\n\nexport const DataContainer = styled.div`\n\ttext-align: left;\n`\nexport const CategoryMainTitle = styled.h1`\n\t${RemoveSpaces};\n\ttext-align: left;\n\tcolor: #333;\n\tfont-size: 1.5em;\n\tpadding-bottom: 15px;\n`\n\nexport const Title = styled.h3`\n\t${RemoveSpaces};\n\tcolor: #333;\n\tfont-size: 1em;\n`\n\nexport const Content = styled.p`\n\t${RemoveSpaces};\n\tcolor: #333;\n\tfont-size: 1.2em;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport { themeBorder } from '../../styles'\n\nfunction Table({ headings, children }) {\n\treturn (\n\t\t<TableContainer>\n\t\t\t<TableHeadContainer>\n\t\t\t\t<TableHeadingRow>{headings}</TableHeadingRow>\n\t\t\t</TableHeadContainer>\n\t\t\t<TableBody>{children}</TableBody>\n\t\t</TableContainer>\n\t)\n}\n\nexport default Table\n\nconst TableHeadingRow = styled.tr`\n\tbackground-color: #eef0f7;\n\tcolor: #eee;\n`\n\nconst TableContainer = styled.table`\n\tpadding: 5px;\n\tborder: 0;\n\twidth: 100%;\n\tbackground-color: white;\n\t/* box-shadow: 2px 3px 20px 0px #00000017; */\n\t/* border-collapse: collapse; */\n\toverflow: scroll;\n\t/* ${themeBorder}; */\n\tbox-shadow: 3px 3px 5px 0px #00000017;\n`\n\nconst TableBody = styled.tbody``\n\nconst TableHeadContainer = styled.thead``\n","import React from 'react'\nimport Table from './Table'\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport { TableData, TableHead, TableRow } from '../styles'\nimport { v4 as uuid } from 'uuid'\n\nfunction TableSkeletonLoader() {\n\tlet renderTableHeading = []\n\tlet renderTableBody = []\n\n\tconst loopHead = (limit) => {\n\t\tfor (let i = 0; i < limit; i++) {\n\t\t\trenderTableHeading.push(\n\t\t\t\t<TableHead key={uuid()}>\n\t\t\t\t\t<Skeleton />\n\t\t\t\t</TableHead>\n\t\t\t)\n\t\t}\n\t}\n\n\tconst loopBody = (limit) => {\n\t\tfor (let i = 0; i < limit; i++) {\n\t\t\trenderTableBody.push(\n\t\t\t\t<TableRow key={i}>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<Skeleton />\n\t\t\t\t\t</TableData>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<Skeleton />\n\t\t\t\t\t</TableData>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<Skeleton />\n\t\t\t\t\t</TableData>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<Skeleton />\n\t\t\t\t\t</TableData>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<Skeleton />\n\t\t\t\t\t</TableData>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<Skeleton />\n\t\t\t\t\t</TableData>\n\t\t\t\t</TableRow>\n\t\t\t)\n\t\t}\n\t}\n\n\tloopHead(6)\n\tloopBody(6)\n\n\treturn <Table headings={renderTableHeading}>{renderTableBody}</Table>\n}\n\nexport default TableSkeletonLoader\n","import React from 'react'\nimport Loader from '../components/Loader'\nimport { Card, ItemList, TableData, TableHead, TableRow } from '../styles'\nimport cryptojs from 'crypto-js'\nimport { v4 as uuid } from 'uuid'\nimport Skeleton, { SkeletonTheme } from 'react-loading-skeleton'\nimport TableSkeletonLoader from '../components/TableSkeletonLoader'\n\nexport const codeGenerator = (field1, field2, field3) => {\n\t//Helper Function\n\tconst abbreviator = (str, limit) => {\n\t\tconst strArr = str.split(' ')\n\t\tif (strArr.length === 1) {\n\t\t\treturn str.substring(0, limit).toUpperCase()\n\t\t} else {\n\t\t\tlet code = ''\n\t\t\tfor (let letter of strArr) {\n\t\t\t\tcode += letter[0]\n\t\t\t}\n\t\t\treturn code.substring(0, limit).toUpperCase()\n\t\t}\n\t}\n\n\tconst charCode = (str) => {\n\t\tlet codeDigit = 0\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tcodeDigit += str.charCodeAt(i) - 64\n\t\t}\n\t\treturn codeDigit\n\t}\n\n\t// Converting full string to short form\n\tconst compressedFields = [\n\t\tabbreviator(field1, 2),\n\t\tabbreviator(field2, 2),\n\t\tabbreviator(field3, 2),\n\t].join('')\n\n\t// Char code of field\n\tconst charCodeLeft = charCode(field1)\n\tconst charCodeRight = charCode(field2)\n\n\treturn `${compressedFields}${charCodeLeft}${charCodeRight}`\n}\n\nexport const addValToArr = (e, val, data, setData) => {\n\te.preventDefault()\n\tif (!data.includes(val)) {\n\t\tconst tempData = [...data]\n\t\ttempData.push(val)\n\t\tsetData(tempData)\n\t}\n}\n\nconst removeValFromArr = (item, data, setData) => {\n\tlet dataTemp = [...data]\n\tdataTemp = dataTemp.filter((val) => val !== item)\n\tsetData(dataTemp)\n}\n\nexport const renderArr = (data, setData) =>\n\tdata.map((item) => (\n\t\t<ItemList\n\t\t\tonClick={() => removeValFromArr(item, data, setData)}\n\t\t\tkey={uuid()}>\n\t\t\t{item} X\n\t\t</ItemList>\n\t))\n\nexport const trueKeysToArr = (obj) => {\n\tconst ids = Object.keys(obj)\n\treturn ids.filter((id) => obj[id] === true)\n}\n\nexport const titleGenerator = (arr, title) => {\n\tconst count = arr.length\n\tif (count > 0) {\n\t\treturn `${count} Selected`\n\t} else {\n\t\treturn title\n\t}\n}\n\nexport const renderWithLoader = (val, component) =>\n\tval ? (\n\t\tcomponent\n\t) : (\n\t\t<TableSkeletonLoader/>\n\t)\n\nexport const encryptObj = (obj) => {\n\tconst objStr = JSON.stringify(obj)\n\treturn cryptojs.AES.encrypt(\n\t\tobjStr,\n\t\tprocess.env.REACT_APP_ENCRYPTION_SECRET_KEY\n\t).toString()\n}\n\nexport const formatDate = (date) => {\n\tconst dateArr = new Date(date).toDateString().split(' ')\n\tdateArr.shift()\n\treturn dateArr.join(' ')\n}\n\nexport const counter = (arr) => {\n\tconst countObj = {}\n\tfor (const item of arr) {\n\t\tif (countObj[item]) {\n\t\t\tcountObj[item] += 1\n\t\t} else {\n\t\t\tcountObj[item] = 1\n\t\t}\n\t}\n\n\treturn countObj\n}\n\nexport const pickerDateFormat = (dateStr) => {\n\tif (dateStr) return new Date(dateStr).toISOString().split('T')[0]\n\treturn new Date().toISOString().split('T')[0]\n}\n","import { atom, selector } from 'recoil'\nimport { trueKeysToArr } from '../utils/helperFunctions'\n\nexport const jobAtom = atom({\n\tkey: 'jobs',\n\tdefault: null,\n})\n\nexport const singlejobAtom = atom({\n\tkey: 'singleJob',\n\tdefault: null\n})\n\nexport const candidateAtom = atom({\n\tkey: 'candidates',\n\tdefault: null,\n})\n\nexport const singleCandidateAtom = atom({\n\tkey: 'singleCandidate',\n\tdefault: null\n})\n\nexport const companyAtom = atom({\n\tkey: 'companies',\n\tdefault: null,\n})\n\nexport const roleAtom = atom({\n\tkey: 'roles',\n\tdefault: null,\n})\n\nexport const userAtom = atom({\n\tkey: 'users',\n\tdefault: null,\n})\n\nexport const statsAtom = atom({\n\tkey: 'stats',\n\tdefault: null\n})\n\n//--------------\n\nexport const jobCheckedAtom = atom({\n\tkey: 'jobChecked',\n\tdefault: {},\n})\n\nexport const candidateCheckedAtom = atom({\n\tkey: 'candidateChecked',\n\tdefault: {},\n})\n\nexport const companyCheckedAtom = atom({\n\tkey: 'companyChecked',\n\tdefault: {},\n})\n\nexport const roleCheckedAtom = atom({\n\tkey: 'roleChecked',\n\tdefault: {},\n})\n\nexport const userCheckedAtom = atom({\n\tkey: 'userChecked',\n\tdefault: {},\n})\n\n//------------\n\nexport const jobTab = atom({\n\tkey: 'jobTab',\n\tdefault: 0,\n})\n\nexport const candidateTab = atom({\n\tkey: 'candidateTab',\n\tdefault: 2,\n})\n\nexport const appliedCandidateTabAtom = atom({\n\tkey: 'appliedCandidateTabAtom',\n\tdefault: 0,\n})\n\n// -------------\nexport const credentialAtom = atom({\n\tkey: 'cred',\n\tdefault: { email: '', password: '' },\n})\n\nexport const isAuthAtom = atom({\n\tkey: 'isAuth',\n\tdefault: true,\n})\n\nexport const currentUserAtom = atom({\n\tkey: 'currentUser',\n\tdefault: null,\n})\n\nexport const statusAtom = atom({\n\tkey: 'status',\n\tdefault: null,\n})\n","import { get } from 'lodash'\nimport React from 'react'\nimport { useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { v4 as uniqueID } from 'uuid'\nimport CandidateIcon from '../assets/icons/candidate.svg'\nimport CompanyIcon from '../assets/icons/company.svg'\nimport DashboardIcon from '../assets/icons/dashboard.svg'\nimport JobIcon from '../assets/icons/job.svg'\nimport RoleIcon from '../assets/icons/role.svg'\nimport UserIcon from '../assets/icons/user.svg'\nimport { currentUserAtom } from '../recoil/atoms'\nimport { StyledNavlink } from '../styles'\n\n\n\nfunction Sidebar() {\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst { roleId } = currentUser || {}\n\tconst { permissions } = roleId || {}\n\n\t// const { job, candidate, role, user } = permissions || {}\n\n\n\tconst activeLinkStyle = {\n\t\tcolor: '#0168fa',\n\t\tbackgroundColor: '#EEF0F7',\n\t\tfontWeight: '500',\n\t\tboxShadow: 'inset 1px 1px 3px 0px #016afa2e',\n\t}\n\n\n\treturn (\n\t\t<SidebarContainer>\n\t\t\t<MenuItem key={uniqueID()}>\n\t\t\t\t<StyledNavlink activeStyle={activeLinkStyle} to='/dashboard'>\n\t\t\t\t\t<NavIcon src={DashboardIcon} />\n\t\t\t\t\tDashboard\n\t\t\t\t</StyledNavlink>\n\t\t\t</MenuItem>\n\n\t\t\t{get(permissions, 'job.read') && (\n\t\t\t\t<MenuItem key={uniqueID()}>\n\t\t\t\t\t<StyledNavlink activeStyle={activeLinkStyle} to='/job'>\n\t\t\t\t\t\t<NavIcon src={JobIcon} />\n\t\t\t\t\t\tJob\n\t\t\t\t\t</StyledNavlink>\n\t\t\t\t</MenuItem>\n\t\t\t)}\n\n\t\t\t{get(permissions, 'candidate.read') && (\n\t\t\t\t<MenuItem key={uniqueID()}>\n\t\t\t\t\t<StyledNavlink activeStyle={activeLinkStyle} to='/candidate'>\n\t\t\t\t\t\t<NavIcon src={CandidateIcon} />\n\t\t\t\t\t\tCandidate\n\t\t\t\t\t</StyledNavlink>\n\t\t\t\t</MenuItem>\n\t\t\t)}\n\n\t\t\t{/* {get(permissions, 'job.read') && (\n\t\t\t\t<MenuItem key={uniqueID()}>\n\t\t\t\t\t<StyledNavlink activeStyle={activeLinkStyle} to='/company'>\n\t\t\t\t\t\t<NavIcon src={CompanyIcon} />\n\t\t\t\t\t\tCompany\n\t\t\t\t\t</StyledNavlink>\n\t\t\t\t</MenuItem>\n\t\t\t)} */}\n\n\t\t\t{get(permissions, 'role.read') && (\n\t\t\t\t<MenuItem key={uniqueID()}>\n\t\t\t\t\t<StyledNavlink activeStyle={activeLinkStyle} to='/role'>\n\t\t\t\t\t\t<NavIcon src={RoleIcon} />\n\t\t\t\t\t\tRole\n\t\t\t\t\t</StyledNavlink>\n\t\t\t\t</MenuItem>\n\t\t\t)}\n\n\t\t\t{get(permissions, 'user.read') && (\n\t\t\t\t<MenuItem key={uniqueID()}>\n\t\t\t\t\t<StyledNavlink activeStyle={activeLinkStyle} to='/user'>\n\t\t\t\t\t\t<NavIcon src={UserIcon} />\n\t\t\t\t\t\tUser\n\t\t\t\t\t</StyledNavlink>\n\t\t\t\t</MenuItem>\n\t\t\t)}\n\t\t</SidebarContainer>\n\t)\n}\n\nexport default Sidebar\n\nconst SidebarContainer = styled.ul`\n\tbackground-color: white;\n\tlist-style: none;\n\tmargin: 0px;\n\tpadding: 0px;\n\tborder: 1px solid #0000003b;\n\tborder-top: 0px;\n\tpadding: 10px;\n\ttext-align: left;\n\t/* overflow-y: scroll; */\n`\n\nconst MenuItem = styled.li``\n\nconst NavIcon = styled.img`\n\tmargin-right: 10px;\n`\n","import React from 'react'\nimport { Pie } from 'react-chartjs-2'\n\nimport styled from 'styled-components'\n\nfunction PieChart({ labels, data }) {\n\tconst chartData = {\n\t\tdatasets: [\n\t\t\t{\n\t\t\t\tdata,\n\t\t\t\tbackgroundColor: ['#007bff', '#FFA500'],\n\t\t\t},\n\t\t],\n\t\tlabels,\n\t}\n\n\treturn (\n\t\t<ChartContainer>\n\t\t\t<Pie data={chartData} />\n\t\t</ChartContainer>\n\t)\n}\n\nexport default PieChart\n\nconst ChartContainer = styled.div`\n\t/* width: 400px; */\n`\n","const STAGE = process.env.NODE_ENV === 'production' ? true : false\n\nexport const API_URI = STAGE\n\t// ? 'https://careerebest-business-dashboard.herokuapp.com'\n\t? 'https://sos-business-dashboard-dev.herokuapp.com'\n\t: 'http://localhost:4000'\n\nexport const createJob = `${API_URI}/job`\nexport const getJobs = `${API_URI}/jobs`\n\nexport const getJob = `${API_URI}/job`\nexport const deleteJob = `${API_URI}/job`\nexport const deleteJobs = `${API_URI}/jobs`\n\nexport const createCandidate = `${API_URI}/candidate`\nexport const createBulkCandidate = `${API_URI}/candidateupload`\nexport const getCandidates = `${API_URI}/candidates`\nexport const getAppliedJobs = `${API_URI}/appliedjobs`\n\nexport const applyJob = `${API_URI}/apply`\n\nexport const jobEndpoint = `${API_URI}/job`\nexport const createBulkJob = `${API_URI}/jobsupload`\nexport const jobsEndpoint = `${API_URI}/jobs`\n\nexport const candidateEndpoint = `${API_URI}/candidate`\nexport const candidatesEndpoint = `${API_URI}/candidates`\n\nexport const companyEndpoint = `${API_URI}/company`\nexport const companiesEndpoint = `${API_URI}/companies`\n\nexport const roleEndpoint = `${API_URI}/role`\nexport const rolesEndpoint = `${API_URI}/roles`\n\nexport const userEndpoint = `${API_URI}/user`\nexport const usersEndpoint = `${API_URI}/users`\n\nexport const loginEndpoint = `${API_URI}/login`\nexport const logoutEndpoint = `${API_URI}/logout`\nexport const verifyEndpoint = `${API_URI}/verify`\n\nexport const statusEndpoint = `${API_URI}/status`\n\nexport const statsEndpoint = `${API_URI}/stats`\n\nexport const updateCandidateStatus = `${API_URI}/updatecandidatestatus`\n\nexport const logsApi = `${API_URI}/logs`\n\n// export const getPublicJobs = `${API_URI}/public-jobs`\n","import { toast } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport { v4 as uuid } from 'uuid'\nimport { Slide, Zoom, Flip, Bounce } from 'react-toastify'\n\ntoast.configure({\n\tposition: toast.POSITION.BOTTOM_RIGHT,\n\tautoClose: 3000,\n\tpauseOnFocusLoss: false,\n\ttoastId: uuid(),\n\t// transition: Slide,\n\tdraggablePercent: 60,\n})\n\nexport { toast }\n","import React from 'react'\nimport Skeleton from 'react-loading-skeleton'\nimport styled from 'styled-components'\nimport { Card } from '../styles'\n\nfunction ChartSkeleton() {\n\treturn (\n\t\t<ChartCard>\n\t\t\t<TitleContainer>\n\t\t\t\t<Skeleton width={100} />\n\t\t\t\t<Skeleton width={100} />\n\t\t\t</TitleContainer>\n\t\t\t<Skeleton circle={true} height={200} width={200} />\n\t\t\t<Skeleton width={300} />\n\t\t</ChartCard>\n\t)\n}\n\nexport default ChartSkeleton\n\nconst ChartCard = styled(Card)`\n\tflex: 1;\n\tmargin: 10px;\n\tpadding: 20px;\n`\n\nconst TitleContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-evenly;\n`\n","import React, { useEffect } from 'react'\nimport PieChart from '../../components/PieChart'\nimport { Card, ContentContainer, PageLayout, Title } from '../../styles'\nimport styled from 'styled-components'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { statsAtom } from '../../recoil/atoms'\nimport axios from 'axios'\nimport { statsEndpoint } from '../../api'\nimport { toast } from '../../components/Toast'\nimport Skeleton from 'react-loading-skeleton'\nimport ChartSkeleton from '../../components/ChartSkeleton'\n\nfunction DashboardPage() {\n\tconst [stats, setStats] = useRecoilState(statsAtom)\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(`${statsEndpoint}/`, { withCredentials: true })\n\t\t\t.then(({ data }) => setStats(data))\n\t\t\t.catch((e) => toast.error(`Error: ${e.message}`))\n\t}, [])\n\n\tconsole.log({ stats })\n\n\treturn (\n\t\t<>\n\t\t\t<ContentContainer>\n\t\t\t\t<PieContainer>\n\t\t\t\t\t{stats ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<ChartCard>\n\t\t\t\t\t\t\t\t<PieChart\n\t\t\t\t\t\t\t\t\tlabels={['Assigned Jobs', 'Unassigned Jobs']}\n\t\t\t\t\t\t\t\t\tdata={[stats.stats.job.assigned, stats.stats.job.unassigned]}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ChartTitle>{stats.stats.job.total} Jobs</ChartTitle>\n\t\t\t\t\t\t\t</ChartCard>\n\t\t\t\t\t\t\t<ChartCard>\n\t\t\t\t\t\t\t\t<PieChart\n\t\t\t\t\t\t\t\t\tlabels={['Applied Candidates', 'Candidates Not Applied']}\n\t\t\t\t\t\t\t\t\tdata={[\n\t\t\t\t\t\t\t\t\t\tstats.stats.candidate.applied,\n\t\t\t\t\t\t\t\t\t\tstats.stats.candidate.unapplied,\n\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<ChartTitle>\n\t\t\t\t\t\t\t\t\t{stats.stats.candidate.total} Candidates\n\t\t\t\t\t\t\t\t</ChartTitle>\n\t\t\t\t\t\t\t</ChartCard>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<ChartSkeleton />\n\t\t\t\t\t\t\t<ChartSkeleton />\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</PieContainer>\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default DashboardPage\n\nconst PieContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nconst ChartTitle = styled.h3`\n\tcolor: #333;\n`\nconst ChartCard = styled(Card)`\n\tflex: 1;\n\tmargin: 10px;\n\tpadding: 20px;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport {InputBase} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nfunction Search({onChange}) {\n        return (\n                <SearchDiv>\n                        <>\n                                <SearchIcon />\n                        </>\n                        <InputBase \n                                placeholder=\"Search…\"\n                                inputProps={{ 'aria-label': 'search' }} \n                                onChange={onChange}\n                        />\n                </SearchDiv>\n        )\n}\n\nexport default Search\n\nconst SearchDiv = styled.div`\n        padding: 4px 10px;\n        display: flex;\n        align-items: center;\n        color: #ABABAB;\n        background-color: #EEF0F7;\n        border-radius: 4px;\n`;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { RemoveSpaces } from '../styles'\nimport Search from '../components/Search'\n\nfunction Controls({ title, children, onSearchChange, search }) {\n\treturn (\n\t\t<ControlContainer>\n\t\t\t<ControlTitle>{title}</ControlTitle>\n\t\t\t{\n\t\t\t\tsearch ? <ControlSearch><Search onChange={onSearchChange} /></ControlSearch> : null\n\t\t\t}\n\t\t\t<ControlButtonContainer>{children}</ControlButtonContainer>\n\t\t</ControlContainer>\n\t)\n}\n\nexport default Controls\n\nconst ControlContainer = styled.div`\n\tposition: sticky;\n\ttop: 0px;\n\tz-index: 10;\n\tpadding: 10px 20px;\n\tbackground-color: white;\n\tdisplay: flex;\n\tborder: 1px solid #0000003b;\n\tborder-top: none;\n\tborder-left: none;\n\t/* border-radius: 6px; */\n\talign-items: center;\n\tjustify-content: space-between;\n`\n\nconst ControlTitle = styled.h4`\n\t${RemoveSpaces}\n\tcolor: #333;\n`\n\nconst ControlSearch = styled.div`\n\tmargin: 0 auto;\t\n`\n\nconst ControlButtonContainer = styled.div`\n\tdisplay: flex;\n`\n","import styled from 'styled-components'\nimport {\n\tButton,\n\tFormControl,\n\tIconButton,\n\tModal,\n\tSelect,\n\tTextField,\n} from '@material-ui/core'\nimport {Autocomplete} from '@material-ui/lab'\n\nexport const SMUIButton = styled(Button)`\n\t&& {\n\t\tmargin: 10px;\n\t\tpadding: 5px 20px;\n\t}\n`\nexport const SMUITextField = styled(TextField)`\n\t&& {\n\t\tmargin: 10px 0px;\n\t\twidth: 100%;\n\t}\n`\nexport const SMUISelect = styled(Select)`\n\t&& {\n\t\twidth: 100%;\n\t\t/* margin: 10px 0px; */\n\t\t/* padding: 5px 0px; */\n\n\t\ttext-align: left;\n\t}\n`\nexport const SMUIAutocomplete = styled(Autocomplete)`\n\t&& {\n\t\twidth: 100%;\n\t\t/* margin: 10px 0px; */\n\t\t/* padding: 5px 0px; */\n\n\t\ttext-align: left;\n\t}\n`\nexport const SMUIFormControl = styled(FormControl)`\n\t&& {\n\t\twidth: 100%;\n\t\tmargin: 10px 0px;\n\t\ttext-align: left;\n\t}\n`\nexport const SMUIIconButton = styled(IconButton)`\n\t&&{\n\t\tpadding: 0px;\n\t}\n`\n\nexport const SMUIModal = styled(Modal)`\n\t&& {\n\t\tposition: fixed;\n\t\ttop: auto;\n\t\tbottom: auto;\n\t\tleft: auto;\n\t\tmargin: 0 auto;\n\t\tright: auto;\n\t\twidth: 500px;\n\t\toutline: none;\n\t\tborder-style: none;\n\t}\n\t&&:focus {\n\t\toutline: none;\n\t}\n`\n","import React from 'react'\nimport {\n\tModalBody,\n\tModalButtonContainer,\n\n\tModalText, ModalTitle,\n\n\tModalWarning\n} from '../../styles'\nimport { SMUIButton, SMUIModal } from '../../styles/StyledMaterialUI'\n\nfunction DeleteModal({ open, onClose, count, deleteHandler }) {\n\treturn (\n\t\t<SMUIModal open={open} onClose={onClose}>\n\t\t\t<ModalBody>\n\t\t\t\t<ModalTitle>{count} Items Selected</ModalTitle>\n\t\t\t\t<ModalWarning>Warning: This action cannot be undone</ModalWarning>\n\t\t\t\t<ModalText>Do you want to delete?</ModalText>\n\t\t\t\t<ModalButtonContainer>\n\t\t\t\t\t<SMUIButton onClick={onClose}>Cancel</SMUIButton>\n\t\t\t\t\t<SMUIButton\n\t\t\t\t\t\tonClick={deleteHandler}\n\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\tvariant='contained'>\n\t\t\t\t\t\tDelete\n\t\t\t\t\t</SMUIButton>\n\t\t\t\t</ModalButtonContainer>\n\t\t\t</ModalBody>\n\t\t</SMUIModal>\n\t)\n}\n\nexport default DeleteModal\n","import { selector } from 'recoil'\nimport { trueKeysToArr } from '../utils/helperFunctions'\nimport {\n\tcandidateCheckedAtom,\n\tcompanyCheckedAtom,\n\tjobCheckedAtom,\n\troleCheckedAtom,\n\tuserCheckedAtom,\n} from './atoms'\n\nexport const filterTrueJobChecked = selector({\n\tkey: 'filterTrueJobChecked',\n\tget: ({ get }) => {\n\t\tconst checkedJob = get(jobCheckedAtom)\n\t\treturn trueKeysToArr(checkedJob)\n\t},\n})\n\nexport const filterTrueCandidateChecked = selector({\n\tkey: 'filterTrueCandidateChecked',\n\tget: ({ get }) => {\n\t\tconst checkedCandidate = get(candidateCheckedAtom)\n\t\treturn trueKeysToArr(checkedCandidate)\n\t},\n})\n\nexport const selectedCompanies = selector({\n\tkey: 'filterTrueCompanyChecked',\n\tget: ({ get }) => {\n\t\tconst companyChecked = get(companyCheckedAtom)\n\t\treturn trueKeysToArr(companyChecked)\n\t},\n})\n\nexport const selectedRoles = selector({\n\tkey: 'filterTrueRoleChecked',\n\tget: ({ get }) => {\n\t\tconst roleChecked = get(roleCheckedAtom)\n\t\treturn trueKeysToArr(roleChecked)\n\t},\n})\n\nexport const selectedUsers = selector({\n\tkey: 'filterTrueUsersChecked',\n\tget: ({ get }) => {\n\t\tconst userChecked = get(userCheckedAtom)\n\t\treturn trueKeysToArr(userChecked)\n\t},\n})\n","import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport clsx from 'clsx';\nimport { filter, get } from 'lodash'\nimport { NavLink, useHistory, useLocation } from 'react-router-dom'\nimport { lighten, makeStyles } from '@material-ui/core/styles';\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { currentUserAtom, candidateAtom } from '../../../recoil/atoms'\nimport { CSVLink, CSVDownload } from \"react-csv\";\nimport { toast } from '../../../components/Toast'\n\nimport {deleteJobs, applyJob, logsApi} from '../../../api'\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TableSortLabel,\n  Toolbar,\n  Typography,\n  Paper,\n  Checkbox,\n  IconButton,\n  Tooltip\n} from \"@material-ui/core\";\nimport {\n\tformatDate,\n\trenderWithLoader,\n\ttitleGenerator,\n} from '../../../utils/helperFunctions'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\n\nimport Search from '../../../components/Search'\n\nfunction createData(code, title, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttactmentLink) {\n  return { code, title, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttactmentLink};\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'jobCode', numeric: false, disablePadding: true, label: 'job code' },\n  { id: 'jobTitle', numeric: false, disablePadding: true, label: 'job title' },\n  { id: 'state', numeric: false, disablePadding: true, label: 'state' },\n  // { id: 'district', numeric: false, disablePadding: true, label: 'district' },\n  { id: 'zone', numeric: false, disablePadding: true, label: 'zone' },\n  { id: 'status', numeric: false, disablePadding: true, label: 'status' },\n  { id: 'noOfOpening', numeric: false, disablePadding: true, label: 'openings' },\n  // { id: 'startDate', numeric: false, disablePadding: true, label: 'start date' },\n  // { id: 'closeDate', numeric: false, disablePadding: true, label: 'close date' },\n  // { id: 'industry', numeric: false, disablePadding: true, label: 'industry' },\n  // { id: 'company', numeric: false, disablePadding: true, label: 'company' },\n  // { id: 'vertical', numeric: false, disablePadding: true, label: 'vertical' },\n  // { id: 'division', numeric: false, disablePadding: true, label: 'division' },\n  // { id: 'ctcMin', numeric: false, disablePadding: true, label: 'CTC Min' },\n  // { id: 'ctcMax', numeric: false, disablePadding: true, label: 'CTC Max' },\n  // { id: 'CVShared', numeric: false, disablePadding: true, label: 'No. of cvs shared' },\n  // { id: 'sharedToHRDate', numeric: false, disablePadding: true, label: 'shared with hr date' },\n  { id: 'JDAttachmentLink', numeric: false, disablePadding: true, label: 'jd Link' },\n];\n\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n        //     padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              <b>{headCell.label.toUpperCase()}</b>\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n    fontWeight: 'bold'\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected, jobData, setFilterData, rows, handleDeleteClick, toApply, candidateApplyHandler } = props;\n  const currentUser = useRecoilValue(currentUserAtom)\n  const history = useHistory()\n  const location = useLocation().pathname\n  \n  const onSearchChange = (e) => {\n\t\tvar inputVal = e.target.value\n\t\tvar filterData = jobData.filter(data => {\n\t\t\treturn data.jobCode.toLowerCase().includes(inputVal) || \n      data.jobTitle.toLowerCase().includes(inputVal) || \n      data.state.toLowerCase().includes(inputVal) || \n      data.district.toLowerCase().includes(inputVal) || \n      data.zone.toLowerCase().includes(inputVal) || \n      data.company.toLowerCase().includes(inputVal) || \n      data.vertical.toLowerCase().includes(inputVal) || \n      data.division.toLowerCase().includes(inputVal) || \n      data.industry.toLowerCase().includes(inputVal)\n\t\t});\n\t\tsetFilterData(filterData);\n  }\n\n  \n\n  return (\n    <>\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography style={{textAlign: 'left', flex: 'none'}} className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography style={{textAlign: 'left', flex: 'none'}} className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Jobs\n        </Typography>\n      )}\n\n      {/* search */}\n      <div style={{margin: '0 auto'}}>\n        <Search onChange={(e) => {onSearchChange(e)} } />\n      </div>\n\n\n      {numSelected > 0 ? (\n        <>\n          {\n            toApply ? \n            <Tooltip title=\"Apply\">\n              <IconButton aria-label=\"apply\">\n                <CheckCircleOutlineIcon onClick={() => candidateApplyHandler()} />\n              </IconButton>\n            </Tooltip>\n            :\n            <Tooltip title=\"Delete\">\n              <IconButton aria-label=\"delete\">\n                <DeleteIcon onClick={() => handleDeleteClick()} />\n              </IconButton>\n            </Tooltip>\n          }\n        </>\n      ) : (\n        <>\n        {get(currentUser, 'roleId.permissions.job.create') && (\n\t\t\t\t\t\t\t<Tooltip title=\"Add Job\">\n              <IconButton aria-label=\"add job\" onClick={() => history.push(`${location}/add`)}>\n                <AddIcon />\n              </IconButton>\n            </Tooltip>\n\t\t\t\t\t\t)}\n            <CSVLink data={rows} headers={headCells.label} filename={\"jobs.csv\"}>\n              <Tooltip title=\"Download\">\n                <IconButton aria-label=\"download\">\n                  <GetAppIcon />\n                </IconButton>\n              </Tooltip>\n            </CSVLink>\n          </>\n        \n      )}\n    </Toolbar>\n    </>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\n// main function\n\nexport default function EnhancedTable({filterData,setFilterData, jobData, toApply}) {\n  const classes = useStyles();\n  const history = useHistory()\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('postedOn');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const location = useLocation().pathname\n  const rows = [];\n  const currentCandidate = useRecoilValue(candidateAtom)\n\n  const handleDeleteClick = () => {\n    axios.patch(deleteJobs, {selected}, {withCredentials: true})\n    .then(data => {\n      setSelected({})\n      alert('jobs deleted')\n    })\n    .catch(err => {\n      alert(err.message)\n    })\n  }\n\n  const candidateApplyHandler = () => {\n\n    const applyJobRequest = axios.post(applyJob, {candidate: currentCandidate, jobIds: selected}, {withCredentials: true})\n    const logRequest = axios.post(logsApi, {candidate: currentCandidate, jobIds: selected, status: 'Shortlisted'}, {withCredentials: true})\n\n    axios.all([applyJobRequest, logRequest])\n    .then(axios.spread((...response) => {\n      toast.success('Jobs assigned successfully!')\n        setSelected([])\n        history.goBack()\n    }))\n    .catch(err => {\n      toast.error(`Error: ${err.message}`)\n    })\n\t}\n\n\n  filterData.map(job => {\n    const {jobCode, jobTitle, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttachmentLink} = job\n          rows.push(\n            createData(jobCode, jobTitle, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttachmentLink)\n          );\n  })\n\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.code);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, code) => {\n    const selectedIndex = selected.indexOf(code);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, code);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n\n  const isSelected = (code) => selected.indexOf(code) !== -1;\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} jobData={jobData} setFilterData={setFilterData} rows={rows} handleDeleteClick={handleDeleteClick} toApply={toApply} candidateApplyHandler={candidateApplyHandler} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy} \n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.code);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => {\n                        handleClick(event, row.code); \n                      }}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.code}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" style={{minWidth: 110}}>\n                      {toApply ? (\n                          row.code\n                        ) : (\n                          <NavLink to={`${location}/${row.code}`}>\n                            {row.code}\n                          </NavLink>\n                        )}\n\n                      </TableCell>\n                      <TableCell style={{minWidth: 200}}>{row.title}</TableCell>\n                      <TableCell style={{minWidth: 140}}>{row.state}</TableCell>\n                      {/* <TableCell style={{minWidth: 120}}>{row.district}</TableCell> */}\n                      <TableCell>{row.zone}</TableCell>\n                      <TableCell>{row.status}</TableCell>\n                      <TableCell style={{minWidth: 80}}>{row.noOfOpening}</TableCell>\n                      {/* <TableCell style={{minWidth: 140}}>{formatDate(row.startDate)}</TableCell> */}\n                      {/* <TableCell style={{minWidth: 140}}>{formatDate(row.closeDate)}</TableCell> */}\n                      {/* <TableCell style={{minWidth: 120}}>{row.industry}</TableCell> */}\n                      {/* <TableCell>{row.company}</TableCell> */}\n                      {/* <TableCell style={{minWidth: 150}}>{row.vertical}</TableCell> */}\n                      {/* <TableCell>{row.division}</TableCell> */}\n                      {/* <TableCell style={{minWidth: 120}}>{row.ctcMin}</TableCell> */}\n                      {/* <TableCell style={{minWidth: 120}}>{row.ctcMax}</TableCell> */}\n                      {/* <TableCell style={{minWidth: 180}}>{row.CVShared}</TableCell> */}\n                      {/* <TableCell style={{minWidth: 200}}>{row.sharedToHRDate}</TableCell> */}\n                      <TableCell style={{minWidth: 100}}><a href={row.JDAttactmentLink} target='_blank'>Link</a></TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={8} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","import { AddCircle, Delete, Search } from '@material-ui/icons'\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { NavLink, useHistory, useLocation } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { v4 as uuid } from 'uuid'\nimport { applyJob, deleteJobs, getJobs, jobsEndpoint } from '../../api'\nimport Controls from '../../components/Controls'\nimport DeleteModal from '../../components/Modals/DeleteModal'\nimport Table from '../../components/Table'\n\nimport {\n\tcandidateCheckedAtom,\n\tcurrentUserAtom,\n\tjobAtom,\n\tjobCheckedAtom,\n} from '../../recoil/atoms'\nimport {\n\tfilterTrueCandidateChecked,\n\tfilterTrueJobChecked,\n} from '../../recoil/selectors'\nimport {\n\tContentContainer,\n\tControlButton,\n\tStyledCheckbox,\n\tTableData,\n\tTableHead,\n\tTableRow,\n} from '../../styles'\nimport {\n\tformatDate,\n\trenderWithLoader,\n\ttitleGenerator,\n} from '../../utils/helperFunctions'\n\nimport { toast } from '../../components/Toast'\nimport { filter, get } from 'lodash'\nimport { SMUIIconButton } from '../../styles/StyledMaterialUI'\nimport EnhancedTable from './components/NewTable'\n\nfunction JobPage({ toApply }) {\n\t// React Hooks\n\tconst history = useHistory()\n\tconst location = useLocation().pathname\n\tvar [jobData, setJobData] = useRecoilState(jobAtom)\n\tconst [checked, setChecked] = useRecoilState(jobCheckedAtom)\n\tconst [, setCandidateChecked] = useRecoilState(candidateCheckedAtom)\n\tconst ids = useRecoilValue(filterTrueJobChecked)\n\tconst candidateSelectedIds = useRecoilValue(filterTrueCandidateChecked)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst [isModalOpen, setIsModalOpen] = useState(false);\n\tconst [filterData, setFilterData] = useState();\n\n\tconst toggleModal = () => setIsModalOpen(!isModalOpen)\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(jobsEndpoint, { withCredentials: true })\n\t\t\t.then(({ data }) => {\n\t\t\t\tsetJobData(data);\n\t\t\t\tsetFilterData(data);\n\t\t\t})\n\t\t\t.catch((e) => console.log(e))\n\t}, [checked, isModalOpen])\n\n\t// Variables\n\n\tconst jobHeading = [\n\t\t<StyledCheckbox\n\t\t\ttype='checkbox'\n\t\t\tcolor='primary'\n\t\t\tonChange={() => console.log('checked')}\n\t\t/>,\n\t\t'Job Code',\n\t\t'Job Title',\n\t\t'Company',\n\t\t'City',\n\t\t'Openings',\n\t\t`Resumes`,\n\t\t`Posted On`,\n\t\t// `Assigned On`,\n\t]\n\t      \n\t// Helper Functions\n\tconst onCheckHandler = (id) => {\n\t\tconst newData = {\n\t\t\t...checked,\n\t\t\t[id]: !checked[id],\n\t\t}\n\t\tsetChecked(newData)\n\n\t\tconsole.log(checked)\n\t}\n\n\tconst deleteHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.patch(deleteJobs, { ids }, { withCredentials: true })\n\t\t\ttoggleModal()\n\t\t\tsetChecked({})\n\t\t\ttoast.success('Job Deleted')\n\t\t} catch (err) {\n\t\t\ttoggleModal()\n\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\t// const candidateApplyHandler = async () => {\n\t// \ttry {\n\t// \t\tawait axios.post(\n\t// \t\t\tapplyJob,\n\t// \t\t\t{\n\t// \t\t\t\tcandidates: candidateSelectedIds,\n\t// \t\t\t\tjobs: ids,\n\t// \t\t\t\tuserId: currentUser._id,\n\t// \t\t\t},\n\t// \t\t\t{ withCredentials: true }\n\t// \t\t)\n\t// \t\tsetChecked({})\n\t// \t\tsetCandidateChecked({})\n\t// \t\thistory.goBack()\n\t// \t\ttoast.success('Candidates Assigned')\n\t// \t} catch (err) {\n\t// \t\ttoast.error('Something went wrong')\n\t// \t}\n\t// }\n\t// Renderers\n\tconst renderJobHeading = jobHeading.map((heading) => (\n\t\t<TableHead key={uuid()}>{heading}</TableHead>\n\t))\n\n\n\n\tconst renderJobData =\n\t\tfilterData &&\n\t\tfilterData.map((job) => {\n\t\t\treturn (\n\t\t\t\t<TableRow\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundColor: checked[job._id] ? '#0c68fa1f' : 'white',\n\t\t\t\t\t}}\n\t\t\t\t\tkey={job._id}>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\tchecked={checked[job._id]}\n\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\tonChange={() => onCheckHandler(job._id)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TableData>\n\n\t\t\t\t\t{/* <TableData>\n\t\t\t\t\t\t{toApply ? (\n\t\t\t\t\t\t\tjob.jobDetails.jobCode\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<NavLink to={`${location}/${job.jobDetails.jobCode}`}>\n\t\t\t\t\t\t\t\t{job.jobDetails.jobCode}\n\t\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableData>\n\t\t\t\t\t<TableData>{job.jobOpeningInfo.jobTitle}</TableData>\n\t\t\t\t\t<TableData>{job.companyDetails.companyId.companyName}</TableData>\n\t\t\t\t\t<TableData>{job.jobAddress.city}</TableData>\n\t\t\t\t\t<TableData>{job.jobOpeningInfo.noOfOpenings}</TableData>\n\t\t\t\t\t<TableData>{job.statusIds.length}</TableData>\n\t\t\t\t\t<TableData>{formatDate(job.createdAt)}</TableData> */}\n\t\t\t\t\t{/* <TableData>\n\t\t\t\t\t\t{new Date(job.jobOpeningInfo.assignedOn).toDateString()}\n\t\t\t\t\t</TableData> */}\n\t\t\t\t</TableRow>\n\t\t\t)\n\t\t})\n\n\tconst addHandler = () => {\n\t\thistory.push(`${location}/add`)\n\t}\n\n\tconst onSearchChange = (e) => {\n\t\tvar inputVal = e.target.value\n\t\tvar filterData = jobData.filter(data => {\n\t\t\treturn data.jobCode.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.jobTitle.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.state.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.district.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.zone.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.company.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.vertical.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.division.toLowerCase().includes(inputVal) || \n\t\t\t\tdata.industry.toLowerCase().includes(inputVal)\n\t\t});\n\t\tsetFilterData(filterData);\n\t}\n\t// console.log(jobData)\n\n\treturn (\n\t\t<>\n\t\t\t{/* <Controls title={titleGenerator(ids, 'Jobs')} onSearchChange={(e) => onSearchChange(e)} search={true}>\n\t\t\t\t{ids.length > 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{toApply ? (\n\t\t\t\t\t\t\t<ControlButton\n\t\t\t\t\t\t\t\tonClick={candidateApplyHandler}\n\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\tcolor='primary'>\n\t\t\t\t\t\t\t\tApply\n\t\t\t\t\t\t\t</ControlButton>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.job.delete') && (\n\t\t\t\t\t\t\t\t\t<SMUIIconButton color='secondary' onClick={toggleModal}>\n\t\t\t\t\t\t\t\t\t\t<Delete />\n\t\t\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.job.create') && (\n\t\t\t\t\t\t\t<SMUIIconButton color='primary' onClick={addHandler}>\n\t\t\t\t\t\t\t\t<AddCircle />\n\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Controls> */}\n\n\t\t\t<DeleteModal\n\t\t\t\topen={isModalOpen}\n\t\t\t\tonClose={toggleModal}\n\t\t\t\tcount={ids.length}\n\t\t\t\tdeleteHandler={deleteHandler}\n\t\t\t/>\n\n\t\t\t<ContentContainer>\n\t\t\t\t{renderWithLoader(\n\t\t\t\t\tfilterData,\n\t\t\t\t\t// <Table headings={renderJobHeading}>{renderJobData}</Table>\n\t\t\t\t\t<EnhancedTable filterData = {filterData} setFilterData={setFilterData} jobData={jobData} toApply={toApply} />\n\t\t\t\t)}\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default JobPage\n","import { Button, MenuItem, Select } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport SearchIcon from '../assets/icons/search.svg'\nimport { themeBorder } from '../styles'\nimport { v4 as uuid } from 'uuid'\n\nfunction SearchBar({ options }) {\n\tconst [searchCriteria, setSearchCriteria] = useState(options[0].value)\n\tconst [searchVal, setSearchVal] = useState('')\n\tconst renderOption = () =>\n\t\toptions.map(({ value, name }) => {\n\t\t\treturn <MenuItem key={uuid()} value={value}>{name}</MenuItem>\n\t\t})\n\n\n\tconst searchInputHandler = (e) => setSearchVal(e.target.value)\n\tconst searchCriteriaHandler = (e) => setSearchCriteria(e.target.value)\n\n\treturn (\n\t\t<SearchBarForm>\n\t\t\t<StyledSelect value={searchCriteria} onChange={searchCriteriaHandler}>\n\t\t\t\t{renderOption()}\n\t\t\t</StyledSelect>\n\t\t\t<SearchInput\n\t\t\t\tvalue={searchVal}\n\t\t\t\tonChange={searchInputHandler}\n\t\t\t\tplaceholder='Search Here...'\n\t\t\t/>\n\n\t\t\t<Button>\n\t\t\t\t<img src={SearchIcon} alt='Search Icon' />\n\t\t\t</Button>\n\t\t</SearchBarForm>\n\t)\n}\n\nexport default SearchBar\n\nconst StyledSelect = styled(Select)`\n\tpadding: 0px 20px;\n`\n\nconst SearchBarForm = styled.form`\n\tdisplay: flex;\n\tmargin: 10px 0px;\n\tjustify-content: space-between;\n\t${themeBorder}\n\tbackground-color: white;\n`\nconst SearchInput = styled.input`\n\tflex: 1;\n\tpadding: 0px 10px;\n\tborder-style: none;\n\t&:focus {\n\t\toutline: none;\n\t}\n`\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { filter, get } from 'lodash'\nimport { NavLink, useHistory, useLocation } from 'react-router-dom'\nimport { lighten, makeStyles } from '@material-ui/core/styles';\n\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { currentUserAtom } from '../../../recoil/atoms'\n\nimport { CSVLink, CSVDownload } from \"react-csv\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TablePagination,\n  TableRow,\n  TableSortLabel,\n  Toolbar,\n  Typography,\n  Paper,\n  Checkbox,\n  IconButton,\n  Tooltip\n} from \"@material-ui/core\";\nimport {\n\tformatDate,\n\trenderWithLoader,\n\ttitleGenerator,\n} from '../../../utils/helperFunctions'\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\nimport Search from '../../../components/Search'\n\nfunction createData(code, candidateName, contactNumber, email, annualSalary, currentLocation, currentEmployer) {\n  return { code, candidateName, contactNumber, email, annualSalary, currentLocation, currentEmployer};\n}\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nconst headCells = [\n  { id: 'candidateName', numeric: false, disablePadding: true, label: 'candidate name' },\n  { id: 'contactNumber', numeric: false, disablePadding: true, label: 'contact no' },\n  { id: 'email', numeric: false, disablePadding: true, label: 'email' },\n  { id: 'annualSalary', numeric: false, disablePadding: true, label: 'CTC' },\n  { id: 'currentLocation', numeric: false, disablePadding: true, label: 'location' },\n  { id: 'currentEmployer', numeric: false, disablePadding: true, label: 'current company' },\n];\n\n\nfunction EnhancedTableHead(props) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n  const createSortHandler = (property) => (event) => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'select all desserts' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n        //     padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              <b>{headCell.label.toUpperCase()}</b>\n              {orderBy === headCell.id ? (\n                <span className={classes.visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </span>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired,\n};\n\nconst useToolbarStyles = makeStyles((theme) => ({\n  root: {\n    paddingLeft: theme.spacing(2),\n    paddingRight: theme.spacing(1),\n  },\n  highlight:\n    theme.palette.type === 'light'\n      ? {\n          color: theme.palette.secondary.main,\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\n        }\n      : {\n          color: theme.palette.text.primary,\n          backgroundColor: theme.palette.secondary.dark,\n        },\n  title: {\n    flex: '1 1 100%',\n    fontWeight: 'bold'\n  },\n}));\n\nconst EnhancedTableToolbar = (props) => {\n  const classes = useToolbarStyles();\n  const { numSelected, jobData, setFilterData, rows } = props;\n  const currentUser = useRecoilValue(currentUserAtom)\n  const history = useHistory()\n  const location = useLocation().pathname\n  \n  const onSearchChange = (e) => {\n\t\tvar inputVal = e.target.value\n\t\tvar filterData = jobData.filter(data => {\n                        return data['candidateName'].toLowerCase().includes(inputVal) ||\n                                data['email'].toLowerCase().includes(inputVal) ||\n                                data['currentLocation'].toLowerCase().includes(inputVal) ||\n                                data['currentEmployer'].toLowerCase().includes(inputVal)\n\t\t});\n\t\tsetFilterData(filterData);\n\t}\n\n  return (\n    <>\n    <Toolbar\n      className={clsx(classes.root, {\n        [classes.highlight]: numSelected > 0,\n      })}\n    >\n      {numSelected > 0 ? (\n        <Typography style={{textAlign: 'left', flex: 'none'}} className={classes.title} color=\"inherit\" variant=\"subtitle1\" component=\"div\">\n          {numSelected} selected\n        </Typography>\n      ) : (\n        <Typography style={{textAlign: 'left', flex: 'none'}} className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n          Candidates\n        </Typography>\n      )}\n\n      {/* search */}\n      <div style={{margin: '0 auto'}}>\n        <Search onChange={(e) => {onSearchChange(e)} } />\n      </div>\n\n\n      {numSelected > 0 ? (\n        <Tooltip title=\"Delete\">\n          <IconButton aria-label=\"delete\">\n            <DeleteIcon onClick={() => console.log('delete button click')} />\n          </IconButton>\n        </Tooltip>\n      ) : (\n        <>\n        {get(currentUser, 'roleId.permissions.candidate.create') && (\n\t\t\t\t\t\t\t<Tooltip title=\"Add Job\">\n              <IconButton aria-label=\"add job\" onClick={() => history.push(`${location}/add`)}>\n                <AddIcon />\n              </IconButton>\n            </Tooltip>\n\t\t\t\t\t\t)}\n            <CSVLink data={rows} headers={headCells.label} filename={\"candidates.csv\"}>\n              <Tooltip title=\"Download\">\n                <IconButton aria-label=\"download\">\n                  <GetAppIcon />\n                </IconButton>\n              </Tooltip>\n            </CSVLink>\n          </>\n        \n      )}\n    </Toolbar>\n    </>\n  );\n};\n\nEnhancedTableToolbar.propTypes = {\n  numSelected: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  paper: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  table: {\n    minWidth: 750,\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1,\n  },\n}));\n\nexport default function EnhancedTable({filterData,setFilterData, jobData, toApply}) {\n  const classes = useStyles();\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('postedOn');\n  const [selected, setSelected] = React.useState([]);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const location = useLocation().pathname\n  const rows = [];\n\n  filterData.map(candidate => {\n        rows.push(\n                createData(candidate._id, candidate['candidateName'], candidate['contactNo'], candidate['email'], candidate['annualSalary'], candidate['currentLocation'], candidate['currentEmployer'])\n        );\n        // console.log(rows)\n  })\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.code);\n      setSelected(newSelecteds);\n      return;\n    }\n    setSelected([]);\n  };\n\n  const handleClick = (event, code) => {\n    const selectedIndex = selected.indexOf(code);\n    let newSelected = [];\n\n    if (selectedIndex === -1) {\n      newSelected = newSelected.concat(selected, code);\n    } else if (selectedIndex === 0) {\n      newSelected = newSelected.concat(selected.slice(1));\n    } else if (selectedIndex === selected.length - 1) {\n      newSelected = newSelected.concat(selected.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelected = newSelected.concat(\n        selected.slice(0, selectedIndex),\n        selected.slice(selectedIndex + 1),\n      );\n    }\n\n    setSelected(newSelected);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n\n  const isSelected = (code) => selected.indexOf(code) !== -1;\n\n  const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <EnhancedTableToolbar numSelected={selected.length} jobData={jobData} setFilterData={setFilterData} rows={rows} />\n        <TableContainer>\n          <Table\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size=\"medium\"\n            aria-label=\"enhanced table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              order={order}\n              orderBy={orderBy} \n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {stableSort(rows, getComparator(order, orderBy))\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row.code);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event) => handleClick(event, row.code)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.code}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                        />\n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" style={{minWidth: 160}}>\n                      {toApply ? (\n                          row.candidateName\n                        ) : (\n                          <NavLink to={`${location}/${row.code}`}>\n                            {row.candidateName}\n                          </NavLink>\n                        )}\n                      </TableCell>\n                      <TableCell style={{minWidth: 130}}>\n                              <a href={\"tel:\"+row.contactNumber}>{row.contactNumber}</a>\n                        </TableCell>\n                      <TableCell>\n                              <a href={\"mailto:\"+row.email} target=\"_blank\">{row.email}</a>\n                        </TableCell>\n                      <TableCell style={{minWidth: 120}}>{row.annualSalary}</TableCell>\n                      <TableCell style={{minWidth: 110}}>{row.currentLocation}</TableCell>\n                      <TableCell style={{minWidth: 180}}>{row.currentEmployer}</TableCell>\n                      <TableCell>{row.designation}</TableCell>\n                    </TableRow>\n                  );\n                })}\n              {emptyRows > 0 && (\n                <TableRow style={{ height: 53 * emptyRows }}>\n                  <TableCell colSpan={6} />\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          rowsPerPageOptions={[5, 10, 25, 50]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  );\n}\n","import axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { useRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport {\n\tapplyJob,\n\tcandidatesEndpoint,\n\tcompaniesEndpoint,\n\tgetCandidates,\n\tgetJobs,\n} from '../../api'\nimport Table from '../../components/Table'\nimport {\n\tcandidateAtom,\n\tcandidateCheckedAtom,\n\tcurrentUserAtom,\n} from '../../recoil/atoms'\nimport {\n\tPageLayout,\n\tTableData,\n\tTableHead,\n\tTableRow,\n\tStyledCheckbox,\n\tContentContainer,\n\tControlButton,\n} from '../../styles'\n\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport Controls from '../../components/Controls'\nimport { NavLink, useHistory, useLocation } from 'react-router-dom'\n\nimport {\n\tformatDate,\n\trenderWithLoader,\n\ttitleGenerator,\n\ttrueKeysToArr,\n} from '../../utils/helperFunctions'\n\nimport { useRecoilValue } from 'recoil'\nimport { filterTrueCandidateChecked } from '../../recoil/selectors'\nimport SearchBar from '../../components/SearchBar'\nimport AddIcon from '../../assets/icons/add.svg'\nimport DeleteModal from '../../components/Modals/DeleteModal'\nimport { AddCircle, Delete } from '@material-ui/icons'\n\nimport { toast } from '../../components/Toast'\nimport { get } from 'lodash'\nimport { v4 as uuid } from 'uuid'\nimport { SMUIIconButton } from '../../styles/StyledMaterialUI'\nimport NewCandidateTable from './components/NewCandidateTable'\n\n\nfunction CandidatePage() {\n\t// React Hooks\n\n\tconst [candidateData, setCandidateData] = useRecoilState(candidateAtom)\n\tconst [checked, setChecked] = useRecoilState(candidateCheckedAtom)\n\tconst selected = useRecoilValue(filterTrueCandidateChecked)\n\tconst [filterData, setFilterData] = useState();\n\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\n\tconst [isModalOpen, setIsModalOpen] = useState(false)\n\tconst toggleModal = () => setIsModalOpen(!isModalOpen)\n\n\tconst history = useHistory()\n\tconst location = useLocation().pathname\n\n\tuseEffect(() => {\n\t\taxios.get(getCandidates, { withCredentials: true })\n\t\t\t.then(({ data }) => {setCandidateData(data); setFilterData(data);})\n\t\t\t.catch((e) => console.log(e))\n\t}, [checked, isModalOpen])\n\n\t// Variables\n\tconst candidateHeading = [\n\t\t'Select',\n\t\t'Candidate Code',\n\t\t'Name',\n\t\t'Email',\n\t\t'Mobile',\n\t\t'City',\n\t\t// `Experience`,\n\t\t`Industry`,\n\t\t`Functional Area`,\n\t\t`Entered On`,\n\t]\n\n\t// Helper Functions\n\tconst onCheckHandler = (id) => {\n\t\tconst newData = {\n\t\t\t...checked,\n\t\t\t[id]: !checked[id],\n\t\t}\n\t\tsetChecked(newData)\n\t}\n\n\tconst renderCandidateHeading = candidateHeading.map((heading) => (\n\t\t<TableHead key={uuid()}>{heading}</TableHead>\n\t))\n\n\tconst deleteHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.patch(candidatesEndpoint, selected, { withCredentials: true })\n\t\t\ttoggleModal()\n\t\t\tsetChecked({})\n\t\t\ttoast.success('Candidates Deleted')\n\t\t} catch (error) {\n\t\t\ttoggleModal()\n\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\t// Renderers\n\t// const renderCandidateData =\n\t// \tcandidateData &&\n\t// \tcandidateData.map((candidate) => {\n\t// \t\treturn (\n\t// \t\t\t<TableRow key={candidate._id}>\n\t// \t\t\t\t<TableData>\n\t// \t\t\t\t\t<StyledCheckbox\n\t// \t\t\t\t\t\ttype='checkbox'\n\t// \t\t\t\t\t\tchecked={checked[candidate._id]}\n\t// \t\t\t\t\t\tcolor='primary'\n\t// \t\t\t\t\t\tonChange={() => onCheckHandler(candidate._id)}\n\t// \t\t\t\t\t/>\n\t// \t\t\t\t</TableData>\n\t// \t\t\t\t<TableData>\n\t// \t\t\t\t\t<NavLink to={`${location}/${candidate.candidateCode}`}>\n\t// \t\t\t\t\t\t{candidate.candidateCode}\n\t// \t\t\t\t\t</NavLink>{' '}\n\t// \t\t\t\t</TableData>\n\t// \t\t\t\t<TableData>{candidate.basic.fullName}</TableData>\n\t// \t\t\t\t<TableData>{candidate.basic.primaryEmail}</TableData>\n\t// \t\t\t\t<TableData>{candidate.basic.mobile}</TableData>\n\t// \t\t\t\t<TableData>{candidate.address.state}</TableData>\n\t// \t\t\t\t{/* <TableData>45</TableData> */}\n\t// \t\t\t\t<TableData>{candidate.professional.industry}</TableData>\n\t// \t\t\t\t<TableData>{candidate.professional.functionalArea}</TableData>\n\t// \t\t\t\t<TableData>{formatDate(candidate.createdAt)}</TableData>\n\t// \t\t\t</TableRow>\n\t// \t\t)\n\t// \t})\n\n\tconst toPage = (link) => {\n\t\thistory.push(link)\n\t}\n\n\treturn (\n\t\t<ContentContainer>\n\t\t\t{renderWithLoader(\n\t\t\t\tfilterData,\n\t\t\t\t<NewCandidateTable filterData = {filterData} setFilterData={setFilterData} jobData={candidateData}/>\n\t\t\t)}\n\t\t</ContentContainer>\n\t\t// <>\n\t\t// \t<Controls title={titleGenerator(selected, 'Candidate Controls')}>\n\t\t// \t\t{selected.length > 0 ? (\n\t\t// \t\t\t<>\n\t\t// \t\t\t\t{get(currentUser, 'roleId.permissions.candidate.delete') && (\n\t\t// \t\t\t\t\t<SMUIIconButton\n\t\t// \t\t\t\t\t\tcolor='secondary'\n\t\t// \t\t\t\t\t\tonClick={toggleModal}\n\t\t// \t\t\t\t\t\tcolor='secondary'>\n\t\t// \t\t\t\t\t\t<Delete />\n\t\t// \t\t\t\t\t</SMUIIconButton>\n\t\t// \t\t\t\t)}\n\n\t\t// \t\t\t\t{get(currentUser, 'roleId.permissions.candidate.update') && (\n\t\t// \t\t\t\t\t<ControlButton\n\t\t// \t\t\t\t\t\tvariant='contained'\n\t\t// \t\t\t\t\t\tcolor='primary'\n\t\t// \t\t\t\t\t\tonClick={() => toPage('/job/apply')}>\n\t\t// \t\t\t\t\t\tAssign\n\t\t// \t\t\t\t\t</ControlButton>\n\t\t// \t\t\t\t)}\n\t\t// \t\t\t</>\n\t\t// \t\t) : (\n\t\t// \t\t\t<>\n\t\t// \t\t\t\t{get(currentUser, 'roleId.permissions.candidate.create') && (\n\t\t// \t\t\t\t\t<SMUIIconButton\n\t\t// \t\t\t\t\t\tcolor='primary'\n\t\t// \t\t\t\t\t\tonClick={() => toPage(`${location}/add`)}>\n\t\t// \t\t\t\t\t\t<AddCircle />\n\t\t// \t\t\t\t\t</SMUIIconButton>\n\t\t// \t\t\t\t)}\n\t\t// \t\t\t</>\n\t\t// \t\t)}\n\t\t// \t\t{/* <Button variant=\"contained\" color=\"primary\">Import</Button>\n\t\t// \t\t<Button variant=\"contained\" color=\"primary\">Export</Button> */}\n\t\t// \t</Controls>\n\t\t// \t<DeleteModal\n\t\t// \t\topen={isModalOpen}\n\t\t// \t\tonClose={toggleModal}\n\t\t// \t\tcount={selected.length}\n\t\t// \t\tdeleteHandler={deleteHandler}\n\t\t// \t/>\n\t\t// \t<ContentContainer>\n\t\t// \t\t{renderWithLoader(\n\t\t// \t\t\tcandidateData,\n\t\t// \t\t\t<Table headings={renderCandidateHeading}>{renderCandidateData}</Table>\n\t\t// \t\t)}\n\t\t// \t</ContentContainer>\n\t\t// </>\n\t)\n}\n\nexport default CandidatePage\n\nconst CandidatePageContainer = styled.div`\n\tbackground-color: #0000000d;\n\twidth: 100%;\n\tpadding: 10px;\n`\n","import React, { useEffect, useState } from 'react'\nimport {\n\tContentContainer,\n\tStyledCheckbox,\n\tTableHead,\n\tTableData,\n\tTableRow,\n} from '../../styles'\nimport Controls from '../../components/Controls'\nimport AddIcon from '../../assets/icons/add.svg'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { currentUserAtom, roleAtom, roleCheckedAtom } from '../../recoil/atoms'\nimport axios from 'axios'\nimport { rolesEndpoint } from '../../api'\nimport Table from '../../components/Table'\nimport { v4 as uuid } from 'uuid'\nimport {\n\tformatDate,\n\trenderWithLoader,\n\ttitleGenerator,\n} from '../../utils/helperFunctions'\nimport { selectedRoles } from '../../recoil/selectors'\nimport { IconButton } from '@material-ui/core'\nimport { AddCircle, Delete } from '@material-ui/icons'\nimport DeleteModal from '../../components/Modals/DeleteModal'\nimport { toast } from '../../components/Toast'\nimport { get } from 'lodash'\nimport { SMUIIconButton } from '../../styles/StyledMaterialUI'\n\nfunction RolePage() {\n\tconst history = useHistory()\n\tconst location = useLocation().pathname\n\tconst [roles, setRoles] = useRecoilState(roleAtom)\n\tconst [checked, setChecked] = useRecoilState(roleCheckedAtom)\n\tconst selected = useRecoilValue(selectedRoles)\n\tconst [isModalOpen, setIsModalOpen] = useState(false)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst toggleModal = () => setIsModalOpen(!isModalOpen)\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(rolesEndpoint, { withCredentials: true })\n\t\t\t.then(({ data }) => setRoles(data))\n\t\t\t.catch((e) => console.log(e))\n\t}, [isModalOpen])\n\n\tconst navHandler = (to) => {\n\t\thistory.push(`${location}/${to}`)\n\t}\n\n\tconst deleteHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.patch(rolesEndpoint, selected, { withCredentials: true })\n\t\t\ttoggleModal()\n\t\t\tsetChecked({})\n\t\t\ttoast.success('Roles Deleted')\n\t\t} catch (error) {\n\t\t\ttoggleModal()\n\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\tconst roleHeading = ['Select', 'Name', 'Vendor', 'Total Users', 'Created On']\n\n\tconst checkHandler = (e, _id) => {\n\t\tsetChecked({ ...checked, [_id]: e.target.checked })\n\t}\n\n\tconst renderHeading = roleHeading.map((heading) => (\n\t\t<TableHead key={uuid()}>{heading}</TableHead>\n\t))\n\n\tconst renderRoleData =\n\t\troles &&\n\t\troles.map(({ _id, name, vendor, users, createdAt }) => {\n\t\t\treturn (\n\t\t\t\t<TableRow key={_id}>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, _id)}\n\t\t\t\t\t\t\tchecked={checked[_id] || false}\n\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TableData>\n\n\t\t\t\t\t<TableData>{name}</TableData>\n\t\t\t\t\t<TableData>{vendor}</TableData>\n\t\t\t\t\t<TableData>{users.length}</TableData>\n\t\t\t\t\t<TableData>{formatDate(createdAt)}</TableData>\n\t\t\t\t</TableRow>\n\t\t\t)\n\t\t})\n\n\treturn (\n\t\t<>\n\t\t\t<Controls title={titleGenerator(selected, 'Roles')}>\n\t\t\t\t{selected.length > 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.role.delete') && (\n\t\t\t\t\t\t\t<SMUIIconButton color='secondary' onClick={toggleModal}>\n\t\t\t\t\t\t\t\t<Delete />\n\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.role.create') && (\n\t\t\t\t\t\t\t<SMUIIconButton color='primary' onClick={() => navHandler('add')}>\n\t\t\t\t\t\t\t\t<AddCircle />\n\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\n\t\t\t\t{/* <IconButton onClick={() => navHandler('add')} src={AddIcon} /> */}\n\t\t\t</Controls>\n\t\t\t<DeleteModal\n\t\t\t\topen={isModalOpen}\n\t\t\t\tonClose={toggleModal}\n\t\t\t\tcount={selected.length}\n\t\t\t\tdeleteHandler={deleteHandler}\n\t\t\t/>\n\t\t\t<ContentContainer>\n\t\t\t\t{renderWithLoader(\n\t\t\t\t\troles,\n\t\t\t\t\t<Table headings={renderHeading}>{renderRoleData}</Table>\n\t\t\t\t)}\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default RolePage\n","import React, { useEffect, useState } from 'react'\nimport {\n\tContentContainer,\n\tPageLayout,\n\tTableHead,\n\tTableRow,\n\tTableData,\n\tStyledCheckbox,\n} from '../../styles'\nimport Controls from '../../components/Controls'\n\nimport { useHistory, useLocation } from 'react-router-dom'\nimport AddIcon from '../../assets/icons/add.svg'\nimport axios from 'axios'\nimport { usersEndpoint } from '../../api'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { currentUserAtom, userAtom, userCheckedAtom } from '../../recoil/atoms'\nimport Table from '../../components/Table'\nimport {\n\tformatDate,\n\trenderWithLoader,\n\ttitleGenerator,\n} from '../../utils/helperFunctions'\n\nimport { v4 as uuid } from 'uuid'\nimport { selectedUsers } from '../../recoil/selectors'\nimport { IconButton } from '@material-ui/core'\nimport { AddCircle, Delete } from '@material-ui/icons'\nimport DeleteModal from '../../components/Modals/DeleteModal'\n\nimport { toast } from '../../components/Toast'\nimport { get } from 'lodash'\nimport { SMUIIconButton } from '../../styles/StyledMaterialUI'\n\nfunction UserPage() {\n\tconst history = useHistory()\n\tconst location = useLocation().pathname\n\tconst [users, setUsers] = useRecoilState(userAtom)\n\tconst [checked, setChecked] = useRecoilState(userCheckedAtom)\n\tconst selected = useRecoilValue(selectedUsers)\n\n\tconst [isModalOpen, setIsModalOpen] = useState(false)\n\tconst toggleModal = () => setIsModalOpen(!isModalOpen)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst navHandler = (to) => {\n\t\thistory.push(`${location}/${to}`)\n\t}\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(usersEndpoint, { withCredentials: true })\n\t\t\t.then(({ data }) => setUsers(data))\n\t\t\t.catch((e) => console.log(e))\n\t}, [isModalOpen])\n\n\tconst userHeading = [\n\t\t'Select',\n\t\t'Fullname',\n\t\t'Username',\n\t\t'Contact',\n\t\t'Email',\n\t\t'Assigned Role',\n\t\t'Created On',\n\t]\n\n\tconst renderUserHeading = userHeading.map((heading) => (\n\t\t<TableHead key={uuid()}>{heading}</TableHead>\n\t))\n\n\tconst checkHandler = (e, _id) => {\n\t\tsetChecked({ ...checked, [_id]: e.target.checked })\n\t}\n\n\tconst deleteHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.patch(usersEndpoint, selected, { withCredentials: true })\n\t\t\ttoggleModal()\n\t\t\tsetChecked({})\n\t\t\ttoast.success('User Deleted')\n\t\t} catch (error) {\n\t\t\ttoggleModal()\n\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\tconst showUsers =\n\t\tusers &&\n\t\tusers.filter((user) => {\n\t\t\tif (currentUser) {\n\t\t\t\treturn currentUser._id.toString() !== user._id.toString()\n\t\t\t}\n\t\t})\n\n\t\tconsole.log(showUsers);\n\tconst renderUserData =\n\t\tshowUsers &&\n\t\tshowUsers.map(\n\t\t\t({\n\t\t\t\t_id,\n\t\t\t\tfirstName,\n\t\t\t\tlastName,\n\t\t\t\tuserName,\n\t\t\t\tcontact,\n\t\t\t\temail,\n\t\t\t\troleId,\n\t\t\t\tcreatedAt,\n\t\t\t}) => {\n\t\t\t\treturn (\n\t\t\t\t\t<TableRow key={_id}>\n\t\t\t\t\t\t<TableData>\n\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, _id)}\n\t\t\t\t\t\t\t\tchecked={checked[_id] || false}\n\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</TableData>\n\n\t\t\t\t\t\t<TableData>{`${firstName} ${lastName}`}</TableData>\n\t\t\t\t\t\t<TableData>{userName}</TableData>\n\t\t\t\t\t\t<TableData>{contact}</TableData>\n\t\t\t\t\t\t<TableData>{email}</TableData>\n\t\t\t\t\t\t<TableData>{roleId.name}</TableData>\n\t\t\t\t\t\t<TableData>{formatDate(createdAt)}</TableData>\n\t\t\t\t\t</TableRow>\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\n\treturn (\n\t\t<>\n\t\t\t<Controls title={titleGenerator(selected, 'Users')}>\n\t\t\t\t{selected.length ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.user.delete') && (\n\t\t\t\t\t\t\t<SMUIIconButton color='secondary' onClick={toggleModal}>\n\t\t\t\t\t\t\t\t<Delete />\n\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.user.create') && (\n\t\t\t\t\t\t\t<SMUIIconButton color='primary' onClick={() => navHandler('add')}>\n\t\t\t\t\t\t\t\t<AddCircle />\n\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Controls>\n\t\t\t<DeleteModal\n\t\t\t\topen={isModalOpen}\n\t\t\t\tonClose={toggleModal}\n\t\t\t\tcount={selected.length}\n\t\t\t\tdeleteHandler={deleteHandler}\n\t\t\t/>\n\t\t\t<ContentContainer>\n\t\t\t\t{renderWithLoader(\n\t\t\t\t\tusers,\n\t\t\t\t\t<Table headings={renderUserHeading}>{renderUserData}</Table>\n\t\t\t\t)}\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default UserPage\n","import { IconButton, InputLabel, MenuItem } from '@material-ui/core'\nimport { AddCircle } from '@material-ui/icons'\nimport axios from 'axios'\nimport 'date-fns'\nimport { get } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { companiesEndpoint, jobEndpoint } from '../../../api'\nimport Controls from '../../../components/Controls'\nimport { companyAtom, currentUserAtom, jobAtom } from '../../../recoil/atoms'\nimport {\n\tCard,\n\tCardTitle,\n\tContentContainer,\n\tControlButton,\n\tItemListContainer,\n\tMultipleItemInputContainer,\n\tRemoveSpaces,\n\tStyledCheckbox,\n} from '../../../styles'\nimport {\n\tSMUIFormControl,\n\tSMUISelect,\n\tSMUITextField,\n} from '../../../styles/StyledMaterialUI'\nimport {\n\taddValToArr,\n\tcodeGenerator,\n\tpickerDateFormat,\n\trenderArr,\n} from '../../../utils/helperFunctions'\nimport { toast } from '../../../components/Toast'\n\nimport {states} from '../../../statesList'\n\nfunction JobInput({ edit, match }) {\n\tconst history = useHistory()\n\n\tconst jobId = get(match, 'params.id', '')\n\n\tconst [companies, setCompanies] = useRecoilState(companyAtom)\n\n\tconst jobs = useRecoilValue(jobAtom)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst [job, setJob] = useState(\n\t\tjobs && jobs.find((job) => job.jobDetails.jobCode === jobId)\n\t)\n\n\tuseEffect(() => {\n\t\tif (!job) {\n\t\t\taxios\n\t\t\t\t.get(`${jobEndpoint}/${jobId}`)\n\t\t\t\t.then(({ data }) => setJob(data))\n\t\t\t\t.catch((e) => console.log(e))\n\t\t}\n\t}, [])\n\n\tconst [jobTitle, setJobTitle] = useState(\n\t\tget(job, 'jobOpeningInfo.jobTitle', '')\n\t)\n\tconst [jobType, setJobType] = useState(get(job, 'jobOpeningInfo.jobType', ''))\n\tconst [industry, setIndustry] = useState(\n\t\tget(job, 'jobOpeningInfo.industry', '')\n\t)\n\tconst [noOfOpening, setNoOfOpening] = useState(\n\t\tget(job, 'jobOpeningInfo.noOfOpenings')\n\t)\n\n\tconst [salaryFrom, setSalaryFrom] = useState(\n\t\tget(job, 'jobOpeningInfo.salary.from')\n\t)\n\n\tconst [salaryTo, setSalaryTo] = useState(\n\t\tget(job, 'jobOpeningInfo.salary.to')\n\t)\n\n\t//companydetails\n\tconst [companyId, setCompanyId] = useState(\n\t\tget(job, 'companyDetails.companyId._id', '')\n\t)\n\n\tconst [companyName, setCompanyName] = useState(\n\t\tget(job, 'companyDetails.companyName', '')\n\t)\n\n\tconst [isCompanyDetailsVisible, setIsCompanyDetailsVisible] = useState(\n\t\tget(job, 'companyDetails.isCompanyDetailsVisible', true)\n\t)\n\t//jobaddress\n\tconst [jobLocation, setJobLocation] = useState(\n\t\tget(job, 'jobAddress.jobLocation')\n\t)\n\tconst [city, setCity] = useState(get(job, 'jobAddress.city', ''))\n\tconst [zone, setZone] = useState(get(job, 'jobAddress.zone'))\n\tconst [state, setState] = useState(get(job, 'jobAddress.state', ''))\n\tconst [pincode, setPincode] = useState(get(job, 'jobAddress.pincode'))\n\tconst [country, setCountry] = useState(get(job, 'jobAddress.country', ''))\n\n\t//jobdetails\n\tconst [jobDescription, setJobDescription] = useState(\n\t\tget(job, 'jobDetails.jobDescription', '')\n\t)\n\n\tconst [eligibility, setEligibility] = useState(\n\t\tget(job, 'jobDetails.eligibility', [])\n\t)\n\tconst [eligibilityVal, setEligibilityVal] = useState()\n\n\tconst [responsibilities, setResponsibilities] = useState(\n\t\tget(job, 'jobDetails.responsibilities', [])\n\t)\n\tconst [responsibilitiesVal, setResponsibilitiesVal] = useState()\n\n\tconst [benefits, setBenefits] = useState(get(job, 'jobDetails.benefits', []))\n\tconst [benefitsVal, setBenefitsVal] = useState()\n\n\tconst [additionalInformation, setAdditionalInformation] = useState(\n\t\tget(job, 'jobDetails.additionalInformation', '')\n\t)\n\tconst [targetDate, setTargetDate] = useState(\n\t\tpickerDateFormat(get(job, 'jobDetails.targetDate'))\n\t)\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(companiesEndpoint, { withCredentials: true })\n\t\t\t.then(({ data }) => setCompanies(data))\n\t\t\t.catch((e) => console.log(e))\n\t}, [])\n\n\t//functions\n\n\t//handlers\n\tconst saveHandler = async (isEdit) => {\n\t\tconst newJobData = {\n\t\t\tjobOpeningInfo: {\n\t\t\t\tjobTitle,\n\t\t\t\tjobType,\n\t\t\t\tindustry,\n\t\t\t\tsalary: {\n\t\t\t\t\tfrom: salaryFrom,\n\t\t\t\t\tto: salaryTo\n\t\t\t\t},\n\t\t\t\tassignedOn: new Date(),\n\t\t\t\tnoOfOpenings: Number(noOfOpening),\n\t\t\t},\n\t\t\tcompanyDetails: {\n\t\t\t\tcompanyId,\n\t\t\t\tcompanyName,\n\t\t\t\tisCompanyDetailsVisible,\n\t\t\t},\n\t\t\tjobAddress: {\n\t\t\t\tjobLocation,\n\t\t\t\tcity,\n\t\t\t\tzone,\n\t\t\t\tstate,\n\t\t\t\tpincode,\n\t\t\t\tcountry,\n\t\t\t},\n\t\t\tjobDetails: {\n\t\t\t\tjobCode: codeGenerator(jobTitle, industry, companyId),\n\t\t\t\tjobDescription,\n\t\t\t\tadditionalInformation,\n\t\t\t\ttargetDate,\n\t\t\t\teligibility,\n\t\t\t\tresponsibilities,\n\t\t\t\tbenefits,\n\t\t\t},\n\t\t\tsource: currentUser._id,\n\t\t}\n\t\ttry {\n\t\t\tif (isEdit) {\n\t\t\t\tawait axios.patch(`${jobEndpoint}/${jobId}`, newJobData, {\n\t\t\t\t\twithCredentials: true,\n\t\t\t\t})\n\n\t\t\t\ttoast.success('Job Edited')\n\t\t\t\thistory.goBack()\n\t\t\t} else {\n\t\t\t\tawait axios.post(jobEndpoint, newJobData, { withCredentials: true })\n\t\t\t\ttoast.success('New Job Added')\n\t\t\t\thistory.goBack()\n\t\t\t}\n\t\t} catch (err) {\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\tconst renderCompaniesOption =\n\t\tcompanies &&\n\t\tcompanies.map(({ _id, companyName }) => {\n\t\t\treturn (\n\t\t\t\t<MenuItem key={_id} value={_id}>\n\t\t\t\t\t{companyName}\n\t\t\t\t</MenuItem>\n\t\t\t)\n\t\t})\n\n\tconst addCompanyHandler = () => {\n\t\thistory.push('/company/add')\n\t}\n\n\treturn (\n\t\t<JobInputContainer>\n\t\t\t{/* Control */}\n\t\t\t<Controls title='Job Control'>\n\t\t\t\t<ControlButton color='secondary'>Reset</ControlButton>\n\t\t\t\t{(get(currentUser, 'roleId.permissions.job.create') ||\n\t\t\t\t\tget(currentUser, 'roleId.permissions.job.update')) && (\n\t\t\t\t\t<ControlButton\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\tonClick={() => saveHandler(edit)}>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</ControlButton>\n\t\t\t\t)}\n\t\t\t</Controls>\n\t\t\t<ContentContainer>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Job Opening Info</CardTitle>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={jobTitle}\n\t\t\t\t\t\tonChange={(e) => setJobTitle(e.target.value)}\n\t\t\t\t\t\tlabel='Job Title'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='industry'>Industry</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tvalue={industry}\n\t\t\t\t\t\t\tlabel='Industry'\n\t\t\t\t\t\t\tonChange={(e) => setIndustry(e.target.value)}>\n\t\t\t\t\t\t\t{/* {\n\t\t\t\t\t\t\t\tindustries.map((data, i) => (\n\t\t\t\t\t\t\t\t\t<MenuItem key={i} value={data.name}>{data.name}</MenuItem>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t} */}\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\t\t\t\t\t\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={noOfOpening}\n\t\t\t\t\t\tonChange={(e) => setNoOfOpening(e.target.value)}\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tlabel='No. of Opening'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='jobtype'>Job type</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tvalue={jobType}\n\t\t\t\t\t\t\tlabel='Job type'\n\t\t\t\t\t\t\tonChange={(e) => setJobType(e.target.value)}>\n\t\t\t\t\t\t\t<MenuItem value='Full-time'>Full-Time</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='Part-time'>Part-time</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='Freelancing'>Freelancing</MenuItem>\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={salaryFrom}\n\t\t\t\t\t\tonChange={(e) => setSalaryFrom(e.target.value)}\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tlabel='Salary from'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={salaryTo}\n\t\t\t\t\t\tonChange={(e) => setSalaryTo(e.target.value)}\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tlabel='Salary To'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='company'>Company</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tlabelId='company'\n\t\t\t\t\t\t\tvalue={companyId}\n\t\t\t\t\t\t\tlabel='Company'\n\t\t\t\t\t\t\tonChange={(e) => setCompanyId(e.target.value)}>\n\t\t\t\t\t\t\t{renderCompaniesOption}\n\n\t\t\t\t\t\t\t<MenuItem value='add New' onClick={addCompanyHandler}>\n\t\t\t\t\t\t\t\t+ Add New Company\n\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\n\t\t\t\t\t<CheckBoxContainer>\n\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\tchecked={isCompanyDetailsVisible}\n\t\t\t\t\t\t\tonChange={(e) => setIsCompanyDetailsVisible(e.target.checked)}\n\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<CheckBoxLabel>Company Details Visible</CheckBoxLabel>\n\t\t\t\t\t</CheckBoxContainer>\n\t\t\t\t</Card>\n\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Job Address</CardTitle>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={city}\n\t\t\t\t\t\tonChange={(e) => setCity(e.target.value)}\n\t\t\t\t\t\tlabel='City'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='state'>State</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tvalue={state}\n\t\t\t\t\t\t\tlabel='State'\n\t\t\t\t\t\t\tonChange={(e) => setState(e.target.value)}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstates.map(data => (\n\t\t\t\t\t\t\t\t\t<MenuItem key={data.key} value={data.name}>{data.name}</MenuItem>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={pincode}\n\t\t\t\t\t\tonChange={(e) => setPincode(e.target.value)}\n\t\t\t\t\t\tlabel='Pincode'\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\tonChange={(e) => setCountry(e.target.value)}\n\t\t\t\t\t\tlabel='Country'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='jobLocation'>Job Location</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tvalue={jobLocation}\n\t\t\t\t\t\t\tonChange={(e) => setJobLocation(e.target.value)}\n\t\t\t\t\t\t\tlabel='Job Location'>\n\t\t\t\t\t\t\t<MenuItem value='On Location'>On Location</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='Remote'>Remote</MenuItem>\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='zone'>Zone</InputLabel>\n\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tvalue={zone}\n\t\t\t\t\t\t\tonChange={(e) => setZone(e.target.value)}\n\t\t\t\t\t\t\tlabel='Zone'>\n\t\t\t\t\t\t\t<MenuItem value='North'>North</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='East'>East</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='West'>West</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='South'>South</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='North-East'>North-East</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='North-West'>North-West</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='South-East'>South-East</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='South-West'>South-West</MenuItem>\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\t\t\t\t</Card>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Job Details</CardTitle>\n\n\t\t\t\t\t{eligibility.length > 0 && (\n\t\t\t\t\t\t<ItemListContainer>\n\t\t\t\t\t\t\t{renderArr(eligibility, setEligibility)}\n\t\t\t\t\t\t</ItemListContainer>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<MultipleItemInputContainer\n\t\t\t\t\t\tonSubmit={(e) =>\n\t\t\t\t\t\t\taddValToArr(e, eligibilityVal, eligibility, setEligibility)\n\t\t\t\t\t\t}>\n\t\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tvalue={eligibilityVal}\n\t\t\t\t\t\t\tonChange={(e) => setEligibilityVal(e.target.value)}\n\t\t\t\t\t\t\tlabel='Eligibility'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<IconButton type='submit' variant='contained' color='primary'>\n\t\t\t\t\t\t\t<AddCircle />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</MultipleItemInputContainer>\n\n\t\t\t\t\t{responsibilities.length > 0 && (\n\t\t\t\t\t\t<ItemListContainer>\n\t\t\t\t\t\t\t{renderArr(responsibilities, setResponsibilities)}\n\t\t\t\t\t\t</ItemListContainer>\n\t\t\t\t\t)}\n\t\t\t\t\t<MultipleItemInputContainer\n\t\t\t\t\t\tonSubmit={(e) =>\n\t\t\t\t\t\t\taddValToArr(\n\t\t\t\t\t\t\t\te,\n\t\t\t\t\t\t\t\tresponsibilitiesVal,\n\t\t\t\t\t\t\t\tresponsibilities,\n\t\t\t\t\t\t\t\tsetResponsibilities\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}>\n\t\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tlabel='Responsibilities'\n\t\t\t\t\t\t\tvalue={responsibilitiesVal}\n\t\t\t\t\t\t\tonChange={(e) => setResponsibilitiesVal(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<IconButton type='submit' variant='contained' color='primary'>\n\t\t\t\t\t\t\t<AddCircle />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</MultipleItemInputContainer>\n\n\t\t\t\t\t{benefits.length > 0 && (\n\t\t\t\t\t\t<ItemListContainer>\n\t\t\t\t\t\t\t{renderArr(benefits, setBenefits)}\n\t\t\t\t\t\t</ItemListContainer>\n\t\t\t\t\t)}\n\t\t\t\t\t<MultipleItemInputContainer\n\t\t\t\t\t\tonSubmit={(e) =>\n\t\t\t\t\t\t\taddValToArr(e, benefitsVal, benefits, setBenefits)\n\t\t\t\t\t\t}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tlabel='Benefits'\n\t\t\t\t\t\t\tvalue={benefitsVal}\n\t\t\t\t\t\t\tonChange={(e) => setBenefitsVal(e.target.value)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<IconButton type='submit' variant='contained' color='primary'>\n\t\t\t\t\t\t\t<AddCircle />\n\t\t\t\t\t\t</IconButton>\n\n\t\t\t\t\t</MultipleItemInputContainer>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tmultiline\n\t\t\t\t\t\trows={4}\n\t\t\t\t\t\trowsMax={4}\n\t\t\t\t\t\tvalue={jobDescription}\n\t\t\t\t\t\tonChange={(e) => setJobDescription(e.target.value)}\n\t\t\t\t\t\tlabel='Job Description'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tmultiline\n\t\t\t\t\t\trows={4}\n\t\t\t\t\t\trowsMax={4}\n\t\t\t\t\t\tvalue={additionalInformation}\n\t\t\t\t\t\tonChange={(e) => setAdditionalInformation(e.target.value)}\n\t\t\t\t\t\tlabel='Additional Information'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tdefaultValue={targetDate}\n\t\t\t\t\t\t\tlabel='Target Date'\n\t\t\t\t\t\t\tonChange={(e) => setTargetDate(e.target.value)}\n\t\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\t\tplaceholder='Target Date'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</SMUIFormControl>\n\t\t\t\t</Card>\n\t\t\t</ContentContainer>\n\n\t\t\t{/* inputs */}\n\t\t\t{toast}\n\t\t\t{/* {isSaved && <Redirect to='/job' />} */}\n\t\t</JobInputContainer>\n\t)\n}\n\nexport default JobInput\n\nconst JobInputContainer = styled.div``\n\nconst CheckBoxContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: center;\n`\nconst CheckBoxLabel = styled.p`\n\t${RemoveSpaces}\n\tpadding-left: 5px;\n\tfont-size: 0.8em;\n\tfont-weight: 400;\n`\n","import React, {useState} from 'react'\nimport axios from 'axios'\nimport { useRecoilValue } from 'recoil'\nimport { currentUserAtom } from '../../../recoil/atoms'\nimport {Modal, Button, IconButton, Tooltip, Grid, FormControl, InputLabel, Select, MenuItem} from '@material-ui/core'\nimport {\n\tCard,\n\tCardTitle,\n\tCategoryTitle,\n        Content,\n\tContentContainer,\n\tControlButton,\n\tInputContainer,\n\tItemListContainer,\n\tMultipleItemInputContainer,\n        StyledTextField,\n} from '../../../styles'\nimport { toast } from '../../../components/Toast'\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Close } from '@material-ui/icons'\n\nconst BulkUpload = ({setBulkUpload, createBulk, candidate}) => {\n\n        const currentUser = useRecoilValue(currentUserAtom)\n        const [selectedFile, setSelectedFile] = useState(null)\n        const [source, setSource] = useState('')\n\n\n        const onFileChange = e => {\n                setSelectedFile(e.target.files[0])\n        }\n\n        const onFileUpload = () => {\n                if(!selectedFile) {\n                        toast.error('Please select a file')\n                }\n                else {\n                        const formData = new FormData()\n                        formData.append(\n                                \"myFile\",\n                                selectedFile,\n                                selectedFile.name\n                        )\n\n                        console.log(selectedFile)\n\n                        axios({\n                                method: 'post',\n                                url: candidate ? `${createBulk}/${source}` : `${createBulk}`,\n                                data: formData,\n                                withCredentials: true,\n                                headers: {'Content-Type': 'multipart/form-data'}\n                        })\n                        .then((data) => {\n                                toast.success(data.data)\n                                setSelectedFile(null)\n                                setBulkUpload(false)\n                        })\n                        .catch(err => {\n                                toast.error(`Error: ${err.message}`)\n                        })\n                }\n        }\n\n        const fileData = () => { \n\t\n                if (selectedFile) { \n                        \n                        return ( \n                        <div> \n                                <h2>File Details:</h2> \n                                <p>File Name: {selectedFile.name}</p> \n                                {/* <p>File Type: {selectedFile.type}</p>  */}\n                                <p> \n                                Last Modified:{\" \"} \n                                {selectedFile.lastModifiedDate.toDateString()} \n                                </p> \n                        </div> \n                        )\n                }\n                }\n\n        return (\n                <ContentContainer>\n                <Card style={{position: 'relative', paddingBottom: 40}}>\n                        <div style={{position: 'absolute', right: 10}}>\n                                <Tooltip title=\"Close\">\n                                        <IconButton onClick={() => setBulkUpload(false)}>\n                                                <Close />\n                                        </IconButton>\n                                </Tooltip>\n                        </div>\n                      <h2>Bulk Upload</h2>\n                      <Grid container spacing={2}>\n                              <Grid item xs={12} md={12}>\n                                <input type = 'file' onChange = {onFileChange} accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"/>\n                              </Grid>\n                               {\n                                       candidate ? (\n                                        <Grid item xs={12} md={12}>\n                                                <FormControl style={{minWidth: '25%'}} variant=\"outlined\">\n                                                        <InputLabel>Select source</InputLabel>\n                                                        <Select style={{textAlign: 'left'}}\n                                                        value={source}\n                                                        onChange={(e) => {setSource(e.target.value)}}\n                                                        >\n                                                                <MenuItem value=''>None</MenuItem>\n                                                                <MenuItem value='naukri'>Naukri</MenuItem>\n                                                                <MenuItem value='shine'>Shine</MenuItem>\n                                                        </Select>\n                                                </FormControl>\n                                        </Grid> \n                                       ) : null\n                               }\n                              <Grid item xs={12} md={12}>\n                                <Button onClick={onFileUpload} variant='contained' color='primary'>Upload!</Button>\n                              </Grid>\n                      </Grid>                     \n                      {fileData()}\n                </Card>\n                </ContentContainer>\n        )\n}\n\nexport default BulkUpload\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport * as yup from 'yup'\nimport {useFormik} from 'formik'\nimport 'date-fns'\nimport { get } from 'lodash'\nimport { useHistory } from 'react-router-dom'\nimport { useRecoilValue, useRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport { companiesEndpoint, jobEndpoint, createBulkJob } from '../../../api'\nimport Controls from '../../../components/Controls'\nimport { companyAtom, currentUserAtom, jobAtom, singlejobAtom } from '../../../recoil/atoms'\nimport { IconButton, InputLabel, MenuItem, Tooltip, Grid, TextField } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { AddCircle } from '@material-ui/icons'\nimport PublishIcon from '@material-ui/icons/Publish'\nimport {\n\tCard,\n\tCardTitle,\n\tContentContainer,\n\tControlButton,\n\tItemListContainer,\n\tMultipleItemInputContainer,\n\tRemoveSpaces,\n\tStyledCheckbox,\n} from '../../../styles'\nimport {\n\tSMUIFormControl,\n\tSMUISelect,\n        SMUITextField,\n        SMUIAutocomplete\n} from '../../../styles/StyledMaterialUI'\nimport {\n\taddValToArr,\n\tcodeGenerator,\n\tpickerDateFormat,\n\trenderArr,\n} from '../../../utils/helperFunctions'\nimport { toast } from '../../../components/Toast'\nimport BulkUpload from '../../Candidate/components/BulkUpload'\nimport {jobStatus, industries, companies, verticals, divisions} from '../../../jobsDataList'\nimport {states, districts, zones} from '../../../statesList'\n\nfunction NewJobInput(props) {\n\n        const {edit} = props\n        const history = useHistory()\n        const currentUser = useRecoilValue(currentUserAtom)\n        const [loading, setLoading] = useState(false)\n        const [bulkUpload, setBulkUpload] = useState(false)\n        const [singleJobData, setSingleJobData] = useRecoilState(singlejobAtom)\n\n        const formValidation = yup.object({\n                jobCode: yup.string('Enter job code').required('Job Code required'),\n                jobTitle: yup.string('Enter job title / requirement name').required('Job title required'),\n                state: yup.string('Select state'),\n                district: yup.string('Selete district'),\n                zone: yup.string('Select zone'),\n                status: yup.string('Enter job status'),\n                noOfOpening: yup.string('Enter total number of opening for this job'),\n                startDate: yup.string('Select starting date'),\n                closeDate: yup.string('Select closing date'),\n                industry: yup.string('Select Industry'),\n                company: yup.string('Select company'),\n                vertical: yup.string('Select vertical'),\n                division: yup.string('Select division'),\n                ctcMin: yup.string('Enter minimum CTC'),\n                ctcMax: yup.string('Enter maximum CTC'),\n                CVShared: yup.number('Enter number of CVs shared for this job'),\n                sharedToHRDate: yup.string('Enter Date when shared with HR'),\n                JDAttachmentLink: yup.string('Enter atachment link')\n        })\n\n        const {jobCode, jobTitle, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttachmentLink} = singleJobData || {}\n\n        const formik = useFormik({\n                initialValues:\n                edit ? \n                        {\n                                jobCode,\n                                jobTitle,\n                                state,\n                                district,\n                                zone,\n                                status,\n                                noOfOpening,\n                                startDate: pickerDateFormat(startDate),\n                                closeDate: pickerDateFormat(closeDate),\n                                industry,\n                                company,\n                                vertical,\n                                division,\n                                ctcMin,\n                                ctcMax,\n                                CVShared,\n                                sharedToHRDate,\n                                JDAttachmentLink\n                        } :\n                        {\n                                jobCode: '',\n                                jobTitle: '',\n                                state: '',\n                                district: '',\n                                zone: '',\n                                status: '',\n                                noOfOpening: '',\n                                startDate: '',\n                                closeDate: '',\n                                industry: '',\n                                company: '',\n                                vertical: '',\n                                division: '',\n                                ctcMin: '',\n                                ctcMax: '',\n                                CVShared: '',\n                                sharedToHRDate: '',\n                                JDAttachmentLink: ''\n                        },\n                validationSchema: formValidation,\n                onSubmit: (values, {resetForm}) => {\n                        // alert(`submit: ${JSON.stringify(values)}`)\n                        setLoading(true)\n                        !edit ? \n                        axios.post(jobEndpoint, values, {withCredentials: true})\n                        .then(data => {\n                                setLoading(false)\n                                toast.success('New job added')\n                                resetForm({values: ''})\n                        })\n                        .catch(err => {\n                                setLoading(false)\n                                toast.error(`Error: ${err.message}`)\n                        }) : \n                        axios.patch(`${jobEndpoint}/${jobCode}`, values, {withCredentials: true})\n                        .then(data => {\n                                setLoading(false);\n                                toast.success(`job updated`)\n                                resetForm({values: ''})\n                                setSingleJobData(data.data)\n                                setTimeout(() => {history.goBack()}, 1000)\n                        })\n                        .catch(err => {\n                                setLoading(false)\n                                toast.error(`Error: ${err.message}`)\n                        })\n                }\n        })\n\n        return (\n                <>\n                {\n                        bulkUpload ? <BulkUpload setBulkUpload={setBulkUpload} createBulk={createBulkJob} /> : null\n                }\n                        <form onSubmit={formik.handleSubmit}>\n                        <Controls title='Add New Job'>\n                                {\n                                        !edit ? (\n                                                <Tooltip title=\"Excel bulk upload\">\n                                                        <IconButton ><PublishIcon onClick={() => setBulkUpload(true)} /></IconButton>\n                                                </Tooltip>\n                                        ) : null\n                                }\n\t\t\t\t<ControlButton color='secondary' onClick={() => formik.resetForm()}>Reset</ControlButton>\n\t\t\t\t{(get(currentUser, 'roleId.candidate.job.create') ||\n\t\t\t\t\tget(currentUser, 'roleId.permissions.candidate.create')) && (\n\t\t\t\t\t<ControlButton\n                                                type='submit'\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</ControlButton>\n\t\t\t\t)}\n\t\t\t</Controls>\n                        <ContentContainer>\n                                <Card>\n                                        <CardTitle>Job Information</CardTitle>\n\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='Job Code'\n                                                        name='jobCode'\n                                                        id='jobCode'\n                                                        value={formik.values.jobCode}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.jobCode && Boolean(formik.errors.jobCode)}\n                                                                        helperText={formik.touched.jobCode && formik.errors.jobCode}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='Job Title'\n                                                        name='jobTitle'\n                                                        id='jobTitle'\n                                                        value={formik.values.jobTitle}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.jobTitle && Boolean(formik.errors.jobTitle)}\n                                                                        helperText={formik.touched.jobTitle && formik.errors.jobTitle}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='State'\n                                                        name='state'\n                                                        id='state'\n                                                        value={formik.values.state}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.state && Boolean(formik.errors.state)}\n                                                                        helperText={formik.touched.state && formik.errors.state}\n                                                />\n                                                <SMUITextField\n                                                                label=\"District\" \n                                                                variant=\"outlined\"\n                                                                name='district'\n                                                                id='district'\n                                                                value={formik.values.district}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.district && Boolean(formik.errors.district)}\n                                                                helperText={formik.touched.district && formik.errors.district}\n                                                        />\n                                                <SMUITextField \n                                                                label=\"Zone\" \n                                                                variant=\"outlined\"\n                                                                name='zone'\n                                                                id='zone'\n                                                                value={formik.values.zone}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.zone && Boolean(formik.errors.zone)}\n                                                                helperText={formik.touched.zone && formik.errors.zone} \n                                                        />\n                                                <SMUITextField \n                                                        label=\"Job status\" \n                                                        variant=\"outlined\"\n                                                        name='status'\n                                                        id='status'\n                                                        value={formik.values.status}\n                                                        onChange={formik.handleChange}\n                                                        error={formik.touched.status && Boolean(formik.errors.status)}\n                                                        helperText={formik.touched.status && formik.errors.status}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='No. of openings'\n                                                        name='noOfOpening'\n                                                        id='noOfOpening'\n                                                        type=\"number\"\n                                                        value={formik.values.noOfOpening}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.noOfOpening && Boolean(formik.errors.noOfOpening)}\n                                                                        helperText={formik.touched.noOfOpening && formik.errors.noOfOpening}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='Start date'\n                                                        name='startDate'\n                                                        id='startDate'\n                                                        type=\"date\"\n                                                        defaultValue={formik.values.startDate}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.startDate && Boolean(formik.errors.startDate)}\n                                                                        helperText={formik.touched.startDate && formik.errors.startDate}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='Close date'\n                                                        name='closeDate'\n                                                        id='closeDate'\n                                                        type=\"date\"\n                                                        defaultValue={formik.values.closeDate}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.closeDate && Boolean(formik.errors.closeDate)}\n                                                                        helperText={formik.touched.closeDate && formik.errors.closeDate}\n                                                />\n                                                <SMUITextField \n                                                                label=\"Industry\" \n                                                                variant=\"outlined\"\n                                                                name='industry'\n                                                                id='industry'\n                                                                value={formik.values.industry}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.industry && Boolean(formik.errors.industry)}\n                                                                helperText={formik.touched.industry && formik.errors.industry}\n                                                        />\n                                                <SMUITextField\n                                                                label=\"Company\" \n                                                                variant=\"outlined\"\n                                                                name='company'\n                                                                id='company'\n                                                                value={formik.values.company}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.company && Boolean(formik.errors.company)}\n                                                                helperText={formik.touched.company && formik.errors.company}\n                                                        />\n                                                <SMUITextField\n                                                                label=\"Vertical\" \n                                                                variant=\"outlined\"\n                                                                name='vertical'\n                                                                id='vertical'\n                                                                value={formik.values.vertical}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.verticals && Boolean(formik.errors.vertical)}\n                                                                helperText={formik.touched.verticals && formik.errors.vertical}\n                                                        />\n                                                <SMUITextField\n                                                        label=\"Division\" \n                                                        variant=\"outlined\"\n                                                        name='division'\n                                                        id='division'\n                                                        value={formik.values.division}\n                                                        onChange={formik.handleChange}\n                                                        error={formik.touched.vertical && Boolean(formik.errors.division)}\n                                                        helperText={formik.touched.vertical && formik.errors.division}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='CTC Min'\n                                                        name='ctcMin'\n                                                        id='ctcMin'\n                                                        value={formik.values.ctcMin}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.ctcMin && Boolean(formik.errors.ctcMin)}\n                                                                        helperText={formik.touched.ctcMin && formik.errors.ctcMin}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='CTC Max'\n                                                        name='ctcMax'\n                                                        id='ctcMax'\n                                                        value={formik.values.ctcMax}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.ctcMax && Boolean(formik.errors.ctcMax)}\n                                                                        helperText={formik.touched.ctcMax && formik.errors.ctcMax}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='No. of CVs shared'\n                                                        name='CVShared'\n                                                        id='CVShared'\n                                                        type='number'\n                                                        value={formik.values.CVShared}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.CVShared && Boolean(formik.errors.CVShared)}\n                                                                        helperText={formik.touched.CVShared && formik.errors.CVShared}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='Shared with HR'\n                                                        name='sharedToHRDate'\n                                                        id='sharedToHRDate'\n                                                        value={formik.values.sharedToHRDate}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.sharedToHRDate && Boolean(formik.errors.sharedToHRDate)}\n                                                                        helperText={formik.touched.sharedToHRDate && formik.errors.sharedToHRDate}\n                                                />\n                                                <SMUITextField\n                                                        style={{width: '100%'}}\n                                                        variant='outlined'\n                                                        label='JD attactment link'\n                                                        name='JDAttachmentLink'\n                                                        id='JDAttachmentLink    '\n                                                        value={formik.values.JDAttachmentLink}\n                                                                        onChange={formik.handleChange}\n                                                                        error={formik.touched.JDAttachmentLink && Boolean(formik.errors.JDAttachmentLink)}\n                                                                        helperText={formik.touched.JDAttachmentLink && formik.errors.JDAttachmentLink}\n                                                />\n                                </Card>\n                        </ContentContainer>\n                        </form>\n                </>\n        )\n}\n\nexport default NewJobInput\n","import React from 'react'\nimport JobInput from './components/JobInput'\nimport styled from 'styled-components'\nimport { PageLayout } from '../../styles'\nimport NewJobInput from './components/NewJobInput'\n\nfunction AddJob() {\n\treturn (\n\t\t<>\n\t\t\t<NewJobInput />\n\t\t\t{/* <JobInput /> */}\n\t\t</>\n\t)\n}\n\nexport default AddJob\n\n\n","import React from 'react'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport { useRecoilState } from 'recoil'\nimport { Card } from '../styles'\nimport styled from 'styled-components'\nimport { v4 as uuid } from 'uuid'\n\n\nexport default function PageTab({ atom, labels }) {\n\tconst [value, setValue] = useRecoilState(atom)\n\n\tconst handleChange = (_event, newValue) => {\n\t\tsetValue(newValue)\n\t}\n\n\tconst renderLabels = labels.map((item) => <Tab key={uuid()} label={item} />)\n\treturn (\n\t\t<TabBG>\n\t\t\t<Tabs\n\t\t\t\tvalue={value}\n\t\t\t\tonChange={handleChange}\n\t\t\t\tindicatorColor='primary'\n\t\t\t\ttextColor='primary'\n\t\t\t\t// centered\n\t\t\t>\n\t\t\t\t{renderLabels}\n\t\t\t</Tabs>\n\t\t</TabBG>\n\t)\n}\n\nconst TabBG = styled(Card)`\n\tpadding: 0px;\n\tmargin: 0px;\n\twidth: fit-content;\n`\n","export const stages = [\n\t'Shortlisted',\n\t'Assessment',\n\t'Hiring manager review',\n\t'Interview',\n\t// 'Interview 2',\n\t// 'Interview 3',\n\t'Salary Fitment',\n\t'Offer',\n\t'Documentation',\n\t'Joining',\n]\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n\tCard,\n\tCategory,\n\tCategoryGrid,\n\tCategoryMainTitle,\n\tCategoryTitle,\n\tContent,\n\tDataContainer,\n\tDataContent,\n\tDataTitle,\n\tthemeBorder,\n\tTitle,\n} from '../../../styles'\nimport JobDetails from '../JobDetails'\nimport { v4 as uuid } from 'uuid'\nimport { formatDate } from '../../../utils/helperFunctions'\n\nfunction JobInfo({ job }) {\n\tconst { companyDetails, jobAddress, jobDetails, jobOpeningInfo } = job || {}\n\tconst { companyName, companyAddress } = companyDetails || {}\n\tconst { city, country, jobLocation, pincode, state, zone } = jobAddress || {}\n\tconst {\n\t\teligibility,\n\t\tresponsibilities,\n\t\tbenefits,\n\t\tjobCode,\n\t\tadditionalInformation,\n\t\tjobDescription,\n\t\ttargetDate,\n\t} = jobDetails || {}\n\n\tconst { assignedOn, industry, jobTitle, jobType, noOfOpenings, salary } =\n\t\tjobOpeningInfo || {}\n\n\tconst renderList = (arr) =>\n\t\tarr.map((item) => {\n\t\t\treturn (\n\t\t\t\t<DataContainer key={uuid()}>\n\t\t\t\t\t<Content>{item}</Content>\n\t\t\t\t</DataContainer>\n\t\t\t)\n\t\t})\n\n\treturn (\n\t\t<Card>\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Job Opening Info</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Title</Title>\n\t\t\t\t\t\t<Content>{jobTitle}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Type</Title>\n\t\t\t\t\t\t<Content>{jobType}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Industry</Title>\n\t\t\t\t\t\t<Content>{industry}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Openings</Title>\n\t\t\t\t\t\t<Content>{noOfOpenings}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Salary P.A</Title>\n\t\t\t\t\t\t<Content>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tsalary ? <>{salary.from} - {salary.to}</> : <>Not specified</>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Job Address</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Location</Title>\n\t\t\t\t\t\t<Content>{jobLocation}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>City</Title>\n\t\t\t\t\t\t<Content>{city}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Zone</Title>\n\t\t\t\t\t\t<Content>{zone}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>State</Title>\n\t\t\t\t\t\t<Content>{state}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Pincode</Title>\n\t\t\t\t\t\t<Content>{pincode}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Country</Title>\n\t\t\t\t\t\t<Content>{country}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Job Details</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Code</Title>\n\t\t\t\t\t\t<Content>{jobCode}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Description</Title>\n\t\t\t\t\t\t<Content>{jobDescription}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Additional Information</Title>\n\t\t\t\t\t\t<Content>{additionalInformation}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Target Date</Title>\n\t\t\t\t\t\t<Content>{formatDate(targetDate)}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Eligibility</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>{renderList(eligibility)}</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Responsibility</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>{renderList(responsibilities)}</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Benifits</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>{renderList(benefits)}</CategoryGrid>\n\t\t\t</Category>\n\t\t</Card>\n\t)\n}\n\nexport default JobInfo\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, Category, CategoryGrid, CategoryMainTitle, Content, DataContainer, RemoveSpaces, Title } from '../../../styles'\nimport { v4 as uuid } from 'uuid'\nimport { formatDate } from '../../../utils/helperFunctions'\n\nconst NewJobInfo = ({data}) => {\n\tconst {jobCode, jobTitle, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttachmentLink} = data || {}\n\t\n        return (\n                <Card>\n                        <CategoryMainTitle>Job Info</CategoryMainTitle>\n                        <CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Code</Title>\n\t\t\t\t\t\t<Content>{jobCode}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Title</Title>\n\t\t\t\t\t\t<Content>{jobTitle}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>State</Title>\n\t\t\t\t\t\t<Content>{state}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>District</Title>\n\t\t\t\t\t\t<Content>{district}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Zone</Title>\n\t\t\t\t\t\t<Content>{zone}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Status</Title>\n\t\t\t\t\t\t<Content>{status}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>No. of Opening</Title>\n\t\t\t\t\t\t<Content>{noOfOpening}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Start Date</Title>\n\t\t\t\t\t\t<Content>{formatDate(startDate)}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Close Date</Title>\n\t\t\t\t\t\t<Content>{formatDate(closeDate)}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Industry</Title>\n\t\t\t\t\t\t<Content>{industry}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Company</Title>\n\t\t\t\t\t\t<Content>{company}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Vertical</Title>\n\t\t\t\t\t\t<Content>{vertical}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Division</Title>\n\t\t\t\t\t\t<Content>{division}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>CTC Min</Title>\n\t\t\t\t\t\t<Content>{ctcMin}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>CTC Max</Title>\n\t\t\t\t\t\t<Content>{ctcMax}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>No. of CVs Shared</Title>\n\t\t\t\t\t\t<Content>{CVShared}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Shared With HR Date</Title>\n\t\t\t\t\t\t<Content>{sharedToHRDate}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>JD Attactment</Title>\n\t\t\t\t\t\t<Content><a href={JDAttachmentLink} target='_blank'>Link</a></Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n                </Card>\n        )\n}\n\nexport default NewJobInfo;","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport { candidateEndpoint, jobEndpoint, statusEndpoint } from '../../../api'\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, IconButton, Tooltip, Select, MenuItem, FormControl, InputLabel} from '@material-ui/core'\nimport {formatDate, renderWithLoader, titleGenerator} from '../../../utils/helperFunctions'\nimport { toast } from '../../../components/Toast'\nimport EditIcon from '@material-ui/icons/Edit'\nimport CloseIcon from '@material-ui/icons/Close'\nimport DoneIcon from '@material-ui/icons/Done'\nimport LoopIcon from '@material-ui/icons/Loop'\nimport TableSkeletonLoader from '../../../components/TableSkeletonLoader'\n\nfunction AppliedCandidatesTable({match}) {\n        const id = match.params.id\n        console.log(id)\n        const [isEdit, setIsEdit] = useState({\n                status: false,\n                rowKey: null,\n                loading: false\n        })\n        const [newCandidateStatusValue, setNewCandidateStatusValue] = useState()\n        const [data, setData] = useState()\n\n        const editHandler = (row, i) => {\n                setIsEdit({\n                        status: true,\n                        rowKey: i,\n                        loading: false\n                })\n        }\n\n        const editChange = (e) => {\n                setNewCandidateStatusValue(e.target.value)\n        }\n\n        const editSave = (row, i) => {\n                setIsEdit({\n                        status: true,\n                        rowKey: i,\n                        loading: true\n                })\n                axios.patch(`${statusEndpoint}/jobcandidate/${id}`, {newCandidateStatusValue, row, data}, { withCredentials: true })\n                .then(data => {\n                        toast.success(data.data)\n                        setIsEdit(false)\n                        axios.get(`${jobEndpoint}/${id}`, {withCredentials: true})\n                        .then(data => {\n                                setData(data.data)\n                                console.log(data)\n                                })\n                        .catch(err => {console.log(err)})\n                })\n                .catch(err => {\n                        toast.error(`Error: ${err.message}`)\n                })\n\n        }\n\n        useEffect(() => {\n                axios.get(`${jobEndpoint}/${id}`, {withCredentials: true})\n                .then((data) => {\n                        setData(data.data)\n                        console.log(data)\n                })\n                .catch(err => console.log(err))\n        }, [])\n\n        const shortlistedCandidates = data ? data.candidates.shortlisted : {}\n        const assessmentCandidates = data ? data.candidates.assessment : {}\n        const hiringManagerReviewCandidates = data ? data.candidates.hiringManagerReview : {}\n        const interviewCandidates = data ? data.candidates.interview : {}\n        const salaryFitmentCandidates = data ? data.candidates.salaryFitment : {}\n        const offerCandidates = data ? data.candidates.offer : {}\n        const documentationCandidates = data ? data.candidates.documentation : {}\n        const joiningCandidates = data ? data.candidates.joining : {}\n        const candidates = data ? shortlistedCandidates.concat(assessmentCandidates, hiringManagerReviewCandidates, interviewCandidates, salaryFitmentCandidates, offerCandidates, documentationCandidates, joiningCandidates) : null\n\n        const jobId = data ? data._id : ''\n        const applicants = data ? candidates.length : null\n        var candidateStatus = ''\n\n        const rows = []\n        const heads = ['Candidate Name', 'Status',  'Contact Number', 'Email', 'CTC', 'Location', 'Current Company', 'Edit Status']\n\n        const createData = (id, name, candidateStatus, contactNo, email, ctc, location, currentCompany) => {\n                return {id, name, candidateStatus, contactNo, email, ctc, location, currentCompany}\n        }\n\n        const cStatus = (candidate) => {\n\n                candidateStatus = candidate.jobs.shortlisted.includes(jobId) ? \"Shortlisted\" :\n                                candidate.jobs.assessment.includes(jobId) ? \"Assessment\" :\n                                candidate.jobs.hiringManagerReview.includes(jobId) ? \"Hiring Manager Review\" :\n                                candidate.jobs.interview.includes(jobId) ? \"Interview\" :\n                                candidate.jobs.salaryFitment.includes(jobId) ? \"Salary Fitment\" :\n                                candidate.jobs.offer.includes(jobId) ? \"Offer\" :\n                                candidate.jobs.documentation.includes(jobId) ? \"Documentation\" :\n                                candidate.jobs.joining.includes(jobId) ? \"Joining\" : \"Not Assigned\"\n\n                return candidateStatus\n        }\n\n        if(data) {\n                candidates.map((candidate, i) => {\n                        const {_id, candidateName, contactNo, email, annualSalary, currentLocation, currentEmployer} = candidate\n                        cStatus(candidate)\n                        console.log(candidateStatus)\n                        rows.push(\n                                createData(_id, candidateName, candidateStatus, contactNo, email, annualSalary, currentLocation, currentEmployer)\n                        )\n                })\n        }\n\n        return (\n                <>\n                {\n                        data ? \n                        <TableContainer component={Paper} elevation={1} square>\n                                <h4>Total Applicants: {applicants}</h4>\n                                <Table aria-label=\"Applied Candidates Table\">\n                                        <TableHead>\n                                                <TableRow>\n                                                        {\n                                                                heads.map((head, i) => (\n                                                                        <TableCell key={i} style={tableHeadStyle}>{head}</TableCell>\n                                                                ))\n                                                        }\n                                                </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                                {\n                                                        rows.map((row, i) => {\n                                                                const {id, name, candidateStatus, contactNo, email, ctc, location, currentCompany} = row\n                                                                return (\n                                                                        <TableRow key={i}>\n                                                                                <TableCell component=\"th\" scope=\"row\" style={{minWidth: 130}}>\n                                                                                        <Link to={`/candidate/${id}`}>\n                                                                                                {name}\n                                                                                        </Link>\n                                                                                </TableCell>\n                                                                                {\n                                                                                        isEdit.status && isEdit.rowKey === i ?\n                                                                                        <TableCell>\n                                                                                                <FormControl variant='outlined' style={{width: '100%'}}>\n                                                                                                        <InputLabel>Select</InputLabel>\n                                                                                                        <Select id='candidateStatus' value={newCandidateStatusValue} onChange={(e) => editChange(e)} label=\"Candidate Status\">\n                                                                                                                <MenuItem value='shortlisted'>Shortlisted</MenuItem>\n                                                                                                                <MenuItem value='assessment'>Assessment</MenuItem>\n                                                                                                                <MenuItem value='hiringManagerReview'>Hiring Manager Review</MenuItem>\n                                                                                                                <MenuItem value='interview'>Interview</MenuItem>\n                                                                                                                <MenuItem value='salaryFitment'>Salary Fitment</MenuItem>\n                                                                                                                <MenuItem value='offer'>Offer</MenuItem>\n                                                                                                                <MenuItem value='documentation'>Documentation</MenuItem>\n                                                                                                                <MenuItem value='joining'>Joining</MenuItem>\n                                                                                                        </Select>\n                                                                                                </FormControl>\n                                                                                        </TableCell>\n                                                                                        :\n                                                                                        <TableCell align='left'>{candidateStatus}</TableCell>\n                                                                                }\n                                                                                <TableCell style={{minWidth: 150}}>\n                                                                                        <a href={`tel:${contactNo}`}>{contactNo}</a>\n                                                                                </TableCell>\n                                                                                <TableCell style={{minWidth: 150}}>\n                                                                                        <a href={`mailto:${email}`} target=\"_blank\">{email}</a>\n                                                                                </TableCell>\n                                                                                <TableCell style={{minWidth: 70}}>{ctc}</TableCell>\n                                                                                <TableCell style={{minWidth: 70}}>{location}</TableCell>\n                                                                                <TableCell style={{minWidth: 120}}>{currentCompany}</TableCell>\n                                                                                {\n                                                                                        isEdit.status && isEdit.rowKey === i && isEdit.loading ?\n                                                                                        <TableCell align='center' style={{minWidth: 100}}>\n                                                                                                <IconButton>\n                                                                                                        <LoopIcon />\n                                                                                                </IconButton>\n                                                                                        </TableCell> :\n                                                                                        isEdit.status && isEdit.rowKey === i ? \n                                                                                        <TableCell style={{minWidth: 100}}>\n                                                                                                <Tooltip title='Close'>\n                                                                                                        <IconButton onClick={() => setIsEdit(false)}>\n                                                                                                                <CloseIcon />\n                                                                                                        </IconButton>\n                                                                                                </Tooltip>\n                                                                                                <Tooltip title='Save'>\n                                                                                                        <IconButton onClick={() => editSave(row, i)}>\n                                                                                                                <DoneIcon />\n                                                                                                        </IconButton>\n                                                                                                </Tooltip>\n                                                                                        </TableCell> :\n                                                                                        <TableCell align='center' style={{minWidth: 100}}>\n                                                                                                <Tooltip title='Edit Candidate Status'>\n                                                                                                        <IconButton onClick={() => editHandler(row, i)}>\n                                                                                                                <EditIcon />\n                                                                                                        </IconButton>\n                                                                                                </Tooltip>\n                                                                                                \n                                                                                        </TableCell>\n                                                                                }\n                                                                        </TableRow>\n                                                                )\n                                                        })\n                                                }\n                                        </TableBody>\n                                </Table>\n                        </TableContainer>\n                        :\n                        <TableSkeletonLoader />\n                }\n                </>\n        )\n}\n\nexport default AppliedCandidatesTable\n\nconst tableHeadStyle = {\n        textTransform: 'uppercase',\n        fontWeight: 'bold',\n}","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { Card} from '../../../styles'\nimport {logsApi} from '../../../api'\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, IconButton, Tooltip, Select, MenuItem, FormControl, InputLabel} from '@material-ui/core'\nimport {formatDate, renderWithLoader, titleGenerator} from '../../../utils/helperFunctions'\nimport TableSkeletonLoader from '../../../components/TableSkeletonLoader'\n\n\nconst Logs = ({match, data}) => {\n        const [logs, setLogs] = useState()\n        const jobId = data._id\n\n        useEffect(() => {\n                axios.get(logsApi, {withCredentials: true})\n                .then(response => {\n                        setLogs(response.data)\n                })\n        }, [])\n\n        const rows = []\n        const heads = ['Candidate Name', 'Status', 'Date', 'Changed By']\n\n        const createData = (jobName, jobStatus, date, changedBy) => {\n                return {jobName, jobStatus, date, changedBy}\n        }\n\n        if(logs) {\n                logs.map((log, i) => {\n                        if(jobId === log.job._id) {\n                                const changesByFullname = `${log.changesBy.firstName} ${log.changesBy.lastName}`\n                                rows.push(\n                                        createData(log.candidate.candidateName, log.status, log.createdAt, changesByFullname)\n                                )\n                        }\n                })\n        }\n\n        return (\n                <>\n                        {\n                                logs ?\n                                <TableContainer component={Paper} elevation={1} square>\n                                        <Table aria-label=\"Candidate Logs table\">\n                                                <TableHead>\n                                                        <TableRow>\n                                                                {\n                                                                        heads.map((head, i) => (\n                                                                                <TableCell key={i} style={tableHeadStyle}>{head}</TableCell>\n                                                                        ))\n                                                                }\n                                                        </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                        {\n                                                                rows.map((row, i) => {\n                                                                        const {jobName, jobStatus, date, changedBy} = row\n                                                                        return (\n                                                                                <TableRow key={i}>\n                                                                                        <TableCell>{jobName}</TableCell>\n                                                                                        <TableCell>{jobStatus}</TableCell>\n                                                                                        <TableCell>{formatDate(date)}</TableCell>\n                                                                                        <TableCell>{changedBy}</TableCell>\n                                                                                </TableRow>\n                                                                        )\n                                                                })\n                                                        }\n                                                </TableBody>\n                                        </Table>\n                                </TableContainer>  \n                                :\n                                <TableSkeletonLoader /> \n                        } \n                </>\n        )\n}\n\nexport default Logs\n\nconst tableHeadStyle = {\n        textTransform: 'uppercase',\n        fontWeight: 'bold',\n}","import axios from 'axios'\nimport { get } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { NavLink, useHistory } from 'react-router-dom'\nimport { useRecoilValue, useRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport { jobEndpoint } from '../../api'\nimport ArrowBG from '../../assets/icons/arrow.svg'\nimport Controls from '../../components/Controls'\nimport DeleteModal from '../../components/Modals/DeleteModal'\nimport PageTab from '../../components/PageTab'\nimport Table from '../../components/Table'\nimport { currentUserAtom, jobAtom, jobTab, singlejobAtom } from '../../recoil/atoms'\n\nimport {\n\tCard,\n\tContentContainer,\n\tControlButton,\n\tPipelineCard,\n\tPipelineContainer,\n\tPipelineStat,\n\tPipelineTitle,\n\tRemoveSpaces,\n\tTableData,\n\tTableHead,\n\tTableRow,\n} from '../../styles'\nimport IconButton from '@material-ui/core/IconButton';\nimport { counter, renderWithLoader } from '../../utils/helperFunctions'\nimport { stages } from '../../utils/sharedVariables'\nimport JobInfo from './components/JobInfo'\nimport { toast } from '../../components/Toast'\nimport { v4 as uuid } from 'uuid'\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport NewJobInfo from './components/NewJobInfo'\nimport AppliedCandidatesTable from './components/AppliedCandidatesTable'\nimport Logs from './components/Logs'\n\n\nfunction JobDetails({ match }) {\n\tconst history = useHistory()\n\tconst id = match.params.id\n\tconst jobTabIndex = useRecoilValue(jobTab)\n\tconst labels = ['PipeLine', 'Applied Candidates', 'Job Details', 'Logs']\n\tconst [job, setJob] = useRecoilState(singlejobAtom)\n\tconst jobFullData = useRecoilValue(jobAtom)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\n\tconst selectedJob = jobFullData\n\t\t? jobFullData.find((job) => job.jobCode === id)\n\t\t: job\n\n\tconst stageDataCount = counter(\n\t\tget(selectedJob, 'statusIds', []).map(\n\t\t\t(statusId) => statusId.currentStage.stageName\n\t\t)\n\t)\n\n\tconst renderPipeline = stages.map((stage) => {\n\t\treturn (\n\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t<PipelineStat>{get(stageDataCount, stage, 0)}</PipelineStat>\n\t\t\t\t<PipelineTitle>{stage}</PipelineTitle>\n\t\t\t</PipelineCard>\n\t\t)\n\t})\n\n\tconst [isModalOpen, setIsModalOpen] = useState(false)\n\tconst toggleModal = () => setIsModalOpen(!isModalOpen)\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(`${jobEndpoint}/${id}`, { withCredentials: true })\n\t\t\t.then(({ data }) => {\n\t\t\t\tsetJob(data)\n\t\t\t})\n\t\t\t.catch((e) => console.log(e))\n\t}, [])\n\n\tconst candidateData = get(selectedJob, 'statusIds', []).map(\n\t\t(item) => item.candidateId\n\t)\n\n\tconst deleteHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.delete(`${jobEndpoint}/${id}`, { withCredentials: true })\n\t\t\ttoggleModal()\n\t\t\ttoast.success('Job Deleted')\n\n\t\t\thistory.goBack()\n\t\t} catch (err) {\n\t\t\ttoggleModal()\n\t\t\ttoast.error(`Error: ${err.message}`)\n\t\t}\n\t}\n\n\tconst editNavHandler = () => {\n\t\thistory.push(`/job/edit/${id}`)\n\t}\n\n\tconst candidateHeading = [\n\t\t'Candidate Code',\n\t\t'Name',\n\t\t'Email',\n\t\t'Mobile',\n\t\t'City',\n\t\t// `Experience`,\n\t\t`Industry`,\n\t\t`Functional Area`,\n\t\t'Status',\n\t]\n\n\tconst renderCandidateHeading = candidateHeading.map((heading) => (\n\t\t<TableHead key={uuid()}>{heading}</TableHead>\n\t))\n\n\tconst renderCandidateData = get(selectedJob, 'statusIds', []).map(\n\t\t({ candidateId, currentStage, _id }) => {\n\t\t\treturn (\n\t\t\t\t<TableRow key={candidateId._id}>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<NavLink to={`/applied/${_id}`}>\n\t\t\t\t\t\t\t{candidateId.candidateCode}\n\t\t\t\t\t\t</NavLink>\n\t\t\t\t\t</TableData>\n\t\t\t\t\t<TableData>{candidateId.basic.fullName}</TableData>\n\t\t\t\t\t<TableData>{candidateId.basic.primaryEmail}</TableData>\n\t\t\t\t\t<TableData>{candidateId.basic.mobile}</TableData>\n\t\t\t\t\t<TableData>{candidateId.address.state}</TableData>\n\t\t\t\t\t{/* <TableData>45</TableData> */}\n\t\t\t\t\t<TableData>{candidateId.professional.industry}</TableData>\n\t\t\t\t\t<TableData>{candidateId.professional.functionalArea}</TableData>\n\t\t\t\t\t<TableData>{currentStage.stageName}</TableData>\n\t\t\t\t</TableRow>\n\t\t\t)\n\t\t}\n\t)\n\n\tconst renderTabBody = (index) => {\n\t\tswitch (index) {\n\t\t\tcase 0:\n\t\t\t\treturn (\n\t\t\t\t\tjob ? \n\t\t\t\t\t<PipelineContainer>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.shortlisted.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Shortlisted</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.assessment.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Assessment</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.hiringManagerReview.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Hiring Manager Review</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.interview.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Interview</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.salaryFitment.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Salary Fitment</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.offer.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Offer</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.documentation.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Documentation</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{job.candidates.joining.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Joining</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t</PipelineContainer>\n\t\t\t\t\t: null\n\t\t\t\t)\n\t\t\tcase 1:\n\t\t\t\treturn <AppliedCandidatesTable match={match} data={job} />\n\n\t\t\tcase 2:\n\t\t\t\t// return <JobInfo job={selectedJob} />\n\t\t\t\treturn <NewJobInfo data={selectedJob} />\n\n\t\t\tcase 3: return <Logs data={job} match={match} />\n\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Controls\n\t\t\t\ttitle={get(selectedJob, 'jobTitle', 'Loading..')}>\n\t\t\t\t{/* <Controls title='Details'> */}\n\t\t\t\t{get(currentUser, 'roleId.permissions.job.delete') && (\n\t\t\t\t\t<IconButton onClick={toggleModal}>\n\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t)}\n\t\t\t\t{get(currentUser, 'roleId.permissions.job.update') && (\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={editNavHandler}>\n\t\t\t\t\t\t<EditIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t)}\n\t\t\t</Controls>\n\n\t\t\t<ContentContainer>\n\t\t\t\t<DeleteModal\n\t\t\t\t\topen={isModalOpen}\n\t\t\t\t\tonClose={toggleModal}\n\t\t\t\t\tcount={1}\n\t\t\t\t\tdeleteHandler={deleteHandler}\n\t\t\t\t/>\n\t\t\t\t<PageTab atom={jobTab} labels={labels} />\n\t\t\t\t{renderTabBody(jobTabIndex)}\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default JobDetails\n","import {\n\tButton,\n\tIconButton,\n\tInputLabel,\n\tMenuItem,\n\tSelect,\n} from '@material-ui/core'\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport { candidateEndpoint, createCandidate } from '../../../api'\nimport Controls from '../../../components/Controls'\nimport {\n\tCard,\n\tCardTitle,\n\tCategoryTitle,\n\tContentContainer,\n\tControlButton,\n\tInputContainer,\n\tItemListContainer,\n\tMultipleItemInputContainer,\n\tStyledTextField,\n} from '../../../styles'\nimport {\n\taddValToArr,\n\tcodeGenerator,\n\tpickerDateFormat,\n\trenderArr,\n} from '../../../utils/helperFunctions'\n\nimport {\n\tSMUIFormControl,\n\tSMUISelect,\n\tSMUITextField,\n} from '../../../styles/StyledMaterialUI'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport { useRecoilValue } from 'recoil'\nimport { candidateAtom, currentUserAtom } from '../../../recoil/atoms'\nimport { get } from 'lodash'\nimport { useHistory } from 'react-router-dom'\nimport { v4 as uuid } from 'uuid'\n\nimport { toast } from '../../../components/Toast'\n\nfunction CandidateInput({ edit, match }) {\n\tconst history = useHistory()\n\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst candidateCode = get(match, 'params.id', '')\n\tconst candidates = useRecoilValue(candidateAtom)\n\tconst [candidate, setCandidate] = useState(\n\t\tcandidates &&\n\t\t\tcandidates.find((candidate) => candidate.candidateCode === candidateCode)\n\t)\n\n\tconst { basic, address, professional } = candidate || {}\n\n\tconst {\n\t\tfullName: _fullName,\n\t\tprimaryEmail: _primaryEmail,\n\t\tsecondaryEmail: _secondaryEmail,\n\t\tmobile: _mobile,\n\t\tpan: _pan,\n\t\tdateOfBirth: _dateOfBirth,\n\t} = basic || {}\n\n\tconst {\n\t\tcountry: _country,\n\t\tpincode: _pincode,\n\t\tstate: _state,\n\t\tstreetName: _streetName,\n\t} = address || {}\n\n\tconst {\n\t\tcurrentSalary: _currentSalary,\n\t\teducation: _education,\n\t\texpected: _expected,\n\t\texperience: _experience,\n\t\tfunctionalArea: _functionalArea,\n\t\tindustry: _industry,\n\t\tskillSet: _skillSet,\n\t} = professional || {}\n\n\t// Basic\n\tconst [fullName, setFullName] = useState(_fullName)\n\n\tconst [primaryEmail, setPrimaryEmail] = useState(_primaryEmail)\n\tconst [secondaryEmail, setSecondaryEmail] = useState(_secondaryEmail)\n\tconst [mobile, setMobile] = useState(_mobile)\n\tconst [pan, setPan] = useState(_pan)\n\tconst [dateOfBirth, setDateOfBirth] = useState(pickerDateFormat(_dateOfBirth))\n\n\t// Address\n\tconst [streetName, setStreetName] = useState(_streetName)\n\tconst [state, setState] = useState(_state)\n\tconst [country, setCountry] = useState(_country)\n\tconst [pincode, setPincode] = useState(_pincode)\n\n\t// Professional\n\tconst [experience, setExperience] = useState(_experience || [])\n\tconst [education, setEducation] = useState(_education || [])\n\tconst [skillSet, setSkillSet] = useState(_skillSet || [])\n\tconst [skillSetVal, setSkillSetVal] = useState()\n\n\tconst [currentSalary, setCurrentSalary] = useState(_currentSalary)\n\tconst [expected, setExpected] = useState(_expected)\n\tconst [industry, setIndustry] = useState(_industry)\n\tconst [functionalArea, setFunctionalArea] = useState(_functionalArea)\n\n\tconst [jobTitle, setJobTitle] = useState()\n\tconst [company, setCompany] = useState()\n\tconst [summary, setSummary] = useState()\n\tconst [fromDate, setFromDate] = useState(pickerDateFormat())\n\tconst [tillDate, setTillDate] = useState(pickerDateFormat())\n\n\tconst [qualificationName, setQualificationName] = useState()\n\tconst [instituteName, setInstituteName] = useState()\n\tconst [studiedFromDate, setStudiedFromDate] = useState(pickerDateFormat())\n\tconst [studiedTillDate, setStudiedTillDate] = useState(pickerDateFormat())\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(`${candidateEndpoint}/${candidateCode}`, { withCredentials: true })\n\t\t\t.then(({ data }) => setCandidate(data))\n\t\t\t.catch((e) => console.log(e))\n\t}, [])\n\t\n\tconst addExpHandler = () => {\n\t\tconst data = {\n\t\t\tjobTitle,\n\t\t\tcompany,\n\t\t\tsummary,\n\t\t\tfromDate,\n\t\t\ttillDate,\n\t\t}\n\n\t\tconst tempExp = [...experience]\n\t\ttempExp.push(data)\n\t\tsetExperience(tempExp)\n\t}\n\n\tconst addEduHandler = () => {\n\t\tconst data = {\n\t\t\tqualificationName,\n\t\t\tinstituteName,\n\t\t\tstudiedFromDate,\n\t\t\tstudiedTillDate,\n\t\t}\n\n\t\tconst tempEdu = [...education]\n\t\ttempEdu.push(data)\n\t\tsetEducation(tempEdu)\n\t}\n\n\tconst saveHandler = async () => {\n\t\tconst candidateData = {\n\t\t\tbasic: {\n\t\t\t\tfullName,\n\t\t\t\tprimaryEmail,\n\t\t\t\tsecondaryEmail,\n\t\t\t\tmobile,\n\t\t\t\tpan,\n\t\t\t\tdateOfBirth: new Date(dateOfBirth),\n\t\t\t},\n\n\t\t\tprofessional: {\n\t\t\t\texperience,\n\t\t\t\teducation,\n\t\t\t\tskillSet,\n\t\t\t\tcurrentSalary: Number(currentSalary),\n\t\t\t\texpected: Number(expected),\n\t\t\t\tindustry,\n\t\t\t\tfunctionalArea,\n\t\t\t},\n\t\t\tcandidateCode: codeGenerator(fullName, pan, mobile),\n\t\t\tstatus: 'New',\n\t\t\tstage: 'Not Applied',\n\n\t\t\taddress: {\n\t\t\t\tstreetName,\n\t\t\t\tstate,\n\t\t\t\tcountry,\n\t\t\t\tpincode,\n\t\t\t},\n\t\t\tsource: currentUser._id,\n\t\t}\n\n\t\ttry {\n\t\t\tif (edit) {\n\t\t\t\tawait axios.patch(\n\t\t\t\t\t`${candidateEndpoint}/${candidateCode}`,\n\t\t\t\t\tcandidateData,\n\t\t\t\t\t{ withCredentials: true }\n\t\t\t\t)\n\n\t\t\t\thistory.goBack()\n\t\t\t\ttoast.success('Candidate Edited')\n\t\t\t} else {\n\t\t\t\tawait axios.post(candidateEndpoint, candidateData, {\n\t\t\t\t\twithCredentials: true,\n\t\t\t\t})\n\t\t\t\thistory.goBack()\n\t\t\t\ttoast.success('New Candidate Added')\n\t\t\t}\n\t\t} catch (err) {\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Controls title='Candidate Controls'>\n\t\t\t\t<ControlButton color='secondary'>Reset</ControlButton>\n\t\t\t\t{(get(currentUser, 'roleId.candidate.job.create') ||\n\t\t\t\t\tget(currentUser, 'roleId.permissions.candidate.create')) && (\n\t\t\t\t\t<ControlButton\n\t\t\t\t\t\tonClick={saveHandler}\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</ControlButton>\n\t\t\t\t)}\n\t\t\t</Controls>\n\t\t\t<ContentContainer>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Personal Information - Basic</CardTitle>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={fullName}\n\t\t\t\t\t\tonChange={(e) => setFullName(e.target.value)}\n\t\t\t\t\t\tlabel='Full Name'\n\t\t\t\t\t/>\n\t\t\t\t\t\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tvalue={[primaryEmail]}\n\t\t\t\t\t\tonChange={(e) => setPrimaryEmail(e.target.value)}\n\t\t\t\t\t\tlabel='Primary Email'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tvalue={secondaryEmail}\n\t\t\t\t\t\tonChange={(e) => setSecondaryEmail(e.target.value)}\n\t\t\t\t\t\tlabel='Secondary Email'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={mobile}\n\t\t\t\t\t\tonChange={(e) => setMobile(e.target.value)}\n\t\t\t\t\t\tlabel='Mobile No.'\n\t\t\t\t\t/> \n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={pan}\n\t\t\t\t\t\tonChange={(e) => setPan(e.target.value)}\n\t\t\t\t\t\tlabel='PAN No'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\tlabel='Date of Birth'\n\t\t\t\t\t\tdefaultValue={dateOfBirth}\n\t\t\t\t\t\tonChange={(e) => setDateOfBirth(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Personal Information - Address</CardTitle>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={streetName}\n\t\t\t\t\t\tonChange={(e) => setStreetName(e.target.value)}\n\t\t\t\t\t\tlabel='Street Name'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={state}\n\t\t\t\t\t\tonChange={(e) => setState(e.target.value)}\n\t\t\t\t\t\tlabel='State'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\tonChange={(e) => setCountry(e.target.value)}\n\t\t\t\t\t\tlabel='Country'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={pincode}\n\t\t\t\t\t\tonChange={(e) => setPincode(e.target.value)}\n\t\t\t\t\t\tlabel='Pincode'\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Personal Information - Professional</CardTitle>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={currentSalary}\n\t\t\t\t\t\tonChange={(e) => setCurrentSalary(e.target.value)}\n\t\t\t\t\t\tlabel='Current Salary'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={expected}\n\t\t\t\t\t\tonChange={(e) => setExpected(e.target.value)}\n\t\t\t\t\t\tlabel='Expected Salary'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='industry'>Industry</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tvalue={industry}\n\t\t\t\t\t\t\tlabel='Industry'\n\t\t\t\t\t\t\tonChange={(e) => setIndustry(e.target.value)}>\n\t\t\t\t\t\t\t<MenuItem value='Finance'>Finance</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='Marketing'>Marketing</MenuItem>\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='functionalArea'>Functional Area</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tlabel='Functional Area'\n\t\t\t\t\t\t\tvalue={functionalArea}\n\t\t\t\t\t\t\tonChange={(e) => setFunctionalArea(e.target.value)}>\n\t\t\t\t\t\t\t<MenuItem value='Software'>Software</MenuItem>\n\t\t\t\t\t\t\t<MenuItem value='Accounting'>Accounting</MenuItem>\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\n\t\t\t\t\t{skillSet.length > 0 && (\n\t\t\t\t\t\t<ItemListContainer>\n\t\t\t\t\t\t\t{renderArr(skillSet, setSkillSet)}\n\t\t\t\t\t\t</ItemListContainer>\n\t\t\t\t\t)}\n\n\t\t\t\t\t<MultipleItemInputContainer\n\t\t\t\t\t\tonSubmit={(e) =>\n\t\t\t\t\t\t\taddValToArr(e, skillSetVal, skillSet, setSkillSet)\n\t\t\t\t\t\t}>\n\t\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\t\tvalue={skillSetVal}\n\t\t\t\t\t\t\tonChange={(e) => setSkillSetVal(e.target.value)}\n\t\t\t\t\t\t\tlabel='Skill Set'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Button type='submit' variant='contained' color='primary'>\n\t\t\t\t\t\t\tAdd\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</MultipleItemInputContainer>\n\t\t\t\t</Card>\n\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Experience</CardTitle>\n\n\t\t\t\t\t{experience.map(\n\t\t\t\t\t\t({ jobTitle, company, summary, fromDate, tillDate }) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={uuid()}>\n\t\t\t\t\t\t\t\t\t<h1>Job Title</h1>\n\t\t\t\t\t\t\t\t\t<p>{jobTitle}</p>\n\t\t\t\t\t\t\t\t\t<h1>Company</h1>\n\t\t\t\t\t\t\t\t\t<p>{company}</p>\n\t\t\t\t\t\t\t\t\t<h1>Summary</h1>\n\t\t\t\t\t\t\t\t\t<p>{summary}</p>\n\t\t\t\t\t\t\t\t\t<h1>From Date</h1>\n\t\t\t\t\t\t\t\t\t<p>{fromDate}</p>\n\t\t\t\t\t\t\t\t\t<h1>Till Date</h1>\n\t\t\t\t\t\t\t\t\t<p>{tillDate}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={jobTitle}\n\t\t\t\t\t\tonChange={(e) => setJobTitle(e.target.value)}\n\t\t\t\t\t\tlabel='Job Title'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={company}\n\t\t\t\t\t\tonChange={(e) => setCompany(e.target.value)}\n\t\t\t\t\t\tlabel='Company'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={summary}\n\t\t\t\t\t\tonChange={(e) => setSummary(e.target.value)}\n\t\t\t\t\t\tlabel='Summary'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\tlabel='From Date'\n\t\t\t\t\t\tvalue={fromDate}\n\t\t\t\t\t\tonChange={(e) => setFromDate(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tlabel='Till Date'\n\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\tvalue={tillDate}\n\t\t\t\t\t\tonChange={(e) => setTillDate(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={addExpHandler}\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'>\n\t\t\t\t\t\t<AddCircleIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Card>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Education</CardTitle>\n\n\t\t\t\t\t{education.map(\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tqualificationName,\n\t\t\t\t\t\t\tinstituteName,\n\t\t\t\t\t\t\tstudiedFromDate,\n\t\t\t\t\t\t\tstudiedTillDate,\n\t\t\t\t\t\t}) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div key={uuid()}>\n\t\t\t\t\t\t\t\t\t<h1>Qualification</h1>\n\t\t\t\t\t\t\t\t\t<p>{qualificationName}</p>\n\t\t\t\t\t\t\t\t\t<h1>Institute</h1>\n\t\t\t\t\t\t\t\t\t<p>{instituteName}</p>\n\n\t\t\t\t\t\t\t\t\t<h1>Studied From</h1>\n\t\t\t\t\t\t\t\t\t<p>{studiedFromDate}</p>\n\t\t\t\t\t\t\t\t\t<h1>Studied Till</h1>\n\t\t\t\t\t\t\t\t\t<p>{studiedTillDate}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t)}\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={qualificationName}\n\t\t\t\t\t\tonChange={(e) => setQualificationName(e.target.value)}\n\t\t\t\t\t\tlabel='Qualification Name'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={instituteName}\n\t\t\t\t\t\tonChange={(e) => setInstituteName(e.target.value)}\n\t\t\t\t\t\tlabel='Institute Name'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\tlabel='Studied From Date'\n\t\t\t\t\t\tvalue={studiedFromDate}\n\t\t\t\t\t\tonChange={(e) => setStudiedFromDate(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tlabel='Studied Till Date'\n\t\t\t\t\t\ttype='date'\n\t\t\t\t\t\tvalue={studiedTillDate}\n\t\t\t\t\t\tonChange={(e) => setStudiedTillDate(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<IconButton\n\t\t\t\t\t\tonClick={addEduHandler}\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'>\n\t\t\t\t\t\t<AddCircleIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</Card>\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default CandidateInput\n","import React,{useEffect, useState} from 'react'\nimport axios from 'axios'\nimport * as yup from 'yup'\nimport {useFormik} from 'formik'\nimport { candidateEndpoint, createCandidate } from '../../../api'\nimport {\n\taddValToArr,\n\tcodeGenerator,\n\tpickerDateFormat,\n\trenderArr,\n} from '../../../utils/helperFunctions'\nimport {createBulkCandidate} from '../../../api/index'\nimport Controls from '../../../components/Controls'\nimport {\n\tCard,\n\tCardTitle,\n\tCategoryTitle,\n\tContentContainer,\n\tControlButton,\n\tInputContainer,\n\tItemListContainer,\n\tMultipleItemInputContainer,\n        StyledTextField,\n} from '../../../styles'\nimport {\n\tButton,\n\tIconButton,\n\tInputLabel,\n\tMenuItem,\n        Select,\n        Tooltip,\n} from '@material-ui/core'\nimport {\n\tSMUIFormControl,\n\tSMUISelect,\n\tSMUITextField,\n} from '../../../styles/StyledMaterialUI'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { candidateAtom, currentUserAtom } from '../../../recoil/atoms'\nimport { get } from 'lodash'\nimport { useHistory } from 'react-router-dom'\nimport { v4 as uuid } from 'uuid'\n\nimport { toast } from '../../../components/Toast'\nimport PublishIcon from '@material-ui/icons/Publish';\nimport BulkUpload from './BulkUpload'\n\nconst NewCandidateInput = (props) => {\n        const {edit} = props\n        const history = useHistory()\n        const currentUser = useRecoilValue(currentUserAtom)\n        const [loading, setLoading] = useState(false)\n        const [bulkUpload, setBulkUpload] = useState(false)\n        const [candidateData, setCandidateData] = useRecoilState(candidateAtom)\n\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/;\n\n        const formValidation = yup.object({\n                candidateName: yup.string('Enter Your full name').required('Full Name required'), \n                contactNo: yup.string().matches(phoneRegExp, 'Contact number is not valid')\n                                .max(10, 'Invalid contact number')\n                                .min(10, 'Invalid contact number')\n                                .required('Contact number required'),\n                email: yup.string('Enter your Email').email('Invalid Email').required('Email required'),\n                annualSalary: yup.string('Enter your current annual salary'),\n                currentLocation: yup.string('Enter your current location'),\n                currentEmployer: yup.string(`Enter your current employer's name`),\n        })\n\n        const {candidateName, contactNo, email, annualSalary, currentLocation, currentEmployer} = candidateData || {}\n\n        const formik = useFormik({\n                initialValues:\n                        edit ?\n                        {\n                                candidateName,\n                                contactNo,\n                                email,\n                                annualSalary,\n                                currentLocation,\n                                currentEmployer,\n                                source: currentUser._id\n                        } :\n                        {\n                                candidateName: '',\n                                contactNo: '',\n                                email: '',\n                                annualSalary: '',\n                                currentLocation: '',\n                                currentEmployer: '',\n                                source: currentUser._id\n                        },\n                validationSchema: formValidation,\n                onSubmit: (values, {resetForm}) => {\n                        // const candidateCode = codeGenerator(values.candidateName, values.currentLocation, values.contactNo);\n                        // values.candidateCode = candidateCode\n                        // console.log(`submit: ${JSON.stringify(values)}`)\n                        setLoading(true)\n                        !edit ?\n                        axios.post(candidateEndpoint, values, {withCredentials: true})\n                        .then(data => {\n                                setLoading(false)\n                                toast.success('New Candidate Added')\n                                resetForm({values: ''})\n\n                                console.log(data)\n                        })\n                        .catch(err => {\n                                setLoading(false)\n                                toast.error(`Error: ${err.message}`)\n                        })\n                        :\n                        axios.patch(`${candidateEndpoint}/${candidateData._id}`, values, {withCredentials: true})\n                        .then(data => {\n                                setLoading(false)\n                                toast.success('Candidate updated successfully')\n                                resetForm({values: ''})\n                                setCandidateData(data.data)\n                                setTimeout(() => {history.goBack()}, 1000)\n                        })\n                        .catch(err => {\n                                setLoading(false)\n                                toast.error(`Error: ${err.message}`)\n                        })\n                }\n        })\n\n        return (\n                <>\n                {\n                        bulkUpload ? <BulkUpload setBulkUpload={setBulkUpload} createBulk={createBulkCandidate} candidate /> : null\n                }\n                <form onSubmit={formik.handleSubmit}>\n                        <Controls title='Add New Candidate'>\n                                {\n                                        !edit ? (\n                                                <Tooltip title=\"Excel bulk upload\">\n                                                        <IconButton onClick={() => setBulkUpload(true)}><PublishIcon /></IconButton>\n                                                </Tooltip>\n                                        ) : null\n                                }\n\t\t\t\t<ControlButton color='secondary' onClick={() => formik.resetForm()}>Reset</ControlButton>\n\t\t\t\t{(get(currentUser, 'roleId.candidate.job.create') ||\n\t\t\t\t\tget(currentUser, 'roleId.permissions.candidate.create')) && (\n\t\t\t\t\t<ControlButton\n                                                type='submit'\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tcolor='primary'>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</ControlButton>\n\t\t\t\t)}\n\t\t\t</Controls>\n                        <ContentContainer>\n                                <Card>\n                                        <CardTitle>Personal Information</CardTitle>\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Full Name'\n                                                name='candidateName'\n                                                id='candidateName'\n                                                value={formik.values.candidateName}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.candidateName && Boolean(formik.errors.candidateName)}\n                                                                helperText={formik.touched.candidateName && formik.errors.candidateName}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Contact No.'\n                                                name='contactNo'\n                                                id='contactNo'\n                                                value={formik.values.contactNo}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.contactNo && Boolean(formik.errors.contactNo)}\n                                                                helperText={formik.touched.contactNo && formik.errors.contactNo}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Email'\n                                                type='email'\n                                                name='email'\n                                                id='email'\n                                                value={formik.values.email}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.email && Boolean(formik.errors.email)}\n                                                                helperText={formik.touched.email && formik.errors.email}\n                                        />\n                                </Card>\n                                <Card>\n                                        <CardTitle>Professional Information</CardTitle>\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Annual Salary'\n                                                name='annualSalary'\n                                                id='annualSalary'\n                                                value={formik.values.annualSalary}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.annualSalary && Boolean(formik.errors.annualSalary)}\n                                                                helperText={formik.touched.annualSalary && formik.errors.annualSalary}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Current Location'\n                                                name='currentLocation'\n                                                id='currentLocation'\n                                                value={formik.values.currentLocation}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.currentLocation && Boolean(formik.errors.currentLocation)}\n                                                                helperText={formik.touched.currentLocation && formik.errors.currentLocation}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Current Employer'\n                                                name='currentEmployer'\n                                                id='currentEmployer'\n                                                value={formik.values.currentEmployer}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.currentEmployer && Boolean(formik.errors.currentEmployer)}\n                                                                helperText={formik.touched.currentEmployer && formik.errors.currentEmployer}\n                                        />\n                                </Card>\n                                {/* <Card>\n                                        <CardTitle>Education</CardTitle>\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='U.G. Course'\n                                                name='UGCourse'\n                                                id='UGCourse'\n                                                value={formik.values.UGCourse}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.UGCourse && Boolean(formik.errors.UGCourse)}\n                                                                helperText={formik.touched.UGCourse && formik.errors.UGCourse}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='P.G. Course'\n                                                name='PGCourse'\n                                                id='PGCourse'\n                                                value={formik.values.PGCourse}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.PGCourse && Boolean(formik.errors.PGCourse)}\n                                                                helperText={formik.touched.PGCourse && formik.errors.PGCourse}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Post P.G. Course'\n                                                name='postPGCourse'\n                                                id='postPGCourse'\n                                                value={formik.values.postPGCourse}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.postPGCourse && Boolean(formik.errors.postPGCourse)}\n                                                                helperText={formik.touched.postPGCourse && formik.errors.postPGCourse}\n                                        />\n                                </Card>\n                                <Card>\n                                        <CardTitle>General</CardTitle>\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Last Active'\n                                                type=\"date\"\n                                                name='lastActive'\n                                                id='lastActive'\n                                                value={formik.values.lastActive}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.lastActive && Boolean(formik.errors.lastActive)}\n                                                                helperText={formik.touched.lastActive && formik.errors.lastActive}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Comment 1'\n                                                multiline\n                                                rows={2}\n                                                name='commentOne'\n                                                id='commentOne'\n                                                value={formik.values.commentOne}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.commentOne && Boolean(formik.errors.commentOne)}\n                                                                helperText={formik.touched.commentOne && formik.errors.commentOne}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Comment 2'\n                                                multiline\n                                                rows={2}\n                                                name='commentTwo'\n                                                id='commentTwo'\n                                                value={formik.values.commentTwo}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.commentTwo && Boolean(formik.errors.commentTwo)}\n                                                                helperText={formik.touched.commentTwo && formik.errors.commentTwo}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Comment 3'\n                                                multiline\n                                                rows={2}\n                                                name='commentThree'\n                                                id='commentThree'\n                                                value={formik.values.commentThree}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.commentThree && Boolean(formik.errors.commentThree)}\n                                                                helperText={formik.touched.commentThree && formik.errors.commentThree}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Comment 4'\n                                                multiline\n                                                rows={2}\n                                                name='commentFour'\n                                                id='commentFour'\n                                                value={formik.values.commentFour}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.commentFour && Boolean(formik.errors.commentFour)}\n                                                                helperText={formik.touched.commentFour && formik.errors.commentFour}\n                                        />\n                                        <SMUITextField\n                                                variant='outlined'\n                                                label='Comment 5'\n                                                multiline\n                                                rows={2}\n                                                name='commentFive'\n                                                id='commentFive'\n                                                value={formik.values.commentFive}\n                                                                onChange={formik.handleChange}\n                                                                error={formik.touched.commentFive && Boolean(formik.errors.commentFive)}\n                                                                helperText={formik.touched.commentFive && formik.errors.commentFive}\n                                        />\n                                </Card> */}\n                        </ContentContainer>\n                        </form>\n                </>\n        )\n}\n\nexport default NewCandidateInput\n","import React from 'react'\nimport { PageLayout } from '../../styles'\nimport CandidateInput from './components/CandidateInput'\nimport NewCandidateInput from './components/NewCandidateInput'\n\nfunction AddCandidate() {\n\treturn (\n\t\t<>\n\t\t\t<NewCandidateInput />\n\t\t\t{/* <CandidateInput /> */}\n\t\t</>\n\t)\n}\n\nexport default AddCandidate\n","import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {Link} from 'react-router-dom'\nimport { candidateEndpoint, statusEndpoint, logsApi } from '../../../api'\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, IconButton, Tooltip, Select, MenuItem, FormControl, InputLabel} from '@material-ui/core'\nimport {formatDate, renderWithLoader, titleGenerator} from '../../../utils/helperFunctions'\nimport { toast } from '../../../components/Toast'\nimport EditIcon from '@material-ui/icons/Edit'\nimport CloseIcon from '@material-ui/icons/Close'\nimport DoneIcon from '@material-ui/icons/Done'\nimport LoopIcon from '@material-ui/icons/Loop'\nimport TableSkeletonLoader from '../../../components/TableSkeletonLoader'\n\nconst AppliedJobsTable = ({match}) => {\n        const id = match.params.id\n        const [isEdit, setIsEdit] = useState({\n                status: false,\n                rowKey: null,\n                loading: false\n        })\n        const [newCandidateStatusValue, setNewCandidateStatusValue] = useState()\n        const [data, setData] = useState()\n\n        const editHandler = (row, i) => {\n                setIsEdit({\n                        status: true,\n                        rowKey: i,\n                        loading: false\n                })\n        }\n\n        const editChange = (e) => {\n                setNewCandidateStatusValue(e.target.value)\n        }\n\n        const editSave = (row, i) => {\n                setIsEdit({\n                        status: true,\n                        rowKey: i,\n                        loading: true\n                })\n\n                const statusRequest = axios.patch(`${statusEndpoint}/${id}`, {newCandidateStatusValue, row, data}, {withCredentials: true})\n                const logRequest = axios.post(logsApi, {candidate: data, jobIds: [row.code], status: newCandidateStatusValue}, {withCredentials: true})\n\n                axios.all([statusRequest, logRequest])\n                .then(axios.spread((...response) => {\n                        toast.success(data.data)\n                        setIsEdit(false)\n                        axios.get(`${candidateEndpoint}/${id}`, {withCredentials: true})\n                        .then(data => {\n                                setData(data.data)\n                                console.log(data)\n                                })\n                        .catch(err => {console.log(err)})\n                }))\n                .catch(err => {\n                        toast.error(`Error: ${err.message}`)\n                })\n\n        }\n\n        useEffect(() => {\n                axios.get(`${candidateEndpoint}/${id}`, {withCredentials: true})\n                .then(data => {\n                        setData(data.data)\n                        console.log(data)\n                        })\n                .catch(err => console.log(err))\n        }, [])\n\n        const shortlistedJobs = data ? data.jobs.shortlisted : {}\n        const assessmentJobs = data ? data.jobs.assessment : {}\n        const hiringManagerReviewJobs = data ? data.jobs.hiringManagerReview : {}\n        const interviewJobs = data ? data.jobs.interview : {}\n        const salaryFitmentJobs = data ? data.jobs.salaryFitment : {}\n        const offerJobs = data ? data.jobs.offer : {}\n        const documentationJobs = data ? data.jobs.documentation : {}\n        const joiningJobs = data ? data.jobs.joining : {}\n        const jobs = data ? shortlistedJobs.concat(assessmentJobs, hiringManagerReviewJobs, interviewJobs, salaryFitmentJobs, offerJobs, documentationJobs, joiningJobs) : null\n\n        const candidateId  = data ?  data._id : ''\n        var candidateStatus = ''\n        var applicants = 0\n\n        const cStatus = (job) => {\n\n                candidateStatus = job.candidates.shortlisted.includes(candidateId) ? \"Shortlisted\" :\n                                job.candidates.assessment.includes(candidateId) ? \"Assessment\" :\n                                job.candidates.hiringManagerReview.includes(candidateId) ? \"Hiring Manager Review\" :\n                                job.candidates.interview.includes(candidateId) ? \"Interview\" :\n                                job.candidates.salaryFitment.includes(candidateId) ? \"Salary Fitment\" :\n                                job.candidates.offer.includes(candidateId) ? \"Offer\" :\n                                job.candidates.documentation.includes(candidateId) ? \"Documentation\" :\n                                job.candidates.joining.includes(candidateId) ? \"Joining\" : \"Not Assigned\"\n\n                return candidateStatus\n        }\n\n        const applicantsNumber = (job) => {\n                applicants = job.candidates.shortlisted.length + job.candidates.assessment.length +\n                                job.candidates.hiringManagerReview.length + job.candidates.interview.length +\n                                job.candidates.salaryFitment.length + job.candidates.offer.length + \n                                job.candidates.documentation.length + job.candidates.joining.length\n\n                return applicants\n        }\n\n        \n\n        const rows = []\n        const heads = ['Job Code', 'Job Title', 'candidate status', 'Applicants', 'State', 'Zone', `Edit Status`]\n\n        const createData = (code, title, candidateStatus, applicants, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttactmentLink) => {\n                return { code, title, candidateStatus, applicants, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttactmentLink };\n        }\n        if(data) {\n                jobs.map( (job, i) => {\n                        const {jobCode, jobTitle, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttachmentLink} = job\n                        cStatus(job)\n                        applicantsNumber(job)\n                        rows.push(\n                                createData(jobCode, jobTitle, candidateStatus, applicants, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttachmentLink)\n                        );\n                })\n        }\n\n\n        return (\n                <>\n                {\n                        data ? \n                        <TableContainer component={Paper} elevation={1} square>\n                        <Table aria-label=\"Applied Jobs Table\">\n                                <TableHead>\n                                        <TableRow>\n                                                {\n                                                        heads.map((head, i) => (\n                                                                <TableCell key={i} style={tableHeadStyle}>{head}</TableCell>\n                                                        ))\n                                                }\n                                        </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                        {\n                                                rows.map((row, i) => {\n                                                        const {code, title, state, district, zone, status, noOfOpening, startDate, closeDate, industry, company, vertical, division, ctcMin, ctcMax, CVShared, sharedToHRDate, JDAttactmentLink, candidateStatus, applicants} = row\n                                                        return (\n                                                                <TableRow key={i}>\n                                                                        <TableCell component=\"th\" scope=\"row\">\n                                                                                <Link to={`/job/${code}`}>{code}</Link>\n                                                                        </TableCell>\n                                                                        <TableCell>{title}</TableCell>\n                                                                        {\n                                                                                isEdit.status && isEdit.rowKey === i ?\n                                                                                <TableCell>\n                                                                                        <FormControl variant='outlined' style={{width: '100%'}}>\n                                                                                                <InputLabel>Select</InputLabel>\n                                                                                                <Select id='candidateStatus' value={newCandidateStatusValue} onChange={(e) => editChange(e)} label=\"Candidate Status\">\n                                                                                                        <MenuItem value='shortlisted'>Shortlisted</MenuItem>\n                                                                                                        <MenuItem value='assessment'>Assessment</MenuItem>\n                                                                                                        <MenuItem value='hiringManagerReview'>Hiring Manager Review</MenuItem>\n                                                                                                        <MenuItem value='interview'>Interview</MenuItem>\n                                                                                                        <MenuItem value='salaryFitment'>Salary Fitment</MenuItem>\n                                                                                                        <MenuItem value='offer'>Offer</MenuItem>\n                                                                                                        <MenuItem value='documentation'>Documentation</MenuItem>\n                                                                                                        <MenuItem value='joining'>Joining</MenuItem>\n                                                                                                </Select>\n                                                                                        </FormControl>\n                                                                                </TableCell>\n                                                                                :\n                                                                                <TableCell align='left'>{candidateStatus}</TableCell>\n                                                                        }\n                                                                        <TableCell align='center'>{applicants}</TableCell>\n                                                                        <TableCell>{state}</TableCell>\n                                                                        <TableCell>{zone}</TableCell>\n                                                                        {\n                                                                                isEdit.status && isEdit.rowKey === i && isEdit.loading ?\n                                                                                <TableCell align='center'>\n                                                                                        <IconButton>\n                                                                                                <LoopIcon />\n                                                                                        </IconButton>\n                                                                                </TableCell> :\n                                                                                isEdit.status && isEdit.rowKey === i ? \n                                                                                <TableCell>\n                                                                                        <Tooltip title='Close'>\n                                                                                                <IconButton onClick={() => setIsEdit(false)}>\n                                                                                                        <CloseIcon />\n                                                                                                </IconButton>\n                                                                                        </Tooltip>\n                                                                                        <Tooltip title='Save'>\n                                                                                                <IconButton onClick={() => editSave(row, i)}>\n                                                                                                        <DoneIcon />\n                                                                                                </IconButton>\n                                                                                        </Tooltip>\n                                                                                </TableCell> :\n                                                                                <TableCell align='center'>\n                                                                                        <Tooltip title='Edit Candidate Status'>\n                                                                                                <IconButton onClick={() => editHandler(row, i)}>\n                                                                                                        <EditIcon />\n                                                                                                </IconButton>\n                                                                                        </Tooltip>\n                                                                                        \n                                                                                </TableCell>\n                                                                        }\n                                                                </TableRow>\n                                                        )\n                                                })\n                                        }\n                                </TableBody>\n                        </Table>\n                </TableContainer>\n                :\n                <TableSkeletonLoader />\n                }\n                </>\n        )\n}\n\nexport default AppliedJobsTable\n\nconst tableHeadStyle = {\n        textTransform: 'uppercase',\n        fontWeight: 'bold',\n}","import React from 'react'\nimport { Card, Category, CategoryGrid, CategoryMainTitle, Content, DataContainer, RemoveSpaces, Title } from '../../../styles'\nimport styled from 'styled-components'\nimport { get } from 'lodash'\nimport { formatDate } from '../../../utils/helperFunctions'\nimport { v4 as uuid } from 'uuid'\n\nfunction CandidateInfo({ data }) {\n\tconst { basic, professional, address, source } = data || {}\n\tconst { fullName, primaryEmail, secondaryEmail, mobile, pan, dateOfBirth } =\n\t\tbasic || {}\n\n\t\n\tconst {\n\t\texperience,\n\t\teducation,\n\t\tskillSet,\n\t\tcurrentSalary,\n\t\texpected,\n\t\tindustry,\n\t\tfunctionalArea,\n\t} = professional || {}\n\n\tconst { streetName, state, country, pincode } = address || {}\n\n\tconst renderExperience =\n\t\texperience &&\n\t\texperience.map(({ jobTitle, company, summary, fromDate, tillDate }) => {\n\t\t\treturn (\n\t\t\t\t<CategoryGrid key={uuid()}>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Job Title</Title>\n\t\t\t\t\t\t<Content>{jobTitle}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Company</Title>\n\t\t\t\t\t\t<Content>{company}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Summary</Title>\n\t\t\t\t\t\t<Content>{summary}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>From Date</Title>\n\t\t\t\t\t\t<Content>{formatDate(fromDate)}</Content>\n\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Till Date</Title>\n\t\t\t\t\t\t<Content>{formatDate(tillDate)}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t)\n\t\t})\n\n\tconst renderSkill =\n\t\tskillSet &&\n\t\tskillSet.map((skill) => {\n\t\t\treturn (\n\t\t\t\t<DataContainer key={uuid()}>\n\t\t\t\t\t<Content>{skill}</Content>\n\t\t\t\t</DataContainer>\n\t\t\t)\n\t\t})\n\tconst renderEducation =\n\t\teducation &&\n\t\teducation.map(\n\t\t\t({\n\t\t\t\tqualificationName,\n\t\t\t\tinstituteName,\n\t\t\t\tstudiedFromDate,\n\t\t\t\tstudiedTillDate,\n\t\t\t}) => {\n\t\t\t\treturn (\n\t\t\t\t\t<CategoryGrid key={uuid()}>\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Qualification</Title>\n\t\t\t\t\t\t\t<Content>{qualificationName}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Institute</Title>\n\t\t\t\t\t\t\t<Content>{instituteName}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Start Date</Title>\n\t\t\t\t\t\t\t<Content>{formatDate(studiedFromDate)}</Content>\n\t\t\t\t\t\t</DataContainer>\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>End Date</Title>\n\t\t\t\t\t\t\t<Content>{formatDate(studiedTillDate)}</Content>\n\t\t\t\t\t\t</DataContainer>\n\t\t\t\t\t</CategoryGrid>\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\n\treturn (\n\t\t<Card>\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Basic</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Fullname</Title>\n\t\t\t\t\t\t<Content>{fullName}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Primary Email</Title>\n\t\t\t\t\t\t<Content>{primaryEmail}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Secondary Email</Title>\n\t\t\t\t\t\t<Content>{secondaryEmail}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Mobile</Title>\n\t\t\t\t\t\t<Content>{mobile}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>PAN Number</Title>\n\t\t\t\t\t\t<Content>{pan}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Date Of Birth</Title>\n\t\t\t\t\t\t<Content>{formatDate(dateOfBirth)}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t</Category>\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Address</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Street Name</Title>\n\t\t\t\t\t\t<Content>{streetName}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Pincode</Title>\n\t\t\t\t\t\t<Content>{pincode}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>State</Title>\n\t\t\t\t\t\t<Content>{state}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Country</Title>\n\t\t\t\t\t\t<Content>{country}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>SkillSet</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>{renderSkill}</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Professional</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Industry</Title>\n\t\t\t\t\t\t<Content>{industry}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Functional Area</Title>\n\t\t\t\t\t\t<Content>{functionalArea}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Current Salary</Title>\n\t\t\t\t\t\t<Content>{currentSalary}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Expected Salary</Title>\n\t\t\t\t\t\t<Content>{expected}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t\t{renderExperience}\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Education</CategoryMainTitle>\n\t\t\t\t{renderEducation}\n\t\t\t</Category>\n\t\t</Card>\n\t)\n}\n\nexport default CandidateInfo\n\n\n","import React from 'react'\nimport { Card, Category, CategoryGrid, CategoryMainTitle, Content, DataContainer, RemoveSpaces, Title } from '../../../styles'\nimport styled from 'styled-components'\nimport { get } from 'lodash'\nimport { formatDate } from '../../../utils/helperFunctions'\nimport { v4 as uuid } from 'uuid'\nimport { EmailRounded } from '@material-ui/icons'\n\nfunction CandidateInfo({ data }) {\n        const {\n          candidateName,\n          contactNo,\n          email,\n          DOB,\n          postalAddress,\n          resumeTitle,\n          resumeID,\n          workExp,\n          annualSalary,\n          currentLocation,\n          preferredLocation,\n          currentEmployer,\n          designation,\n          PGCourse,\n          UGCourse,\n          postPGCourse,\n\t  lastActiveDate,\n\t  commentOne,\n\t  commentTwo,\n\t  commentThree,\n\t  commentFour,\n\t  commentFive\n\t} = data || {};\n\n\treturn (\n\t\t<Card>\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Personal</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Name</Title>\n\t\t\t\t\t\t<Content>{candidateName}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Contact Number</Title>\n\t\t\t\t\t\t<Content>{contactNo}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Email</Title>\n\t\t\t\t\t\t<Content><a href={`mailto:${email}`} target=\"_blank\">{email}</a></Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Date Of Birth</Title>\n\t\t\t\t\t\t<Content>{DOB}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Postal Address</Title>\n\t\t\t\t\t\t<Content>{postalAddress}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Professional</CategoryMainTitle>\n\t\t\t\t<CategoryGrid>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Resume Title</Title>\n\t\t\t\t\t\t<Content>{resumeTitle}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Resume ID</Title>\n\t\t\t\t\t\t<Content>{resumeID}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Work Experience</Title>\n\t\t\t\t\t\t<Content>{workExp}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Annual Salary</Title>\n\t\t\t\t\t\t<Content>{annualSalary}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Current Location</Title>\n\t\t\t\t\t\t<Content>{currentLocation}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Preferred Location</Title>\n\t\t\t\t\t\t<Content>{preferredLocation}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Current Employer</Title>\n\t\t\t\t\t\t<Content>{currentEmployer}</Content>\n\t\t\t\t\t</DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Designation</Title>\n\t\t\t\t\t\t<Content>{designation}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t</CategoryGrid>\n\t\t\t\t{}\n\t\t\t</Category>\n\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>Education</CategoryMainTitle>\n                                <CategoryGrid>\n                                        <DataContainer>\n                                                <Title>U.G. Course</Title>\n                                                <Content>{UGCourse}</Content>\n                                        </DataContainer>\n                                        <DataContainer>\n                                                <Title>P.G. Course</Title>\n                                                <Content>{PGCourse}</Content>\n                                        </DataContainer>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Post P.G. Course</Title>\n\t\t\t\t\t\t<Content>{postPGCourse}</Content>\n\t\t\t\t\t</DataContainer>\n                                </CategoryGrid>\n\t\t\t</Category>\n\t\t\t<Category>\n\t\t\t\t<CategoryMainTitle>General</CategoryMainTitle>\n                                <CategoryGrid>\n                                        <DataContainer>\n\t\t\t\t\t\t<Title>Last Active Date</Title>\n\t\t\t\t\t\t<Content>{lastActiveDate}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Comment 1</Title>\n\t\t\t\t\t\t<Content>{commentOne}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Comment 2</Title>\n\t\t\t\t\t\t<Content>{commentTwo}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Comment 3</Title>\n\t\t\t\t\t\t<Content>{commentThree}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Comment 4</Title>\n\t\t\t\t\t\t<Content>{commentFour}</Content>\n\t\t\t\t\t</DataContainer>\n\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t<Title>Comment 5</Title>\n\t\t\t\t\t\t<Content>{commentFive}</Content>\n\t\t\t\t\t</DataContainer>\n                                </CategoryGrid>\n\t\t\t</Category>\n\t\t</Card>\n\t)\n}\n\nexport default CandidateInfo\n\n\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { Card} from '../../../styles'\nimport {logsApi} from '../../../api'\nimport {Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button, IconButton, Tooltip, Select, MenuItem, FormControl, InputLabel} from '@material-ui/core'\nimport {formatDate, renderWithLoader, titleGenerator} from '../../../utils/helperFunctions'\nimport TableSkeletonLoader from '../../../components/TableSkeletonLoader'\n\n\nconst Logs = ({match, data}) => {\n        const [logs, setLogs] = useState()\n        const candidateId = data._id\n\n        useEffect(() => {\n                axios.get(logsApi, {withCredentials: true})\n                .then(response => {\n                        setLogs(response.data)\n                })\n        }, [])\n\n        const rows = []\n        const heads = ['Job Name', 'Status', 'Date', 'Changed By']\n\n        const createData = (jobName, jobStatus, date, changedBy) => {\n                return {jobName, jobStatus, date, changedBy}\n        }\n\n        if(logs) {\n                logs.map((log, i) => {\n                        if(candidateId === log.candidate._id) {\n                                const changesByFullname = `${log.changesBy.firstName} ${log.changesBy.lastName}`\n                                rows.push(\n                                        createData(log.job.jobTitle, log.status, log.createdAt, changesByFullname)\n                                )\n                        }\n                })\n        }\n\n        return (\n                <>\n                        {\n                                logs ?\n                                <TableContainer component={Paper} elevation={1} square>\n                                        <Table aria-label=\"Candidate Logs table\">\n                                                <TableHead>\n                                                        <TableRow>\n                                                                {\n                                                                        heads.map((head, i) => (\n                                                                                <TableCell key={i} style={tableHeadStyle}>{head}</TableCell>\n                                                                        ))\n                                                                }\n                                                        </TableRow>\n                                                </TableHead>\n                                                <TableBody>\n                                                        {\n                                                                rows.map((row, i) => {\n                                                                        const {jobName, jobStatus, date, changedBy} = row\n                                                                        return (\n                                                                                <TableRow key={i}>\n                                                                                        <TableCell>{jobName}</TableCell>\n                                                                                        <TableCell>{jobStatus}</TableCell>\n                                                                                        <TableCell>{formatDate(date)}</TableCell>\n                                                                                        <TableCell>{changedBy}</TableCell>\n                                                                                </TableRow>\n                                                                        )\n                                                                })\n                                                        }\n                                                </TableBody>\n                                        </Table>\n                                </TableContainer>  \n                                :\n                                <TableSkeletonLoader /> \n                        } \n                </>\n        )\n}\n\nexport default Logs\n\nconst tableHeadStyle = {\n        textTransform: 'uppercase',\n        fontWeight: 'bold',\n}","import { IconButton, Tooltip } from '@material-ui/core'\nimport { Delete, PlaylistAdd, Edit } from '@material-ui/icons'\nimport axios from 'axios'\nimport { get } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { candidateEndpoint } from '../../api'\nimport Controls from '../../components/Controls'\nimport PageTab from '../../components/PageTab'\nimport {\n\tcandidateAtom,\n\tcandidateCheckedAtom,\n\tcandidateTab,\n\tcurrentUserAtom,\n} from '../../recoil/atoms'\nimport {\n\tContentContainer,\n\tControlButton,\n\tPipelineCard,\n\tPipelineContainer,\n\tPipelineStat,\n\tPipelineTitle,\n\tTableData,\n\tTableHead,\n\tTableRow,\n} from '../../styles'\nimport AppliedJobsTable from './components/AppliedJobsTable'\nimport CandidateInfo from './components/CandidateInfo'\nimport NewCandidateInfo from './components/NewCandidateInfo'\nimport DeleteModal from '../../components/Modals/DeleteModal'\nimport {\n\tcounter,\n\tformatDate,\n\trenderWithLoader,\n} from '../../utils/helperFunctions'\nimport Table from '../../components/Table'\nimport { stages } from '../../utils/sharedVariables'\n\nimport { toast } from '../../components/Toast'\nimport { v4 as uuid } from 'uuid'\nimport Logs from './components/Logs'\n\n\nfunction CandidateDetails({ match }) {\n\tconst id = match.params.id\n\tconst history = useHistory()\n\tconst tabLabels = ['Pipeline', 'Applied Jobs', 'Candidate Details', 'Logs']\n\tconst tabIndex = useRecoilValue(candidateTab)\n\tconst [checked, setChecked] = useRecoilState(candidateCheckedAtom)\n\tconst [isModalOpen, setIsModalOpen] = useState(false)\n\tconst toggleModal = () => setIsModalOpen(!isModalOpen)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\n\tconst deleteHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.delete(`${candidateEndpoint}/${id}`, {\n\t\t\t\twithCredentials: true,\n\t\t\t})\n\t\t\thistory.goBack()\n\t\t\ttoast.success('Candidate Deleted')\n\t\t} catch (err) {\n\t\t\ttoast.error(`Error: ${err.message}`)\n\t\t}\n\t}\n\n\tconst [candidate, setCandidate] = useRecoilState(candidateAtom)\n\n\n\tuseEffect(() => {\n\t\taxios.get(`${candidateEndpoint}/${id}`, { withCredentials: true })\n\t\t\t.then(({ data }) => {\n\t\t\t\tsetCandidate(data)\n\t\t\t})\n\t\t\t.catch((e) => console.log(e))\n\t}, [])\n\n\tconst editNavHandler = () => {\n\t\thistory.push(`/candidate/edit/${id}`)\n\t}\n\n\tconst assignHandler = () => {\n\t\tsetChecked({ [candidate._id]: true })\n\t\thistory.push('/job/apply')\n\t}\n\n\tconst headings = ['Job Code', 'Job Title', 'Openings', 'Status', 'Posted on']\n\tconst renderHeading = headings.map((heading) => (\n\t\t<TableHead key={uuid()}>{heading}</TableHead>\n\t))\n\tconst renderData = get(candidate, 'statusIds', []).map((status) => {\n\t\treturn (\n\t\t\t<TableRow key={status._id}>\n\t\t\t\t<TableData>{status.jobId.jobDetails.jobCode}</TableData>\n\t\t\t\t<TableData>{status.jobId.jobOpeningInfo.jobTitle}</TableData>\n\t\t\t\t<TableData>{status.jobId.jobOpeningInfo.noOfOpenings}</TableData>\n\t\t\t\t<TableData>{status.currentStage.stageName}</TableData>\n\t\t\t\t<TableData>{formatDate(status.jobId.createdAt)}</TableData>\n\t\t\t</TableRow>\n\t\t)\n\t})\n\n\t// const stageDataCount = counter(\n\t// \tget(candidate, 'statusIds', []).map(\n\t// \t\t(statusId) => statusId.currentStage.stageName\n\t// \t)\n\t// ) \n\n\n\tconst renderPipeline = stages.map((stage) => {\n\t\treturn (\n\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t<PipelineStat></PipelineStat>\n\t\t\t\t<PipelineTitle>{stage.name}</PipelineTitle>\n\t\t\t</PipelineCard>\n\t\t)\n\t})\n\n\tconsole.log(candidate)\n\n\tconst renderTabBody = (index) => {\n\t\tswitch (index) {\n\t\t\tcase 0:\n\t\t\t\t// return <PipelineContainer>{renderPipeline}</PipelineContainer>\n\t\t\t\treturn (\n\t\t\t\t\tcandidate.jobs ? \n\t\t\t\t\t<PipelineContainer>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.shortlisted.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Shortlisted</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.assessment.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Assessment</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.hiringManagerReview.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Hiring Manager Review</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.interview.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Interview</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.salaryFitment.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Salary Fitment</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.offer.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Offer</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.documentation.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Documentation</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t\t<PipelineCard key={uuid()}>\n\t\t\t\t\t\t\t<PipelineStat>{candidate.jobs.joining.length}</PipelineStat>\n\t\t\t\t\t\t\t<PipelineTitle>Joining</PipelineTitle>\n\t\t\t\t\t\t</PipelineCard>\n\t\t\t\t\t</PipelineContainer>\n\t\t\t\t\t: null\n\t\t\t\t)\n\t\t\tcase 1:\n\t\t\t\treturn <AppliedJobsTable match={match} data= {candidate} />\n\t\t\t\t\n\n\t\t\tcase 2:\n\t\t\t\treturn <NewCandidateInfo data={candidate} />\n\n\t\t\tcase 3:\n\t\t\t\treturn <Logs data={candidate} match={match} />\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Controls title={candidate ? candidate.candidateName : 'Loading...'}>\n\t\t\t\t{get(currentUser, 'roleId.permissions.candidate.delete') && (\n\t\t\t\t\t<Tooltip title='Delete'>\n\t\t\t\t\t\t<IconButton onClick={toggleModal}>\n\t\t\t\t\t\t<Delete />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t)}\n\t\t\t\t{get(currentUser, 'roleId.permissions.candidate.update') && (\n\t\t\t\t\t<Tooltip title='Assign to jobs'>\n\t\t\t\t\t\t<IconButton onClick={assignHandler}>\n\t\t\t\t\t\t\t<PlaylistAdd />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t)}\n\t\t\t\t{get(currentUser, 'roleId.permissions.candidate.update') && (\n\t\t\t\t\t<Tooltip title='Edit Candidate'>\n\t\t\t\t\t\t<IconButton onClick={editNavHandler}>\n\t\t\t\t\t\t\t<Edit />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t)}\n\t\t\t</Controls>\n\t\t\t<DeleteModal\n\t\t\t\topen={isModalOpen}\n\t\t\t\tonClose={toggleModal}\n\t\t\t\tcount={1}\n\t\t\t\tdeleteHandler={deleteHandler}\n\t\t\t/>\n\t\t\t<ContentContainer>\n\t\t\t\t<PageTab atom={candidateTab} labels={tabLabels} />\n\t\t\t\t{renderTabBody(tabIndex)}\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default CandidateDetails\n","import React from 'react'\nimport JobPage from './JobPage'\nimport styled from 'styled-components'\nfunction ApplyJobList() {\n\treturn (\n\t\t<ApplyJobListContainer>\n\t\t\t<JobPage toApply />\n\t\t</ApplyJobListContainer>\n\t)\n}\n\nexport default ApplyJobList\n\nconst ApplyJobListContainer = styled.div`\n\twidth: 100%;\n\t\n`\n","import React from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { currentUserAtom } from '../../recoil/atoms'\nimport {\n\tCard,\n\tCategoryMainTitle,\n\tCategory,\n\tCategoryGrid,\n\tDataContainer,\n\tTitle,\n\tContent,\n} from '../../styles'\nimport { formatDate } from '../../utils/helperFunctions'\n\nfunction ProfilePage() {\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst { firstName, lastName, userName, email, contact, roleId, createdAt } =\n\t\tcurrentUser || {}\n\tconst { name } = roleId || {}\n\n\treturn (\n\t\t<>\n\t\t\t<Card>\n\t\t\t\t<Category>\n\t\t\t\t\t<CategoryMainTitle>Profile</CategoryMainTitle>\n\t\t\t\t\t<CategoryGrid>\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>First Name</Title>\n\t\t\t\t\t\t\t<Content>{firstName}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Last Name</Title>\n\t\t\t\t\t\t\t<Content>{lastName}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Username</Title>\n\t\t\t\t\t\t\t<Content>{userName}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Email</Title>\n\t\t\t\t\t\t\t<Content>{email}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Contact</Title>\n\t\t\t\t\t\t\t<Content>{contact}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Role</Title>\n\t\t\t\t\t\t\t<Content>{name}</Content>\n\t\t\t\t\t\t</DataContainer>\n\n\t\t\t\t\t\t<DataContainer>\n\t\t\t\t\t\t\t<Title>Created At</Title>\n\t\t\t\t\t\t\t<Content>{formatDate(createdAt)}</Content>\n\t\t\t\t\t\t</DataContainer>\n\t\t\t\t\t</CategoryGrid>\n\t\t\t\t</Category>\n\t\t\t</Card>\n\t\t</>\n\t)\n}\n\nexport default ProfilePage\n","import React, { useEffect, useState } from 'react'\nimport {\n\tContentContainer,\n\tStyledCheckbox,\n\tTableHead,\n\tTableData,\n\tTableRow,\n\tModalBody,\n\tModalTitle,\n\tModalWarning,\n\tModalText,\n\tModalButtonContainer,\n} from '../../styles'\nimport Controls from '../../components/Controls'\nimport { IconButton } from '@material-ui/core'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport {\n\tcompanyAtom,\n\tcompanyCheckedAtom,\n\tcurrentUserAtom,\n} from '../../recoil/atoms'\nimport axios from 'axios'\nimport { companiesEndpoint } from '../../api'\nimport { v4 as uuid } from 'uuid'\nimport Table from '../../components/Table'\nimport {\n\tformatDate,\n\trenderWithLoader,\n} from '../../utils/helperFunctions'\nimport { selectedCompanies } from '../../recoil/selectors'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport { SMUIButton, SMUIIconButton, SMUIModal } from '../../styles/StyledMaterialUI'\n\nimport { toast } from '../../components/Toast'\nimport { get } from 'lodash'\n\nfunction CompanyPage() {\n\tconst history = useHistory()\n\tconst location = useLocation().pathname\n\tconst [companies, setCompanies] = useRecoilState(companyAtom)\n\tconst [checked, setChecked] = useRecoilState(companyCheckedAtom)\n\tconst [isModalOpen, setIsModalOpen] = useState(false)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst selectedCompany = useRecoilValue(selectedCompanies)\n\n\tuseEffect(() => {\n\t\taxios.get(companiesEndpoint, { withCredentials: true })\n\t\t\t.then(({ data }) => setCompanies(data))\n\t\t\t.catch((e) => console.log(e))\n\t}, [isModalOpen])\n\n\tconst navHandler = (to) => {\n\t\thistory.push(`${location}/${to}`)\n\t}\n\t\n\tconst companyHeading = [\n\t\t'Select',\n\t\t'Company Name',\n\t\t'Company Address',\n\t\t'Jobs Assigned',\n\t\t'Created On',\n\t]\n\n\tconst renderCompanyHeading = companyHeading.map((heading) => (\n\t\t<TableHead key={uuid()}>{heading}</TableHead>\n\t))\n\n\n\tconst checkHandler = (e, _id) => {\n\t\tsetChecked({ ...checked, [_id]: e.target.checked })\n\t}\n\n\tconst deleteManyHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.patch(companiesEndpoint, selectedCompany, {\n\t\t\t\twithCredentials: true,\n\t\t\t})\n\t\t\ttoggleModal()\n\t\t\tsetChecked({})\n\t\t\ttoast.success('Companies deleted')\n\t\t} catch (error) {\n\t\t\ttoggleModal()\n\n\t\t\ttoast.success('Something went wrong')\n\t\t}\n\t}\n\n\tconst toggleModal = () => setIsModalOpen(!isModalOpen)\n\n\tconst renderCompanyData =\n\t\tcompanies &&\n\t\tcompanies.map(({ _id, companyName, companyAddress, jobIds, createdAt }) => {\n\t\t\treturn (\n\t\t\t\t<TableRow key={_id}>\n\t\t\t\t\t<TableData>\n\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, _id)}\n\t\t\t\t\t\t\tchecked={checked[_id] || false}\n\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</TableData>\n\n\t\t\t\t\t<TableData>{companyName}</TableData>\n\t\t\t\t\t<TableData>{companyAddress}</TableData>\n\t\t\t\t\t<TableData>{jobIds.length}</TableData>\n\t\t\t\t\t<TableData>{formatDate(createdAt)}</TableData>\n\t\t\t\t</TableRow>\n\t\t\t)\n\t\t})\n\n\treturn (\n\t\t<>\n\t\t\t<Controls title='Company'>\n\t\t\t\t{selectedCompany.length > 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.job.delete') && (\n\t\t\t\t\t\t\t<SMUIIconButton color='secondary' onClick={toggleModal}>\n\t\t\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{get(currentUser, 'roleId.permissions.job.create') && (\n\t\t\t\t\t\t\t<SMUIIconButton color='primary' onClick={() => navHandler('add')}>\n\t\t\t\t\t\t\t\t<AddCircleIcon />\n\t\t\t\t\t\t\t</SMUIIconButton>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</Controls>\n\t\t\t<SMUIModal open={isModalOpen} onClose={toggleModal}>\n\t\t\t\t<ModalBody>\n\t\t\t\t\t<ModalTitle>{selectedCompany.length} Items Selected</ModalTitle>\n\t\t\t\t\t<ModalWarning>Warning: This action cannot be undone</ModalWarning>\n\t\t\t\t\t<ModalText>Do you want to delete?</ModalText>\n\t\t\t\t\t<ModalButtonContainer>\n\t\t\t\t\t\t<SMUIButton onClick={toggleModal}>Cancel</SMUIButton>\n\t\t\t\t\t\t<SMUIButton\n\t\t\t\t\t\t\tonClick={deleteManyHandler}\n\t\t\t\t\t\t\tcolor='secondary'\n\t\t\t\t\t\t\tvariant='contained'>\n\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t</SMUIButton>\n\t\t\t\t\t</ModalButtonContainer>\n\t\t\t\t</ModalBody>\n\t\t\t</SMUIModal>\n\t\t\t<ContentContainer>\n\t\t\t\t{renderWithLoader(\n\t\t\t\t\tcompanies,\n\t\t\t\t\t<Table headings={renderCompanyHeading}>{renderCompanyData}</Table>\n\t\t\t\t)}\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default CompanyPage\n","import styled from 'styled-components'\nimport { Button, TextField } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport Controls from '../../../components/Controls'\nimport {\n\tCard,\n\tContentContainer,\n\tRemoveSpaces,\n\tControlButton,\n} from '../../../styles'\nimport axios from 'axios'\nimport { companyEndpoint } from '../../../api'\nimport { useHistory } from 'react-router-dom'\nimport { toast } from '../../../components/Toast'\n\nfunction CompanyInput() {\n\tconst history = useHistory()\n\tconst [companyName, setCompanyName] = useState('')\n\tconst [companyAddress, setCompanyAddress] = useState('')\n\n\tconst AddCompanyHandler = async () => {\n\t\tconst companyData = {\n\t\t\tcompanyName,\n\t\t\tcompanyAddress,\n\t\t}\n\t\ttry {\n\t\t\tawait axios.post(companyEndpoint, companyData, { withCredentials: true })\n\t\t\ttoast.success('Company Added')\n\t\t\thistory.goBack()\n\t\t} catch (err) {\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Controls title='Add Company'>\n\t\t\t\t<ControlButton color='secondary'>Reset</ControlButton>\n\t\t\t\t<ControlButton\n\t\t\t\t\tonClick={AddCompanyHandler}\n\t\t\t\t\tcolor='primary'\n\t\t\t\t\tvariant='contained'>\n\t\t\t\t\tSave\n\t\t\t\t</ControlButton>\n\t\t\t</Controls>\n\t\t\t<ContentContainer>\n\t\t\t\t<Card>\n\t\t\t\t\t<Title>Company Details</Title>\n\t\t\t\t\t<CompanyTextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={companyName}\n\t\t\t\t\t\tonChange={(e) => setCompanyName(e.target.value)}\n\t\t\t\t\t\tlabel='Company Name'\n\t\t\t\t\t/>\n\t\t\t\t\t<CompanyTextField\n\t\t\t\t\t\tvalue={companyAddress}\n\t\t\t\t\t\tonChange={(e) => setCompanyAddress(e.target.value)}\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tmultiline\n\t\t\t\t\t\trows={4}\n\t\t\t\t\t\trowsMax={4}\n\t\t\t\t\t\tlabel='Company Address'\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default CompanyInput\n\nconst Title = styled.h5`\n\ttext-align: left;\n\t${RemoveSpaces};\n\tpadding: 5px 0px;\n`\n\nconst CompanyTextField = styled(TextField)`\n\t&& {\n\t\twidth: 100%;\n\t\tmargin: 10px 0px;\n\t\tfont-size: 0.8em;\n\t}\n`\n","import React from 'react'\nimport CompanyInput from './components/CompanyInput'\nimport styled from 'styled-components'\nfunction AddCompany() {\n\treturn (\n\t\t<>\n\t\t\t<CompanyInput />\n\t\t</>\n\t)\n}\n\nexport default AddCompany\n\nconst AddCompanyContainer = styled.div`\n\t/* height: 100vh; */\n`\n","import { SMUIButton, SMUITextField } from '../../../styles/StyledMaterialUI'\nimport React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { RemoveSpaces, StyledTextField } from '../../../styles'\nimport { Button, TextField, CircularProgress } from '@material-ui/core'\nimport { useRecoilState } from 'recoil'\nimport {\n\tcredentialAtom,\n\tcurrentUserAtom,\n\tisAuthAtom,\n\tloading\n} from '../../../recoil/atoms'\nimport { useHistory } from 'react-router-dom'\nimport { loginEndpoint } from '../../../api'\n\nimport axios from 'axios'\nimport { encryptObj } from '../../../utils/helperFunctions'\n\nimport { toast } from '../../../components/Toast'\n\nfunction SigninForm() {\n\tconst history = useHistory()\n\n\tconst [user, setUser] = useState('')\n\tconst [password, setPassword] = useState('')\n\tconst [isAuth, setIsAuth] = useRecoilState(isAuthAtom)\n\tconst [currentUser, setCurrentUser] = useRecoilState(currentUserAtom);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst submitHandler = async (e) => {\n\t\te.preventDefault()\n\t\tconst cred = { user, password }\n\t\tconst data = encryptObj(cred)\n\t\ttry {\n\t\t\tsetIsLoading(true);\n\t\t\tconst resData = await axios.post(\n\t\t\t\tloginEndpoint,\n\t\t\t\t{ data },\n\t\t\t\t{ withCredentials: true }\n\t\t\t)\n\t\t\tif (resData.data.userData) {\n\t\t\t\tsetIsLoading(false);\n\t\t\t\tsetIsAuth(true)\n\t\t\t\tsetCurrentUser(resData.data.userData)\n\t\t\t\thistory.push('/dashboard')\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetIsLoading(false);\n\t\t\ttoast.error('Invalid Credentials')\n\t\t}\n\t}\n\n\n\treturn (\n\t\t<SigninFormContainer onSubmit={submitHandler}>\n\t\t\t<SiginFormTitle>SOS Dashboard</SiginFormTitle>\n\t\t\t<SiginFormDesc>Welcome Back, Please enter your credentials</SiginFormDesc>\n\t\t\t<SigninInput\n\t\t\t\trequired\n\t\t\t\tvalue={user}\n\t\t\t\tonChange={(e) => setUser(e.target.value)}\n\t\t\t\tlabel='Email / Username'\n\t\t\t\tvariant='outlined'\n\t\t\t\ttype='text'\n\t\t\t/>\n\t\t\t<SigninInput\n\t\t\t\trequired\n\t\t\t\tvalue={password}\n\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\tlabel='Password'\n\t\t\t\tvariant='outlined'\n\t\t\t\ttype='password'\n\t\t\t/>\n\t\t\t<SignInButton type='submit' variant='contained' color='primary'>\n\t\t\t\t{/* Sign In */}\n\t\t\t\t{\n\t\t\t\t\tisLoading ? <CircularProgress size={24} style={{color: 'white'}} /> : \"Sign In\"\n\t\t\t\t}\n\t\t\t</SignInButton>\n\t\t</SigninFormContainer>\n\t)\n}\n\nexport default SigninForm\n\nconst SiginFormTitle = styled.h1`\n\t${RemoveSpaces};\n\tpadding-bottom: 5px;\n`\n\nconst SiginFormDesc = styled.p`\n\t${RemoveSpaces};\n\tpadding-bottom: 30px;\n`\n\nconst SigninInput = styled(TextField)`\n\t&& {\n\t\tmargin: 10px 0px;\n\t}\n`\n\nconst SignInButton = styled(Button)`\n\t&& {\n\t\tmargin: 10px 0px;\n\n\t\t/* padding: 15px; */\n\t}\n`\n\nconst SigninFormContainer = styled.form`\n\tdisplay: flex;\n\tflex: 1;\n\tpadding: 70px;\n\tflex-direction: column;\n\ttext-align: left;\n\tjustify-content: space-around;\n`\n","import React from 'react'\nimport styled from 'styled-components'\nimport SigninForm from './components/SigninForm'\nimport AuthIcon from '../../assets/icons/auth.svg'\n\nfunction Signin() {\n\treturn (\n\t\t<SigninContainer>\n\t\t\t{/* Image */}\n\t\t\t<AuthImage src={AuthIcon} />\n\n\t\t\t{/* SiginForm */}\n\t\t\t<SigninForm />\n\t\t</SigninContainer>\n\t)\n}\n\nexport default Signin\n\nconst SigninContainer = styled.div`\n\tdisplay: flex;\n\twidth: 100%;\n\talign-items: center;\n\tjustify-content: space-around;\n\theight: 100%;\n`\n\nconst AuthImage = styled.img`\n\twidth: 500px;\n\tflex: 1;\n\tpadding: 70px;\n`\n","import { Button } from '@material-ui/core'\nimport Menu from '@material-ui/core/Menu'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport AccountCircleOutlinedIcon from '@material-ui/icons/AccountCircleOutlined'\nimport axios from 'axios'\nimport React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport styled from 'styled-components'\nimport { logoutEndpoint } from '../api'\nimport { currentUserAtom, isAuthAtom } from '../recoil/atoms'\nimport { RemoveSpaces, themeBorder } from '../styles/index'\nimport { toast } from './Toast'\n\nfunction Navbar() {\n\tconst [anchorEl, setAnchorEl] = useState(null)\n\tconst [, setIsAuth] = useRecoilState(isAuthAtom)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\n\tconst history = useHistory()\n\tconst handleClick = (event) => setAnchorEl(event.currentTarget)\n\tconst handleClose = () => setAnchorEl(null)\n\n\tconst navHandler = () => {\n\t\thistory.push(`/profile`)\n\t\thandleClose()\n\t}\n\n\tconst logoutHandler = async () => {\n\t\ttry {\n\t\t\tawait axios.post(logoutEndpoint, {}, { withCredentials: true })\n\t\t\tsetIsAuth(false)\n\t\t\thandleClose()\n\t\t\thistory.push(`/`)\n\t\t} catch (e) {\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\treturn (\n\t\t<NavbarContainer>\n\t\t\t<Logo>\n\t\t\t\tSwitch <LogoHighlight>On Success</LogoHighlight>\n\t\t\t</Logo>\n\n\t\t\t<Button startIcon={<AccountCircleOutlinedIcon />} onClick={handleClick}>\n\t\t\t\t{currentUser && currentUser.firstName}\n\t\t\t</Button>\n\n\t\t\t<Menu\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={handleClose}>\n\t\t\t\t<MenuItem onClick={navHandler}>Profile</MenuItem>\n\t\t\t\t<MenuItem onClick={logoutHandler}>Logout</MenuItem>\n\t\t\t</Menu>\n\t\t</NavbarContainer>\n\t)\n}\n\nexport default Navbar\n\nconst NavbarContainer = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tposition: sticky;\n\tpadding: 10px 20px;\n\t${themeBorder}\n\tborder-radius: 0px;\n\tjustify-content: space-between;\n`\nconst Logo = styled.h4`\n\t${RemoveSpaces};\n\tcolor: blue;\n`\n\nconst LogoHighlight = styled.span`\n\tcolor: orange;\n`\n","import { Checkbox, TextField } from '@material-ui/core'\nimport axios from 'axios'\nimport React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { roleEndpoint } from '../../../api'\nimport Controls from '../../../components/Controls'\nimport {\n\tCard,\n\tCardTitle,\n\tContentContainer,\n\tControlButton,\n\tRemoveSpaces,\n\tStyledCheckbox,\n} from '../../../styles'\nimport { SMUITextField } from '../../../styles/StyledMaterialUI'\n\nimport { toast } from '../../../components/Toast'\nimport { useHistory } from 'react-router-dom'\n\nfunction RoleInput() {\n\tconst history = useHistory()\n\n\tconst [name, setName] = useState('')\n\tconst [vendor, setVendor] = useState('')\n\n\tconst defaultPermissions = {\n\t\tjob: {\n\t\t\tcreate: false,\n\t\t\tupdate: false,\n\t\t\tread: false,\n\t\t\tdelete: false,\n\t\t},\n\t\tcandidate: {\n\t\t\tcreate: false,\n\t\t\tupdate: false,\n\t\t\tread: false,\n\t\t\tdelete: false,\n\t\t},\n\t\tuser: {\n\t\t\tcreate: false,\n\t\t\tupdate: false,\n\t\t\tread: false,\n\t\t\tdelete: false,\n\t\t},\n\t\trole: {\n\t\t\tcreate: false,\n\t\t\tupdate: false,\n\t\t\tread: false,\n\t\t\tdelete: false,\n\t\t},\n\t}\n\n\tconst [permissions, setPermissions] = useState(defaultPermissions)\n\n\tuseEffect(() => {}, [])\n\n\tconst resetHandler = () => {}\n\n\tconst submitHandler = async () => {\n\t\tconsole.log({ permissions })\n\t\tconst roleData = {\n\t\t\tname,\n\t\t\tvendor,\n\t\t\tpermissions,\n\t\t}\n\t\ttry {\n\t\t\tawait axios.post(roleEndpoint, roleData, { withCredentials: true })\n\t\t\thistory.goBack()\n\t\t\ttoast.success('New Role Added')\n\t\t} catch (error) {\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\tconst checkHandler = (e, role, type) => {\n\t\tconst checked = e.target.checked\n\t\tconst permissionsTemp = { ...permissions[role] }\n\t\tpermissionsTemp[type] = checked\n\t\tif (\n\t\t\t!(\n\t\t\t\ttype === 'read' &&\n\t\t\t\t(permissionsTemp['delete'] || permissionsTemp['update'])\n\t\t\t)\n\t\t) {\n\t\t\tif ((type === 'delete' && checked) || (type === 'update' && checked)) {\n\t\t\t\tpermissionsTemp['read'] = checked\n\t\t\t}\n\t\t\tsetPermissions({\n\t\t\t\t...permissions,\n\t\t\t\t[role]: permissionsTemp,\n\t\t\t})\n\t\t}\n\t}\n\n\tconst selectAllHandler = (e, role) => {\n\t\tconst checked = e.target.checked\n\t\tconst permissionsTemp = { ...permissions[role] }\n\t\tpermissionsTemp.read = checked\n\t\tpermissionsTemp.create = checked\n\t\tpermissionsTemp.update = checked\n\t\tpermissionsTemp.delete = checked\n\t\tsetPermissions({\n\t\t\t...permissions,\n\t\t\t[role]: permissionsTemp,\n\t\t})\n\t}\n\treturn (\n\t\t<>\n\t\t\t<Controls title='Add Role'>\n\t\t\t\t<ControlButton color='secondary'>Reset</ControlButton>\n\t\t\t\t<ControlButton\n\t\t\t\t\tonClick={submitHandler}\n\t\t\t\t\tvariant='contained'\n\t\t\t\t\tcolor='primary'>\n\t\t\t\t\tSave\n\t\t\t\t</ControlButton>\n\t\t\t</Controls>\n\n\t\t\t<ContentContainer>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Role Details</CardTitle>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={name}\n\t\t\t\t\t\tonChange={(e) => setName(e.target.value)}\n\t\t\t\t\t\tlabel='Role Name'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={vendor}\n\t\t\t\t\t\tonChange={(e) => setVendor(e.target.value)}\n\t\t\t\t\t\tlabel='Vendor'\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t\t<Card>\n\t\t\t\t\t<CardTitle>Permissions</CardTitle>\n\t\t\t\t\t<PermissionTable>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<PermissionTableRow>\n\t\t\t\t\t\t\t\t<PermissionTableHead>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => selectAllHandler(e, 'job')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Jobs</Content>\n\t\t\t\t\t\t\t\t</PermissionTableHead>\n\n\t\t\t\t\t\t\t\t<PermissionTableHead>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => selectAllHandler(e, 'candidate')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Candidates</Content>\n\t\t\t\t\t\t\t\t</PermissionTableHead>\n\t\t\t\t\t\t\t\t<PermissionTableHead>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => selectAllHandler(e, 'role')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Roles</Content>\n\t\t\t\t\t\t\t\t</PermissionTableHead>\n\t\t\t\t\t\t\t\t<PermissionTableHead>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => selectAllHandler(e, 'user')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>User</Content>\n\t\t\t\t\t\t\t\t</PermissionTableHead>\n\t\t\t\t\t\t\t</PermissionTableRow>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t<PermissionTableRow>\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.job.read}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'job', 'read')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Read</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.candidate.read}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'candidate', 'read')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Read</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.role.read}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'role', 'read')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Read</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.user.read}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'user', 'read')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Read</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\t\t\t\t\t\t\t</PermissionTableRow>\n\n\t\t\t\t\t\t\t<PermissionTableRow>\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.job.create}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'job', 'create')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Create</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.candidate.create}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'candidate', 'create')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Create</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.role.create}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'role', 'create')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Create</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.user.create}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'user', 'create')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Create</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\t\t\t\t\t\t\t</PermissionTableRow>\n\n\t\t\t\t\t\t\t<PermissionTableRow>\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.job.update}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'job', 'update')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Update</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.candidate.update}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'candidate', 'update')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Update</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.role.update}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'role', 'update')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Update</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.user.update}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'user', 'update')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Update</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\t\t\t\t\t\t\t</PermissionTableRow>\n\n\t\t\t\t\t\t\t<PermissionTableRow>\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.job.delete}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'job', 'delete')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Delete</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.candidate.delete}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'candidate', 'delete')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Delete</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.role.delete}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'role', 'delete')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Delete</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\n\t\t\t\t\t\t\t\t<PermissionTableData>\n\t\t\t\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\t\t\t\tchecked={permissions.user.delete}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => checkHandler(e, 'user', 'delete')}\n\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t<Content>Delete</Content>\n\t\t\t\t\t\t\t\t</PermissionTableData>\n\t\t\t\t\t\t\t</PermissionTableRow>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</PermissionTable>\n\t\t\t\t</Card>\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default RoleInput\n\nconst RoleTextField = styled(TextField)`\n\t&& {\n\t\twidth: 100%;\n\t\tmargin: 5px 0px;\n\t}\n`\nconst Title = styled.h5`\n\ttext-align: left;\n\t${RemoveSpaces};\n\tpadding: 10px 0px;\n`\n\nconst PermissionTable = styled.table`\n\twidth: 100%;\n\ttext-align: left;\n\tborder-collapse: collapse;\n`\nconst PermissionTableRow = styled.tr`\n\tdisplay: flex;\n`\n\nconst PermissionTableData = styled.td`\n\tdisplay: flex;\n\talign-items: center;\n\tflex: 1;\n`\n\nconst PermissionTableHead = styled.th`\n\tdisplay: flex;\n\talign-items: center;\n\tflex: 1;\n`\n\nconst Content = styled.p`\n\t${RemoveSpaces};\n\tpadding-left: 10px;\n`\n","import React from 'react'\nimport Controls from '../../components/Controls'\nimport RoleInput from './components/RoleInput'\n\nfunction AddRole() {\n    return (\n        <div>\n          <RoleInput/>\n        </div>\n    )\n}\n\nexport default AddRole\n","import {\n\tInputLabel,\n\tMenuItem\n} from '@material-ui/core'\nimport axios from 'axios'\nimport passwordGenerator from 'generate-password'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { useRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport { rolesEndpoint, userEndpoint } from '../../../api'\nimport Controls from '../../../components/Controls'\nimport { toast } from '../../../components/Toast'\nimport { roleAtom } from '../../../recoil/atoms'\nimport {\n\tCard, ContentContainer, ControlButton,\n\n\n\n\tRemoveSpaces, StyledCheckbox\n} from '../../../styles'\nimport {\n\tSMUIFormControl,\n\tSMUISelect,\n\tSMUITextField\n} from '../../../styles/StyledMaterialUI'\nimport { encryptObj } from '../../../utils/helperFunctions'\n\n//------------\n\nfunction UserInput() {\n\tconst history = useHistory()\n\tconst [roles, setRoles] = useRecoilState(roleAtom)\n\tconst [roleId, setRoleId] = useState('')\n\n\tconst [firstName, setFirstName] = useState('')\n\tconst [lastName, setLastName] = useState('')\n\tconst [userName, setUserName] = useState('')\n\tconst [email, setEmail] = useState('')\n\tconst [password, setPassword] = useState('')\n\tconst [contact, setContact] = useState('')\n\tconst [isAutoGenerated, setIsAutoGenerated] = useState('')\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get(rolesEndpoint, { withCredentials: true })\n\t\t\t.then(({ data }) => setRoles(data))\n\t\t\t.catch((e) => console.log(e))\n\t}, [])\n\n\tconst saveUserHandler = async () => {\n\t\tconst userData = {\n\t\t\tfirstName,\n\t\t\tlastName,\n\t\t\tuserName,\n\t\t\tpassword,\n\t\t\temail,\n\t\t\tcontact,\n\t\t\troleId,\n\t\t}\n\t\tconst data = encryptObj(userData)\n\n\t\ttry {\n\t\t\tawait axios.post(userEndpoint, { data }, { withCredentials: true })\n\t\t\thistory.goBack()\n\t\t\ttoast.success('New User Added')\n\t\t} catch (error) {\n\t\t\ttoast.error('New User Added')\n\t\t}\n\t}\n\n\tconst autoGeneratePassword = (e) => {\n\t\tconst checked = e.target.checked\n\n\t\tsetIsAutoGenerated(checked)\n\t\tif (checked) {\n\t\t\tconst password = passwordGenerator.generate({\n\t\t\t\tlength: 14,\n\t\t\t\tnumbers: true,\n\t\t\t\tsymbols: true,\n\t\t\t\texcludeSimilarCharacters: true,\n\t\t\t})\n\t\t\tsetPassword(password)\n\t\t}\n\t}\n\treturn (\n\t\t<>\n\t\t\t<Controls title='Add User'>\n\t\t\t\t<ControlButton color='secondary'>Reset</ControlButton>\n\t\t\t\t<ControlButton\n\t\t\t\t\tonClick={saveUserHandler}\n\t\t\t\t\tvariant='contained'\n\t\t\t\t\tcolor='primary'>\n\t\t\t\t\tSave\n\t\t\t\t</ControlButton>\n\t\t\t</Controls>\n\t\t\t<ContentContainer>\n\t\t\t\t<Card>\n\t\t\t\t\t<SMUIFormControl variant='outlined'>\n\t\t\t\t\t\t<InputLabel id='role'>Role</InputLabel>\n\t\t\t\t\t\t<SMUISelect\n\t\t\t\t\t\t\tlabel='Role'\n\t\t\t\t\t\t\tvalue={roleId}\n\t\t\t\t\t\t\tonChange={(e) => setRoleId(e.target.value)}>\n\t\t\t\t\t\t\t{roles &&\n\t\t\t\t\t\t\t\troles.map((role) => {\n\t\t\t\t\t\t\t\t\treturn <MenuItem key={role._id} value={role._id}>{role.name}</MenuItem>\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</SMUISelect>\n\t\t\t\t\t</SMUIFormControl>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\tonChange={(e) => setEmail(e.target.value)}\n\t\t\t\t\t\ttype='email'\n\t\t\t\t\t\tlabel='Email'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tdisabled={isAutoGenerated}\n\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\tonChange={(e) => setPassword(e.target.value)}\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tlabel='Password'\n\t\t\t\t\t/>\n\t\t\t\t\t<AutoGeneratorPassContainer>\n\t\t\t\t\t\t<StyledCheckbox\n\t\t\t\t\t\t\tchecked={isAutoGenerated}\n\t\t\t\t\t\t\tonChange={autoGeneratePassword}\n\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<AutoGeneratorLabel>Auto Generated</AutoGeneratorLabel>\n\t\t\t\t\t</AutoGeneratorPassContainer>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={firstName}\n\t\t\t\t\t\tonChange={(e) => setFirstName(e.target.value)}\n\t\t\t\t\t\tlabel='First Name'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={lastName}\n\t\t\t\t\t\tonChange={(e) => setLastName(e.target.value)}\n\t\t\t\t\t\tlabel='Last Name'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={userName}\n\t\t\t\t\t\tonChange={(e) => setUserName(e.target.value)}\n\t\t\t\t\t\tlabel='Username'\n\t\t\t\t\t/>\n\t\t\t\t\t<SMUITextField\n\t\t\t\t\t\tvariant='outlined'\n\t\t\t\t\t\tvalue={contact}\n\t\t\t\t\t\tonChange={(e) => setContact(e.target.value)}\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tlabel='Contact No.'\n\t\t\t\t\t/>\n\t\t\t\t</Card>\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default UserInput\n\nconst AutoGeneratorPassContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\talign-items: center;\n`\n\nconst AutoGeneratorLabel = styled.p`\n\t${RemoveSpaces};\n\tpadding-left: 5px;\n\tfont-size: 0.8em;\n\tfont-weight: 400;\n`\n","import React from 'react'\nimport UserInput from './components/UserInput'\n\nfunction AddUser() {\n    return (\n        <>\n            <UserInput/>\n        </>\n    )\n}\n\nexport default AddUser\n","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport { get } from 'lodash'\nimport JobInput from './components/JobInput'\nimport NewJobInput from './components/NewJobInput'\n\nfunction EditJob(props) {\n\treturn (\n\t\t<>\n\t\t\t{/* <JobInput edit {...props} /> */}\n\t\t\t<NewJobInput edit={true} {...props} />\n\t\t</>\n\t)\n}\n\nexport default EditJob\n","import { MenuItem } from '@material-ui/core'\nimport axios from 'axios'\nimport { get } from 'lodash'\nimport React, { useEffect, useState } from 'react'\nimport { Timeline, TimelineEvent } from 'react-event-timeline'\nimport { useHistory } from 'react-router-dom'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { candidateEndpoint, statusEndpoint } from '../../api'\nimport Controls from '../../components/Controls'\nimport PageTab from '../../components/PageTab'\nimport {\n\tappliedCandidateTabAtom,\n\tcandidateAtom,\n\tcurrentUserAtom,\n\tstatusAtom,\n} from '../../recoil/atoms'\n\nimport { Card, ContentContainer, ControlButton } from '../../styles'\nimport { SMUISelect } from '../../styles/StyledMaterialUI'\nimport { formatDate } from '../../utils/helperFunctions'\nimport { stages } from '../../utils/sharedVariables'\nimport CandidateInfo from './components/CandidateInfo'\nimport { toast } from '../../components/Toast'\nimport { v4 as uuid } from 'uuid'\n\n\nfunction AppliedCandidate({ match }) {\n\tconst { id } = match.params\n\n\tconst history = useHistory()\n\tconst tabIndex = useRecoilValue(appliedCandidateTabAtom)\n\tconst currentUser = useRecoilValue(currentUserAtom)\n\tconst [status, setStatus] = useRecoilState(statusAtom)\n\tconst [selectedStage, setSelectedStage] = useState(newStageGenerator()[0])\n\n\tconst candidates = useRecoilValue(candidateAtom)\n\tconst [candidate, setCandidate] = useState()\n\tconst { candidateId } = status || {}\n\tconst singleCandidate = () =>\n\t\tcandidates\n\t\t\t? candidates.find((candidate) => candidate._id.toString() === candidateId)\n\t\t\t: candidate\n\n\t//new stage --> stages\n\t//Current stage -> new stage\n\n\tuseEffect(() => {\n\t\taxios.get(`${statusEndpoint}/${id}`, { withCredentials: true })\n\t\t\t.then(({ data }) => setStatus(data))\n\t\t\t.catch((e) => console.log(e))\n\n\t\taxios.get(`${candidateEndpoint}/${candidateId}`, { withCredentials: true })\n\t\t\t.then(({ data }) => setCandidate(data))\n\t\t\t.catch((e) => console.log(e))\n\t\t// setSelectedStage(get(status, 'currentStage.stageName', ''))\n\t}, [candidateId])\n\n\tconst changeStageHangler = async () => {\n\t\ttry {\n\t\t\tawait axios.patch(\n\t\t\t\t`${statusEndpoint}/${id}`,\n\t\t\t\t{\n\t\t\t\t\tstageName: selectedStage,\n\t\t\t\t\tuserId: currentUser._id,\n\t\t\t\t},\n\t\t\t\t{ withCredentials: true }\n\t\t\t)\n\t\t\thistory.goBack()\n\t\t\ttoast.success('Candidate Stage Change')\n\t\t} catch (error) {\n\t\t\ttoast.error('Something went wrong')\n\t\t}\n\t}\n\n\tconst tabLabels = ['Timeline', 'Candidate Details']\n\n\tconst renderTimelineData = get(status, 'stages', []).map(\n\t\t({ stageName, createdAt, userId }) => {\n\t\t\treturn (\n\t\t\t\t<TimelineEvent\n\t\t\t\t\tkey={uuid()}\n\t\t\t\t\ttitle={`${stageName} set by ${userId.firstName} ${userId.lastName}`}\n\t\t\t\t\tcreatedAt={formatDate(createdAt)}></TimelineEvent>\n\t\t\t)\n\t\t}\n\t)\n\n\tconst renderTabBody = (index) => {\n\t\tswitch (index) {\n\t\t\tcase 0:\n\t\t\t\treturn (\n\t\t\t\t\t<Card>\n\t\t\t\t\t\t<Timeline>{renderTimelineData}</Timeline>\n\t\t\t\t\t</Card>\n\t\t\t\t)\n\t\t\tcase 1:\n\t\t\t\treturn <CandidateInfo data={singleCandidate()} />\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\t// const renderStageOption =\n\t// \tstatus &&\n\t// \tstages\n\t// \t\t.filter((stage) => stage !== status.currentStage.stageName)\n\t// \t\t.map((stage) => {\n\t// \t\t\treturn <MenuItem value={stage}>{stage}</MenuItem>\n\t// \t\t})\n\n\tfunction newStageGenerator() {\n\t\tconst currentStatus = status && status.currentStage.stageName\n\t\tconst index = stages.indexOf(currentStatus)\n\t\tconst newStages = stages.slice(index + 1)\n\t\treturn newStages\n\t}\n\n\tconst renderStageOption = newStageGenerator().map((stage) => {\n\t\treturn <MenuItem key={uuid()} value={stage}>{stage}</MenuItem>\n\t})\n\n\treturn (\n\t\t<>\n\t\t\t<Controls title='Candidate'>\n\t\t\t\t<SMUISelect\n\t\t\t\t\tvalue={selectedStage}\n\t\t\t\t\tonChange={(e) => setSelectedStage(e.target.value)}>\n\t\t\t\t\t{renderStageOption}\n\t\t\t\t</SMUISelect>\n\t\t\t\t<ControlButton\n\t\t\t\t\tonClick={changeStageHangler}\n\t\t\t\t\tvariant='contained'\n\t\t\t\t\tcolor='primary'>\n\t\t\t\t\tSet\n\t\t\t\t</ControlButton>\n\t\t\t</Controls>\n\t\t\t<ContentContainer>\n\t\t\t\t<PageTab atom={appliedCandidateTabAtom} labels={tabLabels} />\n\t\t\t\t{renderTabBody(tabIndex)}\n\t\t\t</ContentContainer>\n\t\t</>\n\t)\n}\n\nexport default AppliedCandidate\n","import React from 'react'\n// import CandidateInput from './components/CandidateInput'\nimport NewCandidateInput from './components/NewCandidateInput'\n\nfunction EditCandidate(props) {\n\treturn (\n\t\t<>\n\t\t\t{/* <CandidateInput edit {...props} /> */}\n\t\t\t<NewCandidateInput edit {...props} />\n\t\t</>\n\t)\n}\n\nexport default EditCandidate\n","import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport {logsApi} from '../api'\n\nconst Logs = () => {\n\n        const [data, setData] = useState()\n\n        useEffect(() => {\n\n                axios.get(logsApi, {withCredentials: true})\n                .then(data => {\n                        setData(data.data)\n                })\n                .catch(err => setData(err))\n\n        }, [])\n\n        console.log(data)\n\n        return (\n                <div>\n                      logs\n                </div>\n        )\n}\n\nexport default Logs\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport Sidebar from './components/Sidebar'\nimport { HashRouter, Switch, Route, useHistory } from 'react-router-dom'\nimport DashboardPage from './pages/Dashboard'\nimport JobPage from './pages/Job/JobPage'\nimport CandidatePage from './pages/Candidate'\nimport RolePage from './pages/Role'\nimport UserPage from './pages/User'\nimport AddJob from './pages/Job/AddJob'\nimport JobDetails from './pages/Job/JobDetails'\nimport AddCandidate from './pages/Candidate/AddCandidate'\n// import CandidateDetails from './pages/Candidate/CandidateDetails'\nimport CandidateDetails from './pages/Candidate/NewCandidateDetails'\nimport ApplyJobList from './pages/Job/ApplyJobList'\nimport ProfilePage from './pages/Profile'\nimport CompanyPage from './pages/Company'\nimport AddCompany from './pages/Company/AddCompany'\nimport Signin from './pages/Signin'\nimport { useRecoilState, useRecoilValue } from 'recoil'\nimport { credentialAtom, currentUserAtom, isAuthAtom } from './recoil/atoms'\nimport Navbar from './components/Navbar'\nimport AddRole from './pages/Role/AddRole'\nimport AddUser from './pages/User/AddUser'\nimport EditJob from './pages/Job/EditJob'\nimport axios from 'axios'\nimport { verifyEndpoint } from './api'\nimport AppliedCandidate from './pages/Candidate/AppliedCandidate'\nimport EditCandidate from './pages/Candidate/EditCandidate'\nimport Loader from './components/Loader'\nimport Logs from './components/Logs'\n\nfunction App() {\n\tconst [isAuth, setAuth] = useRecoilState(isAuthAtom)\n\tconst [currentUser, setCurrentUser] = useRecoilState(currentUserAtom)\n\n\t// CurrentUser Null --> skeleton\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.post(verifyEndpoint, {}, { withCredentials: true })\n\t\t\t.then(({ data }) => {\n\t\t\t\tsetAuth(true)\n\t\t\t\tsetCurrentUser(data.userData)\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tsetAuth(false)\n\t\t\t\tsetCurrentUser({})\n\t\t\t})\n\t}, [])\n\n\tconst routes = (\n\t\t<Switch>\n\t\t\t<Route path='/dashboard' exact component={DashboardPage} />\n\t\t\t<Route path='/job/add' component={AddJob} />\n\t\t\t<Route path='/job/apply' component={ApplyJobList} />\n\t\t\t<Route path='/job/edit/:id' component={EditJob} />\n\t\t\t<Route path='/job/:id' component={JobDetails} />\n\t\t\t<Route path='/job' component={JobPage} />\n\t\t\t<Route path='/logs' component={Logs} />\n\n\t\t\t<Route path='/candidate/add' component={AddCandidate} />\n\t\t\t<Route path='/candidate/edit/:id' component={EditCandidate} />\n\n\t\t\t<Route path='/candidate/:id' component={CandidateDetails} />\n\t\t\t<Route path='/candidate' component={CandidatePage} />\n\n\t\t\t<Route path='/company/add' component={AddCompany} />\n\t\t\t<Route path='/company' component={CompanyPage} />\n\n\t\t\t<Route path='/role/add' component={AddRole} />\n\t\t\t<Route path='/role' component={RolePage} />\n\n\t\t\t<Route path='/user/add' component={AddUser} />\n\t\t\t<Route path='/user' component={UserPage} />\n\n\t\t\t<Route path='/profile' component={ProfilePage} />\n\t\t\t<Route path='/applied/:id' component={AppliedCandidate} />\n\t\t</Switch>\n\t)\n\n\treturn (\n\t\t<AppContainer>\n\t\t\t{currentUser ? (\n\t\t\t\t<HashRouter>\n\t\t\t\t\t{isAuth ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<Navbar />\n\t\t\t\t\t\t\t<Layout>\n\t\t\t\t\t\t\t\t<Sidebar />\n\t\t\t\t\t\t\t\t<ComponentContainer>{routes}</ComponentContainer>\n\t\t\t\t\t\t\t</Layout>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Route path='/' exact component={Signin} />\n\t\t\t\t\t)}\n\t\t\t\t</HashRouter>\n\t\t\t) : (\n\t\t\t\t<Loader />\n\t\t\t)}\n\t\t</AppContainer>\n\t)\n}\n\nexport default App\n\nconst AppContainer = styled.div`\n\ttext-align: center;\n\theight: 100%;\n`\nconst Layout = styled.div`\n\tdisplay: flex;\n\theight: 90%;\n\twidth: 100%;\n`\n\nconst ComponentContainer = styled.div`\n\tflex: 1;\n\tbackground-color: #0000000d;\n\t/* height: 100%; */\n\toverflow-y: auto;\n\tscroll-behavior: smooth;\n\t/* padding: 10px; */\n`\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { RecoilRoot } from 'recoil'\n\n\n\nReactDOM.render(\n\t\t<RecoilRoot>\n\t\t\t<App />\n\t\t</RecoilRoot>,\n\tdocument.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}